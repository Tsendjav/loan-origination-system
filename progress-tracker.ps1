# ================================================================
# üè¶ LOS –¢”©—Å–ª–∏–π–Ω –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –ü—Ä–æ–≥—Ä–µ—Å—Å –®–∞–ª–≥–∞–≥—á v5.0  
# Enhanced-LOS-Progress-Tracker.ps1
# –í–µ—Ä—Å–∏–π: 5.0 - 2025-08-11
# file-check.ps1 v3.4 + progress-tracker.ps1 v3.0 –±“Ø—Ä—ç–Ω –Ω—ç–≥—Ç–≥—ç—Å—ç–Ω —Ö—É–≤–∏–ª–±–∞—Ä
# –®–∏–Ω—ç ”©—Ä–≥”©—Ç–≥”©–ª“Ø“Ø–¥: Docker —Ñ–∞–π–ª—É—É–¥, Migration —Ñ–∞–π–ª—É—É–¥, CI/CD pipeline —Ñ–∞–π–ª—É—É–¥
# ================================================================

param(
    [Parameter(Mandatory=$false)]
    [switch]$Detailed = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$TestMode = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$ShowStructure = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$BackendOnly = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$FrontendOnly = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$CreateMissing = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$QuickCheck = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$ShowAllFiles = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$ShowMissingOnly = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$ShowExistingOnly = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$ShowFilePaths = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$ShowFileDetails = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$ValidateContent = $false,
    
    [Parameter(Mandatory=$false)]
    [string]$LogFile = "los-progress-enhanced.log",
    
    [Parameter(Mandatory=$false)]
    [string]$BackendLogFile = "backend-structure.log",
    
    [Parameter(Mandatory=$false)]
    [string]$FrontendLogFile = "frontend-structure.log",
    
    [Parameter(Mandatory=$false)]
    [int]$Week = 0,
    
    [Parameter(Mandatory=$false)]
    [int]$Phase = 0,
    
    [Parameter(Mandatory=$false)]
    [string]$ExportFormat = "console", # console, json, csv, html
    
    [Parameter(Mandatory=$false)]
    [string]$RootPath = ".",
    
    [Parameter(Mandatory=$false)]
    [int]$MaxDepth = 3,
    
    [Parameter(Mandatory=$false)]
    [switch]$DebugMode = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$CheckDependencies = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$ShowMigrations = $false
)

# UTF-8 –¥—ç–º–∂–ª—ç–≥
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# Global variables
$global:TotalFilesExpected = 0
$global:TotalFilesFound = 0
$global:PhaseResults = @{}
$global:StartTime = Get-Date
$global:ExistingFiles = @()
$global:MissingFiles = @()
$global:ProjectRoot = if ($RootPath -eq ".") { Get-Location } else { $RootPath }

# ================================================================
# CORE UTILITY FUNCTIONS
# ================================================================

# ”®–Ω–≥”©—Ç—ç–π —Ç–µ–∫—Å—Ç –±–∏—á–∏—Ö —Ñ—É–Ω–∫—Ü
function Write-ColoredText {
    param(
        $Text, 
        $Color = "White", 
        [switch]$ToBackendLog = $false, 
        [switch]$ToFrontendLog = $false, 
        [switch]$NoNewLine = $false
    )
    
    if ($NoNewLine) {
        Write-Host $Text -ForegroundColor $Color -NoNewline
    } else {
        Write-Host $Text -ForegroundColor $Color
    }
    
    # Backend –ª–æ–≥–¥ –±–∏—á–∏—Ö
    if ($ToBackendLog -and ($ShowStructure -and (!$FrontendOnly))) {
        Write-BackendLog $Text
    }
    
    # Frontend –ª–æ–≥–¥ –±–∏—á–∏—Ö
    if ($ToFrontendLog -and ($ShowStructure -and (!$BackendOnly))) {
        Write-FrontendLog $Text
    }
    
    # –õ–æ–≥ —Ñ–∞–π–ª–¥ –±–∏—á–∏—Ö
    if ($LogFile) {
        try {
            $timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
            $cleanText = $Text -replace '\x1b\[[0-9;]*m', ''
            $logEntry = "[$timestamp] $cleanText"
            Add-Content -Path $LogFile -Value $logEntry -Encoding UTF8 -ErrorAction SilentlyContinue
        } catch {
            # –õ–æ–≥ –∞–ª–¥–∞–∞–≥ “Ø–ª —Ç–æ–æ–º—Å–æ—Ä–ª–æ
        }
    }
}

# –§–∞–π–ª—ã–Ω icon –∞–≤–∞—Ö —Ñ—É–Ω–∫—Ü
function Get-FileIcon {
    param($Extension, $FileName = "")
    
    # –¢—É—Å–≥–∞–π —Ñ–∞–π–ª—É—É–¥—ã–Ω icon
    switch -Regex ($FileName) {
        "^docker-compose" { return 'üê≥' }
        "^Dockerfile" { return 'üê≥' }
        "\.env" { return 'üîê' }
        "ci\.yml$|\.github" { return 'üîÑ' }
        "README\.md$" { return 'üìñ' }
        "pom\.xml$" { return 'üèóÔ∏è' }
        "package\.json$" { return 'üì¶' }
        "V\d+.*\.sql$" { return 'üóÉÔ∏è' }
        "\.gitignore$" { return 'üö´' }
        "mvnw\.cmd$" { return '‚öôÔ∏è' }
    }
    
    # Extension-—ç—ç—Ä icon
    switch -Wildcard ($Extension.ToLower()) {
        '.java' { return '‚òï' }
        '.tsx' { return '‚öõÔ∏è' }
        '.ts*' { return 'üìò' }
        '.js' { return 'üìú' }
        '.json' { return 'üîñ' }
        '.yml' { return '‚öôÔ∏è' }
        '.yaml' { return '‚öôÔ∏è' }
        '.sql' { return 'üóÉÔ∏è' }
        '.md' { return 'üìù' }
        '.html' { return 'üåê' }
        '.css' { return 'üé®' }
        '.xml' { return 'üìã' }
        '.bpmn' { return 'üîÑ' }
        '.txt' { return 'üìÑ' }
        '.properties' { return '‚öôÔ∏è' }
        '.bak' { return 'üíæ' }
        '.dockerfile' { return 'üê≥' }
        default { return 'üìÑ' }
    }
}

# –§–∞–π–ª—ã–Ω ”©–Ω–≥”© —Ç–æ–≥—Ç–æ–æ—Ö —Ñ—É–Ω–∫—Ü
function Get-FileColor {
    param($Extension)
    switch ($Extension.ToLower()) {
        ".java" { return "Yellow" }
        ".tsx" { return "Cyan" }
        ".ts" { return "Blue" }
        ".js" { return "DarkYellow" }
        ".css" { return "Magenta" }
        ".html" { return "Green" }
        ".json" { return "White" }
        ".yml" { return "Gray" }
        ".yaml" { return "Gray" }
        ".xml" { return "DarkGreen" }
        ".properties" { return "Gray" }
        ".sql" { return "DarkCyan" }
        ".md" { return "White" }
        ".txt" { return "Gray" }
        ".bpmn" { return "DarkMagenta" }
        ".dockerfile" { return "Blue" }
        default { return "White" }
    }
}

# Progress bar “Ø“Ø—Å–≥—ç—Ö
function Show-ProgressBar {
    param($Current, $Total, $Title = "Progress", $ShowPercentage = $true, $BarLength = 50)
    
    if ($Total -eq 0 -or $null -eq $Total) {
        $percent = 0
        $bar = "‚ñë" * $BarLength
    } else {
        $percent = [math]::Round(($Current / $Total) * 100, 1)
        $filledLength = [math]::Round(($percent / 100) * $BarLength)
        $bar = "‚ñà" * $filledLength + "‚ñë" * ($BarLength - $filledLength)
    }
    
    if ($ShowPercentage) {
        Write-ColoredText "$Title [$bar] $percent% ($Current/$Total)" "Cyan"
    } else {
        Write-ColoredText "$Title [$bar] ($Current/$Total)" "Cyan"
    }
}

# –§–∞–π–ª—ã–Ω —Ö—ç–º–∂—ç—ç —Ñ–æ—Ä–º–∞—Ç–ª–∞—Ö
function Format-FileSize {
    param($Bytes)
    if ($Bytes -lt 1KB) {
        return "$Bytes B"
    } elseif ($Bytes -lt 1MB) {
        return "$([math]::Round($Bytes/1KB, 1)) KB"
    } elseif ($Bytes -lt 1GB) {
        return "$([math]::Round($Bytes/1MB, 1)) MB"
    } else {
        return "$([math]::Round($Bytes/1GB, 1)) GB"
    }
}

# ================================================================
# ADVANCED FILE SEARCH AND DETECTION FUNCTIONS
# ================================================================

# –°–∞–π–∂—Ä—É—É–ª—Å–∞–Ω —Ñ–∞–π–ª —Ö–∞–π—Ö —Ñ—É–Ω–∫—Ü
function Find-ProjectFile {
    param($FileName, $ExpectedPath = "")
    
    if ($DebugMode) {
        Write-ColoredText "üîç –•–∞–π–∂ –±–∞–π–Ω–∞: $FileName" "Gray"
    }
    
    # –≠—Ö–ª—ç—ç–¥ expected path-—ç—ç—Ä —à–∞–ª–≥–∞—Ö
    if ($ExpectedPath -and (Test-Path $ExpectedPath)) {
        if ($DebugMode) {
            Write-ColoredText "   ‚úÖ Expected path-–¥ –æ–ª–¥–ª–æ–æ: $ExpectedPath" "Green"
        }
        return (Get-Item $ExpectedPath).FullName
    }
    
    $searchPaths = @()
    $extension = [System.IO.Path]::GetExtension($FileName)
    $baseName = [System.IO.Path]::GetFileNameWithoutExtension($FileName)
    
    # Docker —Ñ–∞–π–ª—É—É–¥—ã–Ω —Ç—É—Å–≥–∞–π —Ö–∞–π–ª—Ç
    if ($FileName -match "^(Dockerfile|docker-compose)") {
        $dockerPaths = @()
        
        # .dockerfile extension-—Ç–∞–π –±–æ–ª–æ–Ω extension-–≥“Ø–π —Ö–æ—ë—É–ª–∞–∞ —Ö–∞–π—Ö
        if ($FileName -like "Dockerfile.*" -and $FileName -notlike "*.dockerfile") {
            # Dockerfile.backend -> Dockerfile.backend.dockerfile-–∏–π–≥ —á —Ö–∞–π—Ö
            $dockerfileVariant = "$FileName.dockerfile"
            $dockerPaths += @(
                (Join-Path $global:ProjectRoot $FileName),
                (Join-Path $global:ProjectRoot $dockerfileVariant),
                (Join-Path $global:ProjectRoot "docker/$FileName"),
                (Join-Path $global:ProjectRoot "docker/$dockerfileVariant"),
                (Join-Path $global:ProjectRoot "scripts/$FileName"),
                (Join-Path $global:ProjectRoot "scripts/$dockerfileVariant")
            )
        } else {
            $dockerPaths += @(
                (Join-Path $global:ProjectRoot $FileName),
                (Join-Path $global:ProjectRoot "docker/$FileName"),
                (Join-Path $global:ProjectRoot "scripts/$FileName")
            )
        }
        
        foreach ($path in $dockerPaths) {
            if ($DebugMode) {
                Write-ColoredText "   üìç Docker —Ñ–∞–π–ª —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞: $path" "Gray"
            }
            if (Test-Path $path) {
                if ($DebugMode) {
                    Write-ColoredText "   ‚úÖ –û–ª–¥–ª–æ–æ: $path" "Green"
                }
                return (Get-Item $path).FullName
            }
        }
    }
    
    # CI/CD —Ñ–∞–π–ª—É—É–¥—ã–Ω —Ö–∞–π–ª—Ç
    if ($FileName -eq "ci.yml" -or $FileName -like "*.workflow*") {
        $ciPaths = @(
            (Join-Path $global:ProjectRoot ".github/workflows/$FileName"),
            (Join-Path $global:ProjectRoot ".github/workflows/ci.yml"),
            (Join-Path $global:ProjectRoot ".github/workflows/build.yml"),
            (Join-Path $global:ProjectRoot ".github/workflows/deploy.yml"),
            (Join-Path $global:ProjectRoot "ci/$FileName"),
            (Join-Path $global:ProjectRoot "scripts/$FileName")
        )
        
        foreach ($path in $ciPaths) {
            if ($DebugMode) {
                Write-ColoredText "   üìç CI —Ñ–∞–π–ª —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞: $path" "Gray"
            }
            if (Test-Path $path) {
                if ($DebugMode) {
                    Write-ColoredText "   ‚úÖ –û–ª–¥–ª–æ–æ: $path" "Green"
                }
                return (Get-Item $path).FullName
            }
        }
    }
    
    # Migration —Ñ–∞–π–ª—É—É–¥—ã–Ω —Ö–∞–π–ª—Ç
    if ($FileName -like "V*__*.sql" -or $FileName -like "*migration*") {
        $migrationPaths = @(
            (Join-Path $global:ProjectRoot "backend/src/main/resources/db/migration/$FileName"),
            (Join-Path $global:ProjectRoot "backend/src/main/resources/db/migrations/$FileName"),
            (Join-Path $global:ProjectRoot "backend/db/migration/$FileName"),
            (Join-Path $global:ProjectRoot "src/main/resources/db/migration/$FileName"),
            (Join-Path $global:ProjectRoot "database/migrations/$FileName")
        )
        
        foreach ($path in $migrationPaths) {
            if ($DebugMode) {
                Write-ColoredText "   üìç Migration —Ñ–∞–π–ª —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞: $path" "Gray"
            }
            if (Test-Path $path) {
                if ($DebugMode) {
                    Write-ColoredText "   ‚úÖ –û–ª–¥–ª–æ–æ: $path" "Green"
                }
                return (Get-Item $path).FullName
            }
        }
    }
    
    # Java —Ñ–∞–π–ª—É—É–¥—ã–Ω —Ö–∞–π–ª—Ç
    if ($extension -eq ".java") {
        $javaPaths = @(
            "backend/src/main/java/com/company/los",
            "backend/src/main/java/com/company/los/*",
            "backend/src/main/java/com/company/los/**/*",
            "backend/src/test/java/com/company/los",
            "backend/src/test/java/com/company/los/*",
            "backend/src/test/java/com/company/los/**/*",
            "src/main/java/com/company/los",
            "src/test/java/com/company/los"
        )
        
        foreach ($basePath in $javaPaths) {
            $searchPaths += Join-Path $global:ProjectRoot "$basePath/$FileName"
        }
    }
    
    # Frontend —Ñ–∞–π–ª—É—É–¥—ã–Ω —Ö–∞–π–ª—Ç
    elseif ($extension -in @('.tsx', '.ts', '.css', '.json', '.js')) {
        $frontendPaths = @(
            "frontend/src",
            "frontend/src/components",
            "frontend/src/pages", 
            "frontend/src/services",
            "frontend/src/types",
            "frontend/src/hooks",
            "frontend/src/store",
            "frontend/src/utils",
            "frontend/src/styles",
            "frontend/src/contexts",
            "frontend/src/config",
            "frontend",
            "src/components",
            "src/pages",
            "src/services"
        )
        
        foreach ($path in $frontendPaths) {
            $searchPaths += Join-Path $global:ProjectRoot "$path/$FileName"
        }
    }
    
    # Resource —Ñ–∞–π–ª—É—É–¥—ã–Ω —Ö–∞–π–ª—Ç  
    elseif ($extension -in @('.yml', '.yaml', '.sql', '.properties')) {
        $resourcePaths = @(
            "backend/src/main/resources",
            "backend/src/main/resources/config",
            "backend/src/main/resources/db",
            "backend/src/main/resources/processes",
            "backend/src/main/resources/templates",
            "src/main/resources",
            "config",
            "resources"
        )
        
        foreach ($path in $resourcePaths) {
            $searchPaths += Join-Path $global:ProjectRoot "$path/$FileName"
        }
    }
    
    # Documentation —Ñ–∞–π–ª—É—É–¥
    elseif ($extension -eq ".md" -or $FileName -like "README*") {
        $docPaths = @(
            (Join-Path $global:ProjectRoot $FileName),
            (Join-Path $global:ProjectRoot "docs/$FileName"),
            (Join-Path $global:ProjectRoot "documentation/$FileName"),
            (Join-Path $global:ProjectRoot "README.md")
        )
        
        foreach ($path in $docPaths) {
            if ($DebugMode) {
                Write-ColoredText "   üìç Documentation —Ñ–∞–π–ª —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞: $path" "Gray"
            }
            if (Test-Path $path) {
                if ($DebugMode) {
                    Write-ColoredText "   ‚úÖ –û–ª–¥–ª–æ–æ: $path" "Green"
                }
                return (Get-Item $path).FullName
            }
        }
    }
    
    # –ï—Ä”©–Ω—Ö–∏–π —Ö–∞–π–ª—Ç
    else {
        $searchPaths += @(
            (Join-Path $global:ProjectRoot $FileName),
            (Join-Path $global:ProjectRoot "*/$FileName"),
            (Join-Path $global:ProjectRoot "backend/$FileName"),
            (Join-Path $global:ProjectRoot "frontend/$FileName"),
            (Join-Path $global:ProjectRoot "docs/$FileName"),
            (Join-Path $global:ProjectRoot "scripts/$FileName"),
            (Join-Path $global:ProjectRoot "config/$FileName")
        )
    }
    
    # –§–∞–π–ª—ã–≥ –æ–ª–æ—Ö –≥—ç–∂ –æ—Ä–æ–ª–¥–æ—Ö
    foreach ($searchPath in $searchPaths) {
        if ($DebugMode) {
            Write-ColoredText "   üìç –•–∞–π–ª—Ç—ã–Ω –∑–∞–º: $searchPath" "Gray"
        }
        try {
            if (Test-Path $searchPath) {
                if ($DebugMode) {
                    Write-ColoredText "   ‚úÖ –û–ª–¥–ª–æ–æ: $searchPath" "Green"
                }
                return (Get-Item $searchPath).FullName
            }
            
            # Recursive —Ö–∞–π–ª—Ç
            $foundFiles = Get-ChildItem -Path $searchPath -Recurse -ErrorAction SilentlyContinue | Where-Object { $_.Name -eq $FileName }
            if ($foundFiles.Count -gt 0) {
                if ($DebugMode) {
                    Write-ColoredText "   ‚úÖ Recursive-—ç—ç—Ä –æ–ª–¥–ª–æ–æ: $($foundFiles[0].FullName)" "Green"
                }
                return $foundFiles[0].FullName
            }
        } catch {
            if ($DebugMode) {
                Write-ColoredText "   ‚ö†Ô∏è –•–∞–π–ª—Ç—ã–Ω –∞–ª–¥–∞–∞: $searchPath - $($_.Exception.Message)" "Yellow"
            }
        }
    }
    
    if ($DebugMode) {
        Write-ColoredText "   ‚ùå –û–ª–¥—Å–æ–Ω–≥“Ø–π: $FileName" "Red"
    }
    return $null
}

# –§–∞–π–ª—ã–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö —Ñ—É–Ω–∫—Ü
function Get-FileDetails {
    param($FilePath)
    
    if (Test-Path $FilePath) {
        $fileInfo = Get-Item $FilePath
        $extension = [System.IO.Path]::GetExtension($FilePath)
        
        # –ú”©—Ä–∏–π–Ω —Ç–æ–æ (—Ç–µ–∫—Å—Ç —Ñ–∞–π–ª—É—É–¥—ã–Ω —Ö—É–≤—å–¥)
        $lineCount = 0
        $textExtensions = @('.java', '.ts', '.tsx', '.sql', '.yml', '.yaml', '.html', '.txt', '.md', '.css', '.js', '.xml', '.properties', '.dockerfile')
        if ($extension -in $textExtensions) {
            try {
                $lineCount = (Get-Content $FilePath -ErrorAction SilentlyContinue | Measure-Object -Line).Lines
            } catch {
                $lineCount = 0
            }
        }
        
        return @{
            Exists = $true
            Size = $fileInfo.Length
            LastModified = $fileInfo.LastWriteTime
            LineCount = $lineCount
            Extension = $extension
            FullPath = $fileInfo.FullName
            Directory = $fileInfo.DirectoryName
        }
    } else {
        return @{
            Exists = $false
            Size = 0
            LastModified = $null
            LineCount = 0
            Extension = [System.IO.Path]::GetExtension($FilePath)
            FullPath = $null
            Directory = $null
        }
    }
}

# ================================================================
# ENHANCED PROJECT FILE DEFINITIONS  
# ================================================================

# –¢”®–°–õ–ò–ô–ù –§–ê–ô–õ–£–£–î–´–ù –®–ò–ù–≠–ß–õ–≠–ì–î–°–≠–ù –ñ–ê–ì–°–ê–ê–õ–¢
$expectedFiles = @{
    # Phase 1.1: Infrastructure & DevOps Setup
    "Phase1_Infrastructure" = @(
        "backend/pom.xml",
        "backend/mvnw.cmd", 
        "backend/src/main/java/com/company/los/LoanOriginationApplication.java",
        "backend/src/main/java/com/company/los/config/CorsConfig.java",
        "backend/src/main/java/com/company/los/config/SwaggerConfig.java",
        "backend/src/main/java/com/company/los/config/DatabaseConfig.java",
        "backend/src/main/java/com/company/los/config/JpaConfig.java",
        "Dockerfile.backend.dockerfile",
        "Dockerfile.frontend.dockerfile", 
        "docker-compose.yml",
        "docker-compose.prod.yml",
        ".gitignore",
        ".github/workflows/ci.yml"
    )
    
    # Phase 1.2: Domain Model & Database Setup
    "Phase1_DomainModel" = @(
        "backend/src/main/java/com/company/los/entity/BaseEntity.java",
        "backend/src/main/java/com/company/los/entity/Customer.java",
        "backend/src/main/java/com/company/los/entity/LoanApplication.java",
        "backend/src/main/java/com/company/los/entity/Document.java",
        "backend/src/main/java/com/company/los/entity/DocumentType.java",
        "backend/src/main/java/com/company/los/entity/User.java",
        "backend/src/main/java/com/company/los/entity/Role.java",
        "backend/src/main/java/com/company/los/enums/LoanStatus.java",
        "backend/src/main/java/com/company/los/enums/DocumentType.java",
        "backend/src/main/resources/application.yml",
        "backend/src/main/resources/application-dev.yml",
        "backend/src/main/resources/application-prod.yml",
        "backend/src/main/resources/data.sql",
        "backend/src/main/resources/schema.sql",
        "backend/src/main/resources/db/migration/V1__init.sql"
    )
    
    # Phase 1.3: Data Access Layer
    "Phase1_DataAccess" = @(
        "backend/src/main/java/com/company/los/repository/BaseRepository.java",
        "backend/src/main/java/com/company/los/repository/CustomerRepository.java",
        "backend/src/main/java/com/company/los/repository/LoanApplicationRepository.java",
        "backend/src/main/java/com/company/los/repository/DocumentRepository.java",
        "backend/src/main/java/com/company/los/repository/DocumentTypeRepository.java",
        "backend/src/main/java/com/company/los/repository/UserRepository.java",
        "backend/src/main/java/com/company/los/repository/RoleRepository.java"
    )
    
    # Phase 2.1: Business Logic Services
    "Phase2_Services" = @(
        "backend/src/main/java/com/company/los/service/CustomerService.java",
        "backend/src/main/java/com/company/los/service/LoanApplicationService.java",
        "backend/src/main/java/com/company/los/service/DocumentService.java",
        "backend/src/main/java/com/company/los/service/UserService.java",
        "backend/src/main/java/com/company/los/service/AuthService.java",
        "backend/src/main/java/com/company/los/service/impl/CustomerServiceImpl.java",
        "backend/src/main/java/com/company/los/service/impl/LoanApplicationServiceImpl.java",
        "backend/src/main/java/com/company/los/service/impl/DocumentServiceImpl.java",
        "backend/src/main/java/com/company/los/service/impl/UserServiceImpl.java",
        "backend/src/main/java/com/company/los/service/impl/AuthServiceImpl.java"
    )
    
    # Phase 2.2: REST API Controllers
    "Phase2_Controllers" = @(
        "backend/src/main/java/com/company/los/controller/CustomerController.java",
        "backend/src/main/java/com/company/los/controller/LoanApplicationController.java",
        "backend/src/main/java/com/company/los/controller/DocumentController.java",
        "backend/src/main/java/com/company/los/controller/UserController.java",
        "backend/src/main/java/com/company/los/controller/AuthController.java",
        "backend/src/main/java/com/company/los/controller/HealthController.java",
        "backend/src/main/java/com/company/los/security/JwtUtil.java",
        "backend/src/main/java/com/company/los/security/SecurityConfig.java"
    )
    
    # Phase 2.3: Data Transfer Objects
    "Phase2_DTOs" = @(
        "backend/src/main/java/com/company/los/dto/CustomerDto.java",
        "backend/src/main/java/com/company/los/dto/LoanApplicationDto.java",
        "backend/src/main/java/com/company/los/dto/DocumentDto.java",
        "backend/src/main/java/com/company/los/dto/DocumentTypeDto.java",
        "backend/src/main/java/com/company/los/dto/UserDto.java",
        "backend/src/main/java/com/company/los/dto/CreateLoanRequestDto.java",
        "backend/src/main/java/com/company/los/dto/AuthResponseDto.java"
    )
    
    # Phase 3.1: Frontend Foundation
    "Phase3_FrontendSetup" = @(
        "frontend/package.json",
        "frontend/vite.config.ts",
        "frontend/tsconfig.json",
        "frontend/index.html",
        "frontend/src/main.tsx",
        "frontend/src/App.tsx",
        "frontend/src/types/index.ts",
        "frontend/src/config/api.tsx"
    )
    
    # Phase 3.2: React Components
    "Phase3_Components" = @(
        "frontend/src/components/layout/MainLayout.tsx",
        "frontend/src/components/layout/Header.tsx",
        "frontend/src/components/layout/Sidebar.tsx",
        "frontend/src/components/customer/CustomerList.tsx",
        "frontend/src/components/customer/CustomerForm.tsx",
        "frontend/src/components/loan/LoanApplicationForm.tsx",
        "frontend/src/components/auth/LoginForm.tsx",
        "frontend/src/components/common/LoadingSpinner.tsx"
    )
    
    # Phase 3.3: Application Pages
    "Phase3_Pages" = @(
        "frontend/src/pages/CustomerPage.tsx",
        "frontend/src/pages/LoanApplicationPage.tsx",
        "frontend/src/pages/LoginPage.tsx",
        "frontend/src/pages/DashboardPage.tsx"
    )
    
    # Phase 3.4: Frontend Services
    "Phase3_Services" = @(
        "frontend/src/services/customerService.ts",
        "frontend/src/services/loanService.ts",
        "frontend/src/services/authService.ts",
        "frontend/src/contexts/AuthContext.tsx",
        "frontend/src/types/customer.ts",
        "frontend/src/types/loan.ts",
        "frontend/src/types/document.ts"
    )
    
    # Phase 4.1: Testing Framework
    "Phase4_Testing" = @(
        "backend/src/test/java/com/company/los/controller/CustomerControllerTest.java",
        "backend/src/test/java/com/company/los/service/CustomerServiceTest.java",
        "backend/src/test/java/com/company/los/service/DocumentServiceTest.java",
        "backend/src/test/java/com/company/los/service/LoanApplicationServiceTest.java",
        "backend/src/test/java/com/company/los/integration/LoanApplicationIntegrationTest.java",
        "frontend/src/__tests__/components/CustomerForm.test.tsx",
        "frontend/src/__tests__/services/api.test.ts"
    )
    
    # Phase 4.2: DevOps & Documentation  
    "Phase4_DevOps" = @(
        "docs/API.md",
        "docs/USER_GUIDE.md",
        "docs/DEPLOYMENT.md",
        "README.md"
    )
}

# ================================================================
# HTTP AND SYSTEM UTILITIES
# ================================================================

# HTTP —Ö“Ø—Å—ç–ª—Ç —à–∞–ª–≥–∞—Ö —Ñ—É–Ω–∫—Ü
function Test-HttpEndpoint {
    param($Url, $Timeout = 5, $ExpectedStatus = 200)
    try {
        $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
        $response = Invoke-WebRequest -Uri $Url -Method GET -TimeoutSec $Timeout -UseBasicParsing -ErrorAction Stop
        $stopwatch.Stop()
        
        return @{
            Success = $true
            StatusCode = $response.StatusCode
            ResponseTime = $stopwatch.ElapsedMilliseconds
            ContentLength = $response.Content.Length
            Headers = $response.Headers
        }
    } catch {
        return @{
            Success = $false
            StatusCode = if ($_.Exception.Response) { $_.Exception.Response.StatusCode.value__ } else { 0 }
            Error = $_.Exception.Message
            ResponseTime = 0
        }
    }
}

# –§–∞–π–ª—ã–Ω —Ç–æ–æ —Ç–æ–æ–ª–æ—Ö —Ñ—É–Ω–∫—Ü
function Count-FilesInDirectory {
    param($Path, $Pattern = "*.*", [switch]$Recursive = $true)
    try {
        if (Test-Path $Path) {
            if ($Recursive) {
                return (Get-ChildItem -Path $Path -Recurse -Filter $Pattern -File -ErrorAction SilentlyContinue | Measure-Object).Count
            } else {
                return (Get-ChildItem -Path $Path -Filter $Pattern -File -ErrorAction SilentlyContinue | Measure-Object).Count
            }
        }
        return 0
    } catch {
        return 0
    }
}

# –§–∞–π–ª—ã–Ω —Ö—ç–º–∂—ç—ç —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö —Ñ—É–Ω–∫—Ü
function Get-DirectorySize {
    param($Path)
    try {
        if (Test-Path $Path) {
            $size = (Get-ChildItem -Path $Path -Recurse -File -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum
            return if ($size) { $size } else { 0 }
        }
        return 0
    } catch {
        return 0
    }
}

# ================================================================
# LOGGING FUNCTIONS
# ================================================================

# –õ–æ–≥ —Ñ–∞–π–ª—É—É–¥—ã–≥ —ç—Ö–ª“Ø“Ø–ª—ç—Ö
function Initialize-StructureLogs {
    if ($ShowStructure) {
        # Backend –ª–æ–≥
        if (!$FrontendOnly -and $BackendLogFile) {
            try {
                if (Test-Path $BackendLogFile) { Remove-Item $BackendLogFile -Force }
                $header = @"
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üèóÔ∏è BACKEND –§–ê–ô–õ–´–ù –ë“Æ–¢–≠–¶ - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìÇ –ê–∂–∏–ª–ª–∞–∂ –±—É–π –¥–∏—Ä–µ–∫—Ç–æ—Ä: $(Get-Location)
‚òï Java Backend Structure Analysis
üéØ LOS –¢”©—Å”©–ª - Enhanced Progress Tracker v5.0
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

"@
                Add-Content -Path $BackendLogFile -Value $header -Encoding UTF8
                Write-ColoredText "üìã Backend –ª–æ–≥ —Ñ–∞–π–ª —ç—Ö–ª“Ø“Ø–ª—ç–≥–¥–ª—ç—ç: $BackendLogFile" "Green"
            } catch {
                Write-ColoredText "‚ö†Ô∏è Backend –ª–æ–≥ —Ñ–∞–π–ª “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: $($_.Exception.Message)" "Red"
            }
        }
        
        # Frontend –ª–æ–≥
        if (!$BackendOnly -and $FrontendLogFile) {
            try {
                if (Test-Path $FrontendLogFile) { Remove-Item $FrontendLogFile -Force }
                $header = @"
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üé® FRONTEND –§–ê–ô–õ–´–ù –ë“Æ–¢–≠–¶ - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìÇ –ê–∂–∏–ª–ª–∞–∂ –±—É–π –¥–∏—Ä–µ–∫—Ç–æ—Ä: $(Get-Location)  
‚öõÔ∏è React/TypeScript Frontend Structure Analysis
üéØ LOS –¢”©—Å”©–ª - Enhanced Progress Tracker v5.0
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

"@
                Add-Content -Path $FrontendLogFile -Value $header -Encoding UTF8
                Write-ColoredText "üìã Frontend –ª–æ–≥ —Ñ–∞–π–ª —ç—Ö–ª“Ø“Ø–ª—ç–≥–¥–ª—ç—ç: $FrontendLogFile" "Green"
            } catch {
                Write-ColoredText "‚ö†Ô∏è Frontend –ª–æ–≥ —Ñ–∞–π–ª “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: $($_.Exception.Message)" "Red"
            }
        }
    }
}

# Backend/Frontend –ª–æ–≥ —Ñ–∞–π–ª–¥ –±–∏—á–∏—Ö —Ñ—É–Ω–∫—Ü—É—É–¥
function Write-BackendLog {
    param($Message)
    try {
        if ($BackendLogFile) {
            $cleanMessage = $Message -replace '\x1b\[[0-9;]*m', ''
            Add-Content -Path $BackendLogFile -Value "$cleanMessage" -Encoding UTF8 -ErrorAction SilentlyContinue
        }
    } catch {
        # –õ–æ–≥ –±–∏—á–∏—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–≤–∞–ª “Ø–ª —Ç–æ–æ–º—Å–æ—Ä–ª–æ
    }
}

function Write-FrontendLog {
    param($Message)
    try {
        if ($FrontendLogFile) {
            $cleanMessage = $Message -replace '\x1b\[[0-9;]*m', ''
            Add-Content -Path $FrontendLogFile -Value "$cleanMessage" -Encoding UTF8 -ErrorAction SilentlyContinue
        }
    } catch {
        # –õ–æ–≥ –±–∏—á–∏—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–≤–∞–ª “Ø–ª —Ç–æ–æ–º—Å–æ—Ä–ª–æ
    }
}

# ================================================================
# ANALYSIS AND STATISTICS FUNCTIONS
# ================================================================

# Phase —Ç—É—Ç–º—ã–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö
function Get-PhaseStatistics {
    $phases = @{}
    
    foreach ($phaseKey in $expectedFiles.Keys) {
        $phaseFiles = $expectedFiles[$phaseKey]
        $existingCount = 0
        
        if ($phaseFiles -and $phaseFiles.Count -gt 0) {
            foreach ($file in $phaseFiles) {
                $fileName = Split-Path $file -Leaf
                $foundPath = Find-ProjectFile $fileName $file
                if ($foundPath) {
                    $existingCount++
                }
            }
        }
        
        $phases[$phaseKey] = @{
            Total = if ($phaseFiles) { $phaseFiles.Count } else { 0 }
            Existing = $existingCount
            Percentage = if ($phaseFiles -and $phaseFiles.Count -gt 0) { [math]::Round(($existingCount / $phaseFiles.Count) * 100, 1) } else { 0 }
        }
        
        $global:TotalFilesExpected += $phases[$phaseKey].Total
        $global:TotalFilesFound += $existingCount
    }
    
    return $phases
}

# Migration —Ñ–∞–π–ª—É—É–¥—ã–≥ —à–∞–ª–≥–∞—Ö
function Show-MigrationFiles {
    Write-ColoredText "üóÉÔ∏è DATABASE MIGRATION –§–ê–ô–õ–£–£–î" "Blue"
    Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"
    
    $migrationPaths = @(
        "backend/src/main/resources/db/migration",
        "backend/src/main/resources/db/migrations", 
        "backend/db/migration",
        "src/main/resources/db/migration",
        "database/migrations"
    )
    
    $foundMigrations = @()
    
    foreach ($migrationPath in $migrationPaths) {
        $fullPath = Join-Path $global:ProjectRoot $migrationPath
        if (Test-Path $fullPath) {
            Write-ColoredText "   üìÇ Migration directory –æ–ª–¥–ª–æ–æ: $migrationPath" "Green"
            
            $migrationFiles = Get-ChildItem -Path $fullPath -Filter "V*__*.sql" -ErrorAction SilentlyContinue
            if ($migrationFiles.Count -gt 0) {
                Write-ColoredText "   üìä $($migrationFiles.Count) migration —Ñ–∞–π–ª –æ–ª–¥–ª–æ–æ:" "White"
                
                foreach ($migFile in $migrationFiles) {
                    $fileDetails = Get-FileDetails $migFile.FullName
                    $icon = Get-FileIcon $migFile.Extension $migFile.Name
                    $size = Format-FileSize $fileDetails.Size
                    $lines = if ($fileDetails.LineCount -gt 0) { ", $($fileDetails.LineCount) –º”©—Ä" } else { "" }
                    
                    Write-ColoredText "      $icon $($migFile.Name) ($size$lines)" "White"
                    $foundMigrations += $migFile
                    
                    if ($ValidateContent) {
                        # Migration —Ñ–∞–π–ª—ã–Ω –∞–≥—É—É–ª–≥—ã–≥ —à–∞–ª–≥–∞—Ö
                        try {
                            $content = Get-Content $migFile.FullName -Raw -ErrorAction SilentlyContinue
                            if ($content) {
                                $createTableCount = ([regex]::Matches($content, "CREATE TABLE", [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)).Count
                                $insertCount = ([regex]::Matches($content, "INSERT INTO", [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)).Count
                                $alterCount = ([regex]::Matches($content, "ALTER TABLE", [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)).Count
                                
                                if ($createTableCount -gt 0) {
                                    Write-ColoredText "         üìã CREATE TABLE: $createTableCount" "Gray"
                                }
                                if ($insertCount -gt 0) {
                                    Write-ColoredText "         üìù INSERT INTO: $insertCount" "Gray"
                                }
                                if ($alterCount -gt 0) {
                                    Write-ColoredText "         üîß ALTER TABLE: $alterCount" "Gray"
                                }
                            }
                        } catch {
                            Write-ColoredText "         ‚ö†Ô∏è –ê–≥—É—É–ª–≥–∞ —É–Ω—à–∏—Ö–∞–¥ –∞–ª–¥–∞–∞" "Yellow"
                        }
                    }
                }
            } else {
                Write-ColoredText "   ‚ö†Ô∏è Migration —Ñ–∞–π–ª –±–∞–π—Ö–≥“Ø–π" "Yellow"
            }
            Write-ColoredText ""
            break
        }
    }
    
    if ($foundMigrations.Count -eq 0) {
        Write-ColoredText "   ‚ùå Migration directory –æ–ª–¥—Å–æ–Ω–≥“Ø–π" "Red"
        Write-ColoredText "   üí° Migration “Ø“Ø—Å–≥—ç—Ö: mkdir -p backend/src/main/resources/db/migration" "Yellow"
        Write-ColoredText ""
    }
}

# Docker —Ñ–∞–π–ª—É—É–¥—ã–≥ —à–∞–ª–≥–∞—Ö
function Show-DockerFiles {
    Write-ColoredText "üê≥ DOCKER –§–ê–ô–õ–£–£–î" "Blue"
    Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"
    
    $dockerFiles = @(
        "Dockerfile.backend.dockerfile",
        "Dockerfile.frontend.dockerfile", 
        "docker-compose.yml",
        "docker-compose.prod.yml",
        ".dockerignore"
    )
    
    foreach ($dockerFile in $dockerFiles) {
        $foundPath = Find-ProjectFile $dockerFile
        if ($foundPath) {
            $fileDetails = Get-FileDetails $foundPath
            $icon = Get-FileIcon $fileDetails.Extension $dockerFile
            $size = Format-FileSize $fileDetails.Size
            $lines = if ($fileDetails.LineCount -gt 0) { ", $($fileDetails.LineCount) –º”©—Ä" } else { "" }
            
            Write-ColoredText "   ‚úÖ $icon $dockerFile ($size$lines)" "Green"
            
            if ($ValidateContent) {
                try {
                    $content = Get-Content $foundPath -Raw -ErrorAction SilentlyContinue
                    if ($content) {
                        if ($dockerFile -like "Dockerfile*") {
                            $fromCount = ([regex]::Matches($content, "FROM", [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)).Count
                            $runCount = ([regex]::Matches($content, "RUN", [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)).Count
                            $copyCount = ([regex]::Matches($content, "COPY", [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)).Count
                            
                            Write-ColoredText "      üìã FROM: $fromCount, RUN: $runCount, COPY: $copyCount" "Gray"
                        } elseif ($dockerFile -like "docker-compose*") {
                            $servicesCount = ([regex]::Matches($content, "services:", [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)).Count
                            $volumesCount = ([regex]::Matches($content, "volumes:", [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)).Count
                            $networksCount = ([regex]::Matches($content, "networks:", [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)).Count
                            
                            Write-ColoredText "      üìã Services: $servicesCount, Volumes: $volumesCount, Networks: $networksCount" "Gray"
                        }
                    }
                } catch {
                    Write-ColoredText "      ‚ö†Ô∏è –ê–≥—É—É–ª–≥–∞ —É–Ω—à–∏—Ö–∞–¥ –∞–ª–¥–∞–∞" "Yellow"
                }
            }
        } else {
            Write-ColoredText "   ‚ùå $dockerFile" "Red"
        }
    }
    
    Write-ColoredText ""
}

# CI/CD —Ñ–∞–π–ª—É—É–¥—ã–≥ —à–∞–ª–≥–∞—Ö
function Show-CICDFiles {
    Write-ColoredText "üîÑ CI/CD PIPELINE –§–ê–ô–õ–£–£–î" "Blue"
    Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"
    
    $cicdFiles = @(
        "ci.yml",
        "build.yml",
        "deploy.yml",
        "test.yml"
    )
    
    $foundAny = $false
    
    foreach ($ciFile in $cicdFiles) {
        $foundPath = Find-ProjectFile $ciFile
        if ($foundPath) {
            $fileDetails = Get-FileDetails $foundPath
            $icon = Get-FileIcon $fileDetails.Extension $ciFile
            $size = Format-FileSize $fileDetails.Size
            $lines = if ($fileDetails.LineCount -gt 0) { ", $($fileDetails.LineCount) –º”©—Ä" } else { "" }
            $relativePath = $foundPath.Replace($global:ProjectRoot.Path, "").TrimStart('\', '/')
            
            Write-ColoredText "   ‚úÖ $icon $ciFile ($size$lines)" "Green"
            Write-ColoredText "      üìç –ë–∞–π—Ä—à–∏–ª: $relativePath" "Gray"
            
            if ($ValidateContent) {
                try {
                    $content = Get-Content $foundPath -Raw -ErrorAction SilentlyContinue
                    if ($content) {
                        $jobsCount = ([regex]::Matches($content, "jobs:", [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)).Count
                        $stepsCount = ([regex]::Matches($content, "steps:", [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)).Count
                        $onCount = ([regex]::Matches($content, "on:", [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)).Count
                        
                        Write-ColoredText "      üìã Jobs: $jobsCount, Steps: $stepsCount, Triggers: $onCount" "Gray"
                    }
                } catch {
                    Write-ColoredText "      ‚ö†Ô∏è –ê–≥—É—É–ª–≥–∞ —É–Ω—à–∏—Ö–∞–¥ –∞–ª–¥–∞–∞" "Yellow"
                }
            }
            
            $foundAny = $true
        }
    }
    
    if (!$foundAny) {
        Write-ColoredText "   ‚ùå CI/CD —Ñ–∞–π–ª –±–∞–π—Ö–≥“Ø–π" "Red"
        Write-ColoredText "   üí° GitHub Actions “Ø“Ø—Å–≥—ç—Ö: mkdir -p .github/workflows" "Yellow"
    }
    
    Write-ColoredText ""
}

# Dependency —à–∞–ª–≥–∞–ª—Ç
function Show-DependencyCheck {
    Write-ColoredText "üì¶ DEPENDENCY –®–ê–õ–ì–ê–õ–¢" "Blue"
    Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"
    
    # Backend dependencies (pom.xml)
    $pomPath = Join-Path $global:ProjectRoot "backend/pom.xml"
    if (Test-Path $pomPath) {
        Write-ColoredText "   ‚úÖ Backend pom.xml –æ–ª–¥–ª–æ–æ" "Green"
        
        if ($ValidateContent) {
            try {
                $pomContent = Get-Content $pomPath -Raw
                $dependencyCount = ([regex]::Matches($pomContent, "<dependency>", [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)).Count
                Write-ColoredText "      üìã $dependencyCount dependency –±–∞–π–Ω–∞" "White"
                
                # Key dependencies —à–∞–ª–≥–∞—Ö
                $keyDeps = @{
                    "Spring Boot" = "spring-boot-starter"
                    "Spring Data JPA" = "spring-boot-starter-data-jpa"
                    "Spring Security" = "spring-boot-starter-security"
                    "Spring Web" = "spring-boot-starter-web"
                    "H2 Database" = "h2"
                    "PostgreSQL" = "postgresql"
                    "JWT" = "jjwt"
                }
                
                foreach ($dep in $keyDeps.Keys) {
                    if ($pomContent -match $keyDeps[$dep]) {
                        Write-ColoredText "      ‚úÖ $dep" "Green"
                    } else {
                        Write-ColoredText "      ‚ùå $dep –¥—É—Ç—É—É" "Red"
                    }
                }
            } catch {
                Write-ColoredText "      ‚ö†Ô∏è pom.xml —É–Ω—à–∏—Ö–∞–¥ –∞–ª–¥–∞–∞" "Yellow"
            }
        }
    } else {
        Write-ColoredText "   ‚ùå Backend pom.xml –±–∞–π—Ö–≥“Ø–π" "Red"
    }
    
    # Frontend dependencies (package.json)
    $packagePath = Join-Path $global:ProjectRoot "frontend/package.json"
    if (Test-Path $packagePath) {
        Write-ColoredText "   ‚úÖ Frontend package.json –æ–ª–¥–ª–æ–æ" "Green"
        
        if ($ValidateContent) {
            try {
                $packageContent = Get-Content $packagePath -Raw | ConvertFrom-Json
                $depCount = if ($packageContent.dependencies) { $packageContent.dependencies.PSObject.Properties.Count } else { 0 }
                $devDepCount = if ($packageContent.devDependencies) { $packageContent.devDependencies.PSObject.Properties.Count } else { 0 }
                
                Write-ColoredText "      üìã $depCount dependencies, $devDepCount devDependencies" "White"
                
                # Key frontend dependencies —à–∞–ª–≥–∞—Ö
                $keyFrontendDeps = @(
                    "react",
                    "react-dom", 
                    "typescript",
                    "vite",
                    "@types/react"
                )
                
                foreach ($dep in $keyFrontendDeps) {
                    if ($packageContent.dependencies.$dep -or $packageContent.devDependencies.$dep) {
                        Write-ColoredText "      ‚úÖ $dep" "Green"
                    } else {
                        Write-ColoredText "      ‚ùå $dep –¥—É—Ç—É—É" "Red"
                    }
                }
            } catch {
                Write-ColoredText "      ‚ö†Ô∏è package.json —É–Ω—à–∏—Ö–∞–¥ –∞–ª–¥–∞–∞" "Yellow"
            }
        }
    } else {
        Write-ColoredText "   ‚ùå Frontend package.json –±–∞–π—Ö–≥“Ø–π" "Red"
    }
    
    Write-ColoredText ""
}

# ================================================================
# ENHANCED DISPLAY FUNCTIONS
# ================================================================

# –î—É—Ç—É—É —Ñ–∞–π–ª—É—É–¥—ã–≥ –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —Ö–∞—Ä—É—É–ª–∞—Ö
function Show-MissingFiles {
    param($PhaseStats, [bool]$ShowAll = $false)
    
    Write-ColoredText "üìã –î–£–¢–£–£ –§–ê–ô–õ–£–£–î–´–ù –î–≠–õ–ì–≠–†–≠–ù–ì“Æ–ô –ñ–ê–ì–°–ê–ê–õ–¢" "Red"
    Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Red"
    
    $totalMissing = 0
    $global:MissingFiles = @()
    
    $phaseNames = @{
        "Phase1_Infrastructure" = "Phase 1.1: Infrastructure & DevOps"
        "Phase1_DomainModel" = "Phase 1.2: Domain Model & Database"
        "Phase1_DataAccess" = "Phase 1.3: Data Access Layer"
        "Phase2_Services" = "Phase 2.1: Business Logic Services"
        "Phase2_Controllers" = "Phase 2.2: REST API Controllers"
        "Phase2_DTOs" = "Phase 2.3: Data Transfer Objects"
        "Phase3_FrontendSetup" = "Phase 3.1: Frontend Foundation"
        "Phase3_Components" = "Phase 3.2: React Components"
        "Phase3_Pages" = "Phase 3.3: Application Pages"
        "Phase3_Services" = "Phase 3.4: Frontend Services"
        "Phase4_Testing" = "Phase 4.1: Testing Framework"
        "Phase4_DevOps" = "Phase 4.2: DevOps & Documentation"
    }
    
    foreach ($phaseKey in $expectedFiles.Keys) {
        $missingInPhase = @()
        $stats = $PhaseStats[$phaseKey]
        
        if ($expectedFiles[$phaseKey] -and $stats.Existing -lt $stats.Total) {
            foreach ($file in $expectedFiles[$phaseKey]) {
                $fileName = Split-Path $file -Leaf
                $foundPath = Find-ProjectFile $fileName $file
                if (!$foundPath) {
                    $missingInPhase += $file
                    $global:MissingFiles += @{
                        File = $file
                        Phase = $phaseKey
                        PhaseName = if ($phaseNames.ContainsKey($phaseKey)) { $phaseNames[$phaseKey] } else { $phaseKey }
                        ExpectedPath = $file
                        FileName = $fileName
                    }
                    $totalMissing++
                }
            }
        }
        
        if ($missingInPhase.Count -gt 0) {
            $phaseDisplayName = if ($phaseNames.ContainsKey($phaseKey)) { $phaseNames[$phaseKey] } else { $phaseKey }
            Write-ColoredText "   üìÇ $phaseDisplayName" "Yellow"
            Write-ColoredText "      ‚ùå –î—É—Ç—É—É —Ñ–∞–π–ª—É—É–¥: $($missingInPhase.Count)" "Red"
            
            if ($ShowAll -or $ShowFileDetails) {
                foreach ($file in $missingInPhase) {
                    $fileName = Split-Path $file -Leaf
                    $icon = Get-FileIcon ([System.IO.Path]::GetExtension($file)) $fileName
                    $color = Get-FileColor ([System.IO.Path]::GetExtension($file))
                    
                    if ($ShowFilePaths) {
                        Write-ColoredText "         $icon $fileName" $color
                        Write-ColoredText "            üìç –¢”©–ª”©–≤–ª”©–≥–¥—Å”©–Ω –±–∞–π—Ä—à–∏–ª: $file" "Gray"
                    } else {
                        Write-ColoredText "         $icon $fileName" $color
                    }
                }
            } else {
                $displayFiles = $missingInPhase | Select-Object -First 3
                foreach ($file in $displayFiles) {
                    $fileName = Split-Path $file -Leaf
                    $icon = Get-FileIcon ([System.IO.Path]::GetExtension($file)) $fileName
                    $color = Get-FileColor ([System.IO.Path]::GetExtension($file))
                    Write-ColoredText "         $icon $fileName" $color
                }
                
                if ($missingInPhase.Count -gt 3) {
                    Write-ColoredText "         ... –±–æ–ª–æ–Ω $($missingInPhase.Count - 3) —Ñ–∞–π–ª –¥—É—Ç—É—É" "Gray"
                }
            }
            Write-ColoredText ""
        }
    }
    
    if ($totalMissing -eq 0) {
        Write-ColoredText "   üéâ –ë“Ø—Ö —Ñ–∞–π–ª –±—ç–ª—ç–Ω –±–∞–π–Ω–∞!" "Green"
    } else {
        Write-ColoredText "   üìä –ù–∏–π—Ç –¥—É—Ç—É—É —Ñ–∞–π–ª: $totalMissing" "Red"
        if (!$ShowAll) {
            Write-ColoredText "   üí° –ë“Ø—Ö –¥—É—Ç—É—É —Ñ–∞–π–ª—ã–≥ —Ö–∞—Ä–∞—Ö: .\progress-tracker.ps1 -ShowAllFiles -ShowMissingOnly" "Yellow"
        }
    }
    
    Write-ColoredText ""
}

# –û–¥–æ–æ –±–∞–π–≥–∞–∞ —Ñ–∞–π–ª—É—É–¥—ã–≥ –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —Ö–∞—Ä—É—É–ª–∞—Ö
function Show-ExistingFiles {
    param($PhaseStats, [bool]$ShowAll = $false)
    
    Write-ColoredText "‚úÖ –û–î–û–û –ë–ê–ô–ì–ê–ê –§–ê–ô–õ–£–£–î–´–ù –î–≠–õ–ì–≠–†–≠–ù–ì“Æ–ô –ñ–ê–ì–°–ê–ê–õ–¢" "Green"
    Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Green"
    
    $totalExisting = 0
    $global:ExistingFiles = @()
    
    $phaseNames = @{
        "Phase1_Infrastructure" = "Phase 1.1: Infrastructure & DevOps"
        "Phase1_DomainModel" = "Phase 1.2: Domain Model & Database"
        "Phase1_DataAccess" = "Phase 1.3: Data Access Layer"
        "Phase2_Services" = "Phase 2.1: Business Logic Services"
        "Phase2_Controllers" = "Phase 2.2: REST API Controllers"
        "Phase2_DTOs" = "Phase 2.3: Data Transfer Objects"
        "Phase3_FrontendSetup" = "Phase 3.1: Frontend Foundation"
        "Phase3_Components" = "Phase 3.2: React Components"
        "Phase3_Pages" = "Phase 3.3: Application Pages"
        "Phase3_Services" = "Phase 3.4: Frontend Services"
        "Phase4_Testing" = "Phase 4.1: Testing Framework"
        "Phase4_DevOps" = "Phase 4.2: DevOps & Documentation"
    }
    
    foreach ($phaseKey in $expectedFiles.Keys) {
        $existingInPhase = @()
        $stats = $PhaseStats[$phaseKey]
        
        if ($expectedFiles[$phaseKey] -and $stats.Existing -gt 0) {
            foreach ($file in $expectedFiles[$phaseKey]) {
                $fileName = Split-Path $file -Leaf
                $foundPath = Find-ProjectFile $fileName $file
                if ($foundPath) {
                    $fileDetails = Get-FileDetails $foundPath
                    $existingInPhase += @{
                        ExpectedPath = $file
                        ActualPath = $foundPath
                        Details = $fileDetails
                        FileName = $fileName
                    }
                    $global:ExistingFiles += @{
                        File = $file
                        Phase = $phaseKey
                        PhaseName = if ($phaseNames.ContainsKey($phaseKey)) { $phaseNames[$phaseKey] } else { $phaseKey }
                        ActualPath = $foundPath
                        Details = $fileDetails
                        FileName = $fileName
                    }
                    $totalExisting++
                }
            }
        }
        
        if ($existingInPhase.Count -gt 0) {
            $phaseDisplayName = if ($phaseNames.ContainsKey($phaseKey)) { $phaseNames[$phaseKey] } else { $phaseKey }
            Write-ColoredText "   üìÇ $phaseDisplayName" "Green"
            Write-ColoredText "      ‚úÖ –ë–∞–π–≥–∞–∞ —Ñ–∞–π–ª—É—É–¥: $($existingInPhase.Count)" "Green"
            
            if ($ShowAll -or $ShowFileDetails) {
                foreach ($fileInfo in $existingInPhase) {
                    $icon = Get-FileIcon $fileInfo.Details.Extension $fileInfo.FileName
                    $color = Get-FileColor $fileInfo.Details.Extension
                    $size = Format-FileSize $fileInfo.Details.Size
                    
                    Write-ColoredText "         $icon $($fileInfo.FileName) ($size)" $color
                    
                    if ($ShowFileDetails) {
                        if ($fileInfo.Details.LineCount -gt 0) {
                            Write-ColoredText "            üìè –ú”©—Ä–∏–π–Ω —Ç–æ–æ: $($fileInfo.Details.LineCount)" "Gray"
                        }
                        Write-ColoredText "            üïê ”®”©—Ä—á–ª”©–≥–¥—Å”©–Ω: $($fileInfo.Details.LastModified.ToString('yyyy-MM-dd HH:mm'))" "Gray"
                    }
                    
                    if ($ShowFilePaths) {
                        $relativePath = $fileInfo.ActualPath.Replace($global:ProjectRoot.Path, "").TrimStart('\', '/')
                        Write-ColoredText "            üìç –ë–∞–π—Ä—à–∏–ª: $relativePath" "Gray"
                    }
                }
            } else {
                $displayFiles = $existingInPhase | Select-Object -First 3
                foreach ($fileInfo in $displayFiles) {
                    $icon = Get-FileIcon $fileInfo.Details.Extension $fileInfo.FileName
                    $color = Get-FileColor $fileInfo.Details.Extension
                    $size = Format-FileSize $fileInfo.Details.Size
                    Write-ColoredText "         $icon $($fileInfo.FileName) ($size)" $color
                }
                
                if ($existingInPhase.Count -gt 3) {
                    Write-ColoredText "         ... –±–æ–ª–æ–Ω $($existingInPhase.Count - 3) —Ñ–∞–π–ª –±–∞–π–Ω–∞" "Gray"
                }
            }
            Write-ColoredText ""
        }
    }
    
    if ($totalExisting -eq 0) {
        Write-ColoredText "   ‚ö†Ô∏è –û–¥–æ–æ–≥–æ–æ—Ä –±–∞–π–≥–∞–∞ —Ñ–∞–π–ª –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞." "Yellow"
    } else {
        Write-ColoredText "   üìä –ù–∏–π—Ç –±–∞–π–≥–∞–∞ —Ñ–∞–π–ª: $totalExisting" "Green"
        if (!$ShowAll) {
            Write-ColoredText "   üí° –ë“Ø—Ö –±–∞–π–≥–∞–∞ —Ñ–∞–π–ª—ã–≥ —Ö–∞—Ä–∞—Ö: .\progress-tracker.ps1 -ShowAllFiles -ShowExistingOnly" "Yellow"
        }
    }
    
    Write-ColoredText ""
}

# Phase —Ç—É—Ç–º—ã–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª
function Show-PhaseProgress {
    param($PhaseStats)
    
    Write-ColoredText "üìä PHASE –¢–£–¢–ú–´–ù –î–≠–õ–ì–≠–†–≠–ù–ì“Æ–ô –ü–†–û–ì–†–ï–°–°" "Green"
    Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Green"
    
    $phaseNames = @{
        "Phase1_Infrastructure" = "Phase 1.1: Infrastructure & DevOps"
        "Phase1_DomainModel" = "Phase 1.2: Domain Model & Database"
        "Phase1_DataAccess" = "Phase 1.3: Data Access Layer"
        "Phase2_Services" = "Phase 2.1: Business Logic Services"
        "Phase2_Controllers" = "Phase 2.2: REST API Controllers"
        "Phase2_DTOs" = "Phase 2.3: Data Transfer Objects"
        "Phase3_FrontendSetup" = "Phase 3.1: Frontend Foundation"
        "Phase3_Components" = "Phase 3.2: React Components"
        "Phase3_Pages" = "Phase 3.3: Application Pages"
        "Phase3_Services" = "Phase 3.4: Frontend Services"
        "Phase4_Testing" = "Phase 4.1: Testing Framework"
        "Phase4_DevOps" = "Phase 4.2: DevOps & Documentation"
    }
    
    foreach ($phaseKey in $expectedFiles.Keys) {
        if ($phaseNames.ContainsKey($phaseKey)) {
            $phaseName = $phaseNames[$phaseKey]
            $stats = $PhaseStats[$phaseKey]
            
            Show-ProgressBar $stats.Existing $stats.Total $phaseName
            
            if ($stats.Percentage -eq 100) {
                Write-ColoredText "   ‚úÖ –ë“Æ–†–≠–ù –î–£–£–°–°–ê–ù" "Green"
            } elseif ($stats.Percentage -ge 80) {
                Write-ColoredText "   üü¢ –ë–ê–ì–ê –ó“Æ–ô–õ –î–£–¢–£–£ ($($stats.Percentage)%)" "Green"
            } elseif ($stats.Percentage -ge 60) {
                Write-ColoredText "   üü° –•–≠–°–≠–ì–ß–õ–≠–ù –î–£–£–°–°–ê–ù ($($stats.Percentage)%)" "Yellow"
            } elseif ($stats.Percentage -ge 40) {
                Write-ColoredText "   üü† –•–ê–ì–ê–° –î–£–£–°–°–ê–ù ($($stats.Percentage)%)" "DarkYellow"
            } elseif ($stats.Percentage -ge 20) {
                Write-ColoredText "   üî¥ –≠–•–≠–õ–°–≠–ù ($($stats.Percentage)%)" "Red"
            } else {
                Write-ColoredText "   ‚ö´ –≠–•–õ–≠–≠–ì“Æ–ô ($($stats.Percentage)%)" "DarkRed"
            }
            
            Write-ColoredText ""
        }
    }
}

# Quick check —Ñ—É–Ω–∫—Ü
function Show-QuickProgress {
    Write-ColoredText "‚ö° –•–£–†–î–ê–ù –ü–†–û–ì–†–ï–°–° –®–ê–õ–ì–ê–õ–¢" "Green"
    Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Green"
    
    # Backend —Å—É—É—Ä—å —Ñ–∞–π–ª—É—É–¥
    $backendCore = @("backend/pom.xml", "backend/src/main/resources/application.yml", "backend/src/main/resources/data.sql", "backend/src/main/resources/schema.sql")
    $backendCoreCount = 0
    
    foreach ($file in $backendCore) {
        if (Test-Path $file) { $backendCoreCount++ }
    }
    
    Write-ColoredText "üèóÔ∏è Backend —Å—É—É—Ä—å —Ñ–∞–π–ª—É—É–¥: $backendCoreCount/4" "White"
    Show-ProgressBar $backendCoreCount 4 "Backend Core"
    
    # Frontend —Å—É—É—Ä—å —Ñ–∞–π–ª—É—É–¥
    $frontendCore = @("frontend/package.json", "frontend/src/App.tsx", "frontend/src/main.tsx")
    $frontendCoreCount = 0
    
    foreach ($file in $frontendCore) {
        if (Test-Path $file) { $frontendCoreCount++ }
    }
    
    Write-ColoredText "üé® Frontend —Å—É—É—Ä—å —Ñ–∞–π–ª—É—É–¥: $frontendCoreCount/3" "White"
    Show-ProgressBar $frontendCoreCount 3 "Frontend Core"
    
    # Docker —Ñ–∞–π–ª—É—É–¥
    $dockerFiles = @("docker-compose.yml", "Dockerfile.backend.dockerfile", "Dockerfile.frontend.dockerfile")
    $dockerCount = 0
    
    foreach ($file in $dockerFiles) {
        $foundPath = Find-ProjectFile $file
        if ($foundPath) { $dockerCount++ }
    }
    
    Write-ColoredText "üê≥ Docker —Ñ–∞–π–ª—É—É–¥: $dockerCount/3" "White"
    Show-ProgressBar $dockerCount 3 "Docker Files"
    
    # Backend/Frontend —Å–µ—Ä–≤–µ—Ä–∏–π–Ω —Å—Ç–∞—Ç—É—Å
    Write-ColoredText "üîß –°–µ—Ä–≤–µ—Ä–∏–π–Ω —Å—Ç–∞—Ç—É—Å:" "Blue"
    $backendStatus = Test-HttpEndpoint "http://localhost:8080/los/actuator/health"
    $frontendStatus = Test-HttpEndpoint "http://localhost:3001"
    
    $backendIcon = if ($backendStatus.Success) { "‚úÖ" } else { "‚ùå" }
    $frontendIcon = if ($frontendStatus.Success) { "‚úÖ" } else { "‚ùå" }
    
    Write-ColoredText "   $backendIcon Backend (8080): $(if($backendStatus.Success){'–ê–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞'}else{'–ê–∂–∏–ª–ª–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞'})" "White"
    Write-ColoredText "   $frontendIcon Frontend (3001): $(if($frontendStatus.Success){'–ê–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞'}else{'–ê–∂–∏–ª–ª–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞'})" "White"
    
    Write-ColoredText ""
}

# –°–∏—Å—Ç–µ–º–∏–π–Ω —Å—Ç–∞—Ç—É—Å —à–∞–ª–≥–∞—Ö
function Show-SystemStatus {
    Write-ColoredText "üîß –°–ò–°–¢–ï–ú–ò–ô–ù –°–¢–ê–¢–£–°" "Blue"
    Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"

    $backendHealth = Test-HttpEndpoint "http://localhost:8080/los/actuator/health" 3
    $frontendHealth = Test-HttpEndpoint "http://localhost:3001" 3

    $backendIcon = if ($backendHealth.Success) { "‚úÖ" } else { "‚ùå" }
    $frontendIcon = if ($frontendHealth.Success) { "‚úÖ" } else { "‚ùå" }

    Write-ColoredText "   $backendIcon Backend (8080): $(if($backendHealth.Success){'–ê–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞'}else{'–ê–∂–∏–ª–ª–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞'})" "White"
    Write-ColoredText "   $frontendIcon Frontend (3001): $(if($frontendHealth.Success){'–ê–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞'}else{'–ê–∂–∏–ª–ª–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞'})" "White"
    Write-ColoredText ""
}

# Performance –º—ç–¥—ç—ç–ª—ç–ª —Ö–∞—Ä—É—É–ª–∞—Ö
function Show-PerformanceInfo {
    $endTime = Get-Date
    $duration = $endTime - $global:StartTime
    
    Write-ColoredText "‚è±Ô∏è –ì“Æ–ô–¶–≠–¢–ì–≠–õ–ò–ô–ù –ú–≠–î–≠–≠–õ–≠–õ" "Blue"
    Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"
    Write-ColoredText "   üìä –®–∞–ª–≥–∞–ª—Ç—ã–Ω —Ö—É–≥–∞—Ü–∞–∞: $($duration.TotalSeconds.ToString('F2')) —Å–µ–∫—É–Ω–¥" "White"
    Write-ColoredText ("   üìÅ –®–∞–ª–≥–∞—Å–∞–Ω —Ñ–∞–π–ª: {0}" -f ($global:TotalFilesExpected ?? 0)) "White"
    Write-ColoredText ("   ‚úÖ –û–ª–¥—Å–æ–Ω —Ñ–∞–π–ª: {0}" -f ($global:TotalFilesFound ?? 0)) "White"
    Write-ColoredText "   üìà –ù–∏–π—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å: $(if ($global:TotalFilesExpected -gt 0) { [math]::Round(($global:TotalFilesFound/$global:TotalFilesExpected)*100,1) } else { 0 })%" "White"
    
    $psVersion = $PSVersionTable.PSVersion.ToString()
    $osVersion = [Environment]::OSVersion.VersionString
    Write-ColoredText "   üñ•Ô∏è PowerShell: $psVersion" "Gray"
    Write-ColoredText "   üíª OS: $osVersion" "Gray"
    
    Write-ColoredText ""
}

# ================================================================
# UTILITY AND HELPER FUNCTIONS
# ================================================================

# API Testing —Ñ—É–Ω–∫—Ü
function Test-BackendAPIs {
    Write-ColoredText "üß™ BACKEND API ENDPOINT –¢–ï–°–¢" "Blue"
    Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"
    
    $endpoints = @(
        @{ Name = "Health Check"; Url = "http://localhost:8080/los/actuator/health"; Expected = 200 },
        @{ Name = "Health Simple"; Url = "http://localhost:8080/los/api/v1/health/simple"; Expected = 200 },
        @{ Name = "Customer API"; Url = "http://localhost:8080/los/api/v1/customers"; Expected = @(200, 401) },
        @{ Name = "Loan API"; Url = "http://localhost:8080/los/api/v1/loan-applications"; Expected = @(200, 401) },
        @{ Name = "Document API"; Url = "http://localhost:8080/los/api/v1/documents"; Expected = @(200, 401) },
        @{ Name = "Auth API"; Url = "http://localhost:8080/los/api/v1/auth/login"; Expected = @(200, 400, 405) },
        @{ Name = "Swagger UI"; Url = "http://localhost:8080/los/swagger-ui.html"; Expected = 200 },
        @{ Name = "H2 Console"; Url = "http://localhost:8080/los/h2-console"; Expected = 200 }
    )
    
    $successCount = 0
    $totalCount = $endpoints.Count
    
    foreach ($endpoint in $endpoints) {
        Write-ColoredText "   üîç Testing $($endpoint.Name)..." "Gray"
        $result = Test-HttpEndpoint $endpoint.Url 5
        
        $expectedCodes = if ($endpoint.Expected -is [array]) { $endpoint.Expected } else { @($endpoint.Expected) }
        
        if ($result.Success -and $result.StatusCode -in $expectedCodes) {
            Write-ColoredText "   ‚úÖ $($endpoint.Name): OK ($($result.StatusCode), $($result.ResponseTime)ms)" "Green"
            $successCount++
        } elseif ($result.Success) {
            Write-ColoredText "   ‚ö†Ô∏è  $($endpoint.Name): Unexpected status ($($result.StatusCode), $($result.ResponseTime)ms)" "Yellow"
        } elseif ($result.StatusCode -in $expectedCodes) {
            Write-ColoredText "   ‚ö†Ô∏è  $($endpoint.Name): Expected error ($($result.StatusCode))" "Yellow"
            $successCount++
        } else {
            Write-ColoredText "   ‚ùå $($endpoint.Name): Failed ($($result.StatusCode)) - $($result.Error)" "Red"
        }
    }
    
    Write-ColoredText ""
    Write-ColoredText "   üìä API —Ç–µ—Å—Ç–∏–π–Ω “Ø—Ä –¥“Ø–Ω: $successCount/$totalCount endpoint –∞–º–∂–∏–ª—Ç—Ç–∞–π" "White"
    Show-ProgressBar $successCount $totalCount "API Test Results"
    Write-ColoredText ""
}

# Git —Å—Ç–∞—Ç—É—Å —à–∞–ª–≥–∞—Ö
function Show-GitStatus {
    Write-ColoredText "üìù GIT –°–¢–ê–¢–£–° –®–ê–õ–ì–ê–õ–¢" "Blue"
    Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"

    if (Test-Path ".git") {
        try {
            $branch = git rev-parse --abbrev-ref HEAD 2>$null
            $commits = git rev-list --count HEAD 2>$null
            $uncommitted = (git status --porcelain 2>$null | Measure-Object).Count
            $lastCommit = git log -1 --pretty=format:"%h %s (%cr)" 2>$null
            $remoteUrl = git config --get remote.origin.url 2>$null
            
            Write-ColoredText "   üåø Branch: $branch" "White"
            Write-ColoredText "   üì¶ –ù–∏–π—Ç commit: $commits" "White"
            Write-ColoredText "   üïê –°“Ø“Ø–ª–∏–π–Ω commit: $lastCommit" "White"
            if ($remoteUrl) {
                Write-ColoredText "   üåê Remote: $remoteUrl" "White"
            }
            
            if ($uncommitted -eq 0) {
                Write-ColoredText "   ‚úÖ Commit —Ö–∏–π–≥–¥—ç—ç–≥“Ø–π ”©”©—Ä—á–ª”©–ª—Ç –±–∞–π—Ö–≥“Ø–π" "Green"
            } else {
                Write-ColoredText "   ‚ö†Ô∏è  Commit —Ö–∏–π–≥–¥—ç—ç–≥“Ø–π ”©”©—Ä—á–ª”©–ª—Ç: $uncommitted —Ñ–∞–π–ª" "Yellow"
                
                # ”®”©—Ä—á–ª”©–≥–¥—Å”©–Ω —Ñ–∞–π–ª—É—É–¥—ã–≥ —Ö–∞—Ä—É—É–ª–∞—Ö
                $gitStatus = git status --porcelain 2>$null
                if ($gitStatus) {
                    Write-ColoredText "   üìã ”®”©—Ä—á–ª”©–≥–¥—Å”©–Ω —Ñ–∞–π–ª—É—É–¥:" "Gray"
                    $gitStatus | Select-Object -First 5 | ForEach-Object {
                        $status = $_.Substring(0,2)
                        $fileName = $_.Substring(3)
                        $statusText = switch ($status.Trim()) {
                            "M" { "Modified" }
                            "A" { "Added" }
                            "D" { "Deleted" }
                            "??" { "Untracked" }
                            default { $status.Trim() }
                        }
                        $icon = Get-FileIcon ([System.IO.Path]::GetExtension($fileName)) $fileName
                        Write-ColoredText "      $statusText`: $icon $fileName" "Gray"
                    }
                    if ($uncommitted -gt 5) {
                        Write-ColoredText "      ... –±–æ–ª–æ–Ω $($uncommitted - 5) —Ñ–∞–π–ª" "Gray"
                    }
                }
                
                Write-ColoredText "   üí° Git commit —Ö–∏–π—Ö: git add . && git commit -m 'Progress update'" "Yellow"
            }
        } catch {
            Write-ColoredText "   ‚ö†Ô∏è  Git command –∞–ª–¥–∞–∞: $($_.Exception.Message)" "Yellow"
        }
    } else {
        Write-ColoredText "   ‚ùå Git repository –±–∏—à" "Red"
        Write-ColoredText "   üí° Git —ç—Ö–ª“Ø“Ø–ª—ç—Ö: git init" "Yellow"
    }

    Write-ColoredText ""
}

# –•”©–≥–∂“Ø“Ø–ª—ç–ª—Ç–∏–π–Ω –∑”©–≤–ª”©–º–∂ ”©–≥”©—Ö —Ñ—É–Ω–∫—Ü
function Show-DevelopmentRecommendations {
    param($PhaseStats, $TotalPercentage)
    
    Write-ColoredText "üéØ –•”®–ì–ñ“Æ“Æ–õ–≠–õ–¢–ò–ô–ù –ó”®–í–õ”®–ú–ñ" "Green"
    Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Green"

    $recommendations = @()

    # –ü—Ä–æ–≥—Ä–µ—Å—Å—Ç “Ø–Ω–¥—ç—Å–ª—ç—Å—ç–Ω –∑”©–≤–ª”©–º–∂
    if ($TotalPercentage -lt 25) {
        $recommendations += "üèóÔ∏è Backend —Å—É—É—Ä—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä —ç—Ö–ª“Ø“Ø–ª—ç—Ö (Entity –∫–ª–∞—Å—Å—É—É–¥, Repository)"
        $recommendations += "üóÑÔ∏è Database schema –±–æ–ª–æ–Ω sample data —Å–∞–π–∂—Ä—É—É–ª–∞—Ö"
        $recommendations += "‚öôÔ∏è Spring Boot application —Ç–æ—Ö–∏—Ä–≥–æ–æ –±“Ø—Ä—ç–Ω —Ö–∏–π—Ö"
        $recommendations += "üê≥ Docker —Ñ–∞–π–ª—É—É–¥ “Ø“Ø—Å–≥—ç—Ö"
    } elseif ($TotalPercentage -lt 50) {
        $recommendations += "‚öôÔ∏è Service –±–æ–ª–æ–Ω Repository –∫–ª–∞—Å—Å—É—É–¥—ã–≥ –±–∏—á–∏—Ö"
        $recommendations += "üåê REST Controller –∫–ª–∞—Å—Å—É—É–¥—ã–≥ “Ø“Ø—Å–≥—ç—Ö"
        $recommendations += "üîí Security (JWT, authentication) —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö"
        $recommendations += "üóÉÔ∏è Database migration —Ñ–∞–π–ª—É—É–¥ –Ω—ç–º—ç—Ö"
    } elseif ($TotalPercentage -lt 75) {
        $recommendations += "üé® Frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É—É–¥—ã–≥ —Ö”©–≥–∂“Ø“Ø–ª—ç—Ö"
        $recommendations += "üîó Backend-Frontend API —Ö–æ–ª–±–æ–ª—Ç —Ö–∏–π—Ö"
        $recommendations += "üì± User interface —Å–∞–π–∂—Ä—É—É–ª–∞—Ö"
        $recommendations += "üîÑ CI/CD pipeline —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö"
    } else {
        $recommendations += "üß™ Unit —Ç–µ—Å—Ç –±–æ–ª–æ–Ω Integration —Ç–µ—Å—Ç –±–∏—á–∏—Ö"
        $recommendations += "üìö Documentation –±–æ–ª–æ–Ω API docs “Ø“Ø—Å–≥—ç—Ö"
        $recommendations += "üöÄ Production deployment –±—ç–ª—Ç–≥—ç—Ö"
    }

    # –°–∏—Å—Ç–µ–º–∏–π–Ω —Å—Ç–∞—Ç—É—Å –∑”©–≤–ª”©–º–∂
    $backendHealth = Test-HttpEndpoint "http://localhost:8080/los/actuator/health" 2
    $frontendHealth = Test-HttpEndpoint "http://localhost:3001" 2
    
    if (!$backendHealth.Success) {
        $recommendations += "üö® Backend server —ç—Ö–ª“Ø“Ø–ª—ç—Ö: cd backend && .\mvnw.cmd spring-boot:run"
    }

    if (!$frontendHealth.Success -and (Count-FilesInDirectory "backend/src" "*.java") -gt 10) {
        $recommendations += "üö® Frontend —ç—Ö–ª“Ø“Ø–ª—ç—Ö: cd frontend && npm install && npm run dev"
    }

    # Docker —Ñ–∞–π–ª —à–∞–ª–≥–∞–ª—Ç
    $dockerCompose = Find-ProjectFile "docker-compose.yml"
    if (!$dockerCompose) {
        $recommendations += "üê≥ Docker Compose —Ñ–∞–π–ª “Ø“Ø—Å–≥—ç—Ö"
    }
    
    # CI/CD —à–∞–ª–≥–∞–ª—Ç
    $ciFile = Find-ProjectFile "ci.yml"
    if (!$ciFile) {
        $recommendations += "üîÑ GitHub Actions CI/CD pipeline “Ø“Ø—Å–≥—ç—Ö"
    }
    
    # Migration —à–∞–ª–≥–∞–ª—Ç
    $migrationFile = Find-ProjectFile "V1__init.sql"
    if (!$migrationFile) {
        $recommendations += "üóÉÔ∏è Database migration —Ñ–∞–π–ª—É—É–¥ “Ø“Ø—Å–≥—ç—Ö"
    }

    # –ó”©–≤–ª”©–º–∂–∏–π–≥ —Ö–∞—Ä—É—É–ª–∞—Ö
    if ($recommendations.Count -eq 0) {
        Write-ColoredText "   üéâ –ë“Ø—Ö –∑“Ø–π–ª —Å–∞–π–Ω –±–∞–π–Ω–∞! –î–∞—Ä–∞–∞–≥–∏–π–Ω feature —Ä—É—É —à–∏–ª–∂–∏–∂ –±–æ–ª–Ω–æ!" "Green"
    } else {
        $displayRecommendations = $recommendations | Select-Object -First 10
        foreach ($rec in $displayRecommendations) {
            Write-ColoredText "   $rec" "Yellow"
        }
        if ($recommendations.Count -gt 10) {
            Write-ColoredText "   ... –±–æ–ª–æ–Ω $($recommendations.Count - 10) –∑”©–≤–ª”©–º–∂" "Gray"
        }
    }

    Write-ColoredText ""
}

# –î—É—Ç—É—É —Ñ–∞–π–ª—É—É–¥ “Ø“Ø—Å–≥—ç—Ö —Ñ—É–Ω–∫—Ü
function Create-MissingFiles {
    param($PhaseStats)
    
    Write-ColoredText "üîß –î–£–¢–£–£ –§–ê–ô–õ–£–£–î “Æ“Æ–°–ì–≠–ñ –ë–ê–ô–ù–ê..." "Yellow"
    Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Yellow"
    
    $createdCount = 0
    
    foreach ($phaseKey in $expectedFiles.Keys) {
        $stats = $PhaseStats[$phaseKey]
        
        if ($expectedFiles[$phaseKey] -and $stats.Existing -lt $stats.Total) {
            foreach ($file in $expectedFiles[$phaseKey]) {
                $fileName = Split-Path $file -Leaf
                $foundPath = Find-ProjectFile $fileName $file
                
                if (!$foundPath) {
                    try {
                        # –î–∏—Ä–µ–∫—Ç–æ—Ä “Ø“Ø—Å–≥—ç—Ö
                        $dir = Split-Path $file -Parent
                        $fullDir = Join-Path $global:ProjectRoot $dir
                        if ($dir -and !(Test-Path $fullDir)) {
                            New-Item -ItemType Directory -Path $fullDir -Force | Out-Null
                        }
                        
                        # –§–∞–π–ª—ã–Ω —Ç”©—Ä–ª”©”©—Ä –∞–≥—É—É–ª–≥–∞ “Ø“Ø—Å–≥—ç—Ö
                        $content = ""
                        $extension = [System.IO.Path]::GetExtension($file)
                        $className = [System.IO.Path]::GetFileNameWithoutExtension($file)
                        
                        switch ($extension) {
                            ".java" {
                                $content = @"
package com.company.los;

/**
 * $className - TODO: Add class description
 */
public class $className {
    // TODO: Implement class logic
}
"@
                            }
                            ".tsx" {
                                $content = @'
import React from 'react';

interface {0}Props {{
  // TODO: Define component props
}}

const {0}: React.FC<{0}Props> = () => {{
  return (
    <div>
      <h1>{0}</h1>
      {{/* TODO: Implement component */}}
    </div>
  );
}};

export default {0};
'@ -f $className
                            }
                            ".ts" {
                                $content = @"
// TODO: Implement TypeScript module
export {};
"@
                            }
                            ".yml" {
                                $content = @"
# TODO: Add YAML configuration
"@
                            }
                            ".yaml" {
                                $content = @"
# TODO: Add YAML configuration
"@
                            }
                            ".sql" {
                                if ($fileName -like "V*__*.sql") {
                                    $content = @"
-- Liquibase/Flyway Migration
-- Changeset: $fileName
-- TODO: Add migration SQL statements

-- Example:
-- CREATE TABLE example_table (
--     id BIGINT PRIMARY KEY AUTO_INCREMENT,
--     name VARCHAR(255) NOT NULL,
--     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
-- );
"@
                                } else {
                                    $content = @"
-- TODO: Add SQL statements
"@
                                }
                            }
                            ".md" {
                                $content = @"
# $className

TODO: Add documentation content
"@
                            }
                            ".json" {
                                $content = @"
{
  "TODO": "Add JSON content"
}
"@
                            }
                            ".html" {
                                $content = @"
<!DOCTYPE html>
<html>
<head>
    <title>$className</title>
</head>
<body>
    <h1>$className</h1>
    <!-- TODO: Add HTML content -->
</body>
</html>
"@
                            }
                            ".css" {
                                $content = @"
/* TODO: Add CSS styles */
.$className {
  /* Add styles here */
}
"@
                            }
                            ".xml" {
                                $content = @"
<?xml version="1.0" encoding="UTF-8"?>
<!-- TODO: Add XML content -->
<root>
</root>
"@
                            }
                            ".dockerfile" {
                                $content = @"
# TODO: Add Dockerfile instructions
FROM openjdk:17-jre-slim

# TODO: Add build steps
COPY . /app
WORKDIR /app

# TODO: Add run command
CMD ["java", "-jar", "app.jar"]
"@
                            }
                            default {
                                $content = "// TODO: Add file content"
                            }
                        }
                        
                        # –§–∞–π–ª “Ø“Ø—Å–≥—ç—Ö
                        $fullFilePath = Join-Path $global:ProjectRoot $file
                        Set-Content -Path $fullFilePath -Value $content -Encoding UTF8
                        $icon = Get-FileIcon $extension $fileName
                        Write-ColoredText "   ‚úÖ $icon “Æ“Ø—Å–≥—ç—Å—ç–Ω: $file" "Green"
                        $createdCount++
                        
                    } catch {
                        Write-ColoredText "   ‚ùå “Æ“Ø—Å–≥—ç—Ö –∞–ª–¥–∞–∞: $file - $($_.Exception.Message)" "Red"
                    }
                }
            }
        }
    }
    
    if ($createdCount -gt 0) {
        Write-ColoredText ""
        Write-ColoredText "üéâ $createdCount —Ñ–∞–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç!" "Green"
    } else {
        Write-ColoredText "‚ÑπÔ∏è “Æ“Ø—Å–≥—ç—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π —Ñ–∞–π–ª –±–∞–π—Ö–≥“Ø–π." "Blue"
    }
    
    Write-ColoredText ""
}

# Export —Ñ—É–Ω–∫—Ü—É—É–¥
function Export-ProgressReport {
    param($Format, $PhaseStats, $TotalPercentage)
    
    switch ($Format.ToLower()) {
        "json" {
            $report = @{
                Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                Version = "5.0"
                TotalProgress = $TotalPercentage
                TotalFiles = @{
                    Expected = $global:TotalFilesExpected
                    Found = $global:TotalFilesFound
                }
                PhaseProgress = $PhaseStats
                SystemStatus = @{
                    Backend = (Test-HttpEndpoint "http://localhost:8080/los/actuator/health" 2).Success
                    Frontend = (Test-HttpEndpoint "http://localhost:3001" 2).Success
                }
                ExistingFiles = $global:ExistingFiles
                MissingFiles = $global:MissingFiles
            }
            
            $jsonFile = "los-progress-report-v5.json"
            $report | ConvertTo-Json -Depth 10 | Out-File -FilePath $jsonFile -Encoding UTF8
            Write-ColoredText "üìã JSON report exported: $jsonFile" "Green"
        }
        
        "csv" {
            $csvData = @()
            foreach ($phaseKey in $expectedFiles.Keys) {
                $stats = $PhaseStats[$phaseKey]
                $csvData += [PSCustomObject]@{
                    Phase = $phaseKey
                    TotalFiles = $stats.Total
                    ExistingFiles = $stats.Existing
                    Percentage = $stats.Percentage
                    Status = if ($stats.Percentage -eq 100) { "Complete" } elseif ($stats.Percentage -ge 50) { "In Progress" } else { "Not Started" }
                }
            }
            
            $csvFile = "los-progress-report-v5.csv"
            $csvData | Export-Csv -Path $csvFile -NoTypeInformation -Encoding UTF8
            Write-ColoredText "üìã CSV report exported: $csvFile" "Green"
        }
        
        "html" {
            $htmlFile = "los-progress-report-v5.html"
            $html = @"
<!DOCTYPE html>
<html>
<head>
    <title>LOS Progress Report v5.0</title>
    <meta charset="UTF-8">
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 20px; background-color: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { text-align: center; margin-bottom: 30px; }
        .progress-bar { width: 100%; height: 25px; background-color: #e0e0e0; border-radius: 12px; overflow: hidden; margin: 10px 0; }
        .progress-fill { height: 100%; background: linear-gradient(90deg, #4CAF50, #45a049); transition: width 0.3s ease; }
        table { border-collapse: collapse; width: 100%; margin: 20px 0; }
        th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
        th { background-color: #f8f9fa; font-weight: 600; }
        .complete { color: #28a745; font-weight: bold; }
        .in-progress { color: #ffc107; font-weight: bold; }
        .not-started { color: #dc3545; font-weight: bold; }
        .stats { display: flex; justify-content: space-around; margin: 20px 0; }
        .stat-card { background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: center; }
        .stat-number { font-size: 2em; font-weight: bold; color: #007bff; }
        .phase-section { margin: 20px 0; }
        .emoji { font-size: 1.2em; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üè¶ LOS Progress Report v5.0</h1>
            <p>Generated: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")</p>
        </div>
        
        <div class="stats">
            <div class="stat-card">
                <div class="stat-number">$TotalPercentage%</div>
                <div>Overall Progress</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">$global:TotalFilesFound</div>
                <div>Files Found</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">$global:TotalFilesExpected</div>
                <div>Total Expected</div>
            </div>
        </div>
        
        <div class="phase-section">
            <h2>üìä Overall Progress</h2>
            <div class="progress-bar">
                <div class="progress-fill" style="width: $TotalPercentage%;"></div>
            </div>
        </div>
        
        <h2>üìã Phase Details</h2>
        <table>
            <tr><th>Phase</th><th>Files</th><th>Progress</th><th>Status</th><th>Percentage</th></tr>
"@
            
            foreach ($phaseKey in $expectedFiles.Keys) {
                $stats = $PhaseStats[$phaseKey]
                $statusClass = if ($stats.Percentage -eq 100) { "complete" } elseif ($stats.Percentage -ge 50) { "in-progress" } else { "not-started" }
                $status = if ($stats.Percentage -eq 100) { "‚úÖ Complete" } elseif ($stats.Percentage -ge 50) { "üü° In Progress" } else { "‚ö´ Not Started" }
                
                $html += @"
        <tr>
            <td>$phaseKey</td>
            <td>$($stats.Existing)/$($stats.Total)</td>
            <td><div class="progress-bar"><div class="progress-fill" style="width: $($stats.Percentage)%;"></div></div></td>
            <td class="$statusClass">$status</td>
            <td>$($stats.Percentage)%</td>
        </tr>
"@
            }
            
            $html += @"
        </table>
        
        <div class="phase-section">
            <h2>üîß System Information</h2>
            <p><strong>PowerShell Version:</strong> $($PSVersionTable.PSVersion)</p>
            <p><strong>OS Version:</strong> $([Environment]::OSVersion.VersionString)</p>
            <p><strong>Project Root:</strong> $($global:ProjectRoot)</p>
        </div>
    </div>
</body>
</html>
"@
            
            $html | Out-File -FilePath $htmlFile -Encoding UTF8
            Write-ColoredText "üìã HTML report exported: $htmlFile" "Green"
        }
    }
}

# ================================================================
# MAIN SCRIPT EXECUTION
# ================================================================

Clear-Host

# CreateMissing –≥–æ—Ä–∏–º
if ($CreateMissing) {
    $phaseStats = Get-PhaseStatistics
    Create-MissingFiles $phaseStats
    Write-ColoredText "üîÑ –î–∞—Ö–∏–Ω —à–∞–ª–≥–∞—Ö—ã–Ω —Ç—É–ª–¥: .\progress-tracker.ps1" "Gray"
    return
}

# Week —Ç—É—Å–≥–∞–π–ª—Å–∞–Ω –≥–æ—Ä–∏–º
if ($Week -gt 0) {
    $weekPhases = switch ($Week) {
        1 { @("Phase1_Infrastructure", "Phase1_DomainModel", "Phase1_DataAccess") }
        2 { @("Phase2_Services", "Phase2_Controllers", "Phase2_DTOs") }
        3 { @("Phase3_FrontendSetup", "Phase3_Components", "Phase3_Pages", "Phase3_Services") }
        4 { @("Phase4_Testing", "Phase4_DevOps") }
        default { $null }
    }
    
    if ($weekPhases) {
        Write-ColoredText "üìÖ $Week-–† –î–û–õ–û–û –•–û–ù–û–ì–ò–ô–ù –®–ê–õ–ì–ê–õ–¢" "Blue"
        Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"
        
        $phaseStats = Get-PhaseStatistics
        $weekTotal = 0
        $weekFound = 0
        
        foreach ($phaseKey in $weekPhases) {
            if ($expectedFiles.ContainsKey($phaseKey)) {
                $stats = $phaseStats[$phaseKey]
                $weekTotal += $stats.Total
                $weekFound += $stats.Existing
                
                $phaseName = $phaseKey -replace "Phase\d+_", ""
                Show-ProgressBar $stats.Existing $stats.Total "$Week-—Ä –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥ - $phaseName"
            }
        }
        
        $weekPercentage = if ($weekTotal -gt 0) { [math]::Round(($weekFound / $weekTotal) * 100, 1) } else { 0 }
        
        Write-ColoredText ""
        Write-ColoredText "üìä $Week-—Ä –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥–∏–π–Ω –Ω–∏–π—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å:" "White"
        Show-ProgressBar $weekFound $weekTotal "$Week-—Ä –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥ - –ù–∏–π—Ç"
        Write-ColoredText "   üìà –ì“Ø–π—Ü—ç—Ç–≥—ç–ª: $weekPercentage%" "White"
        
        Write-ColoredText ""
        Write-ColoredText "üîÑ –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —à–∞–ª–≥–∞—Ö—ã–Ω —Ç—É–ª–¥: .\progress-tracker.ps1" "Gray"
        return
    } else {
        Write-ColoredText "‚ùå $Week-—Ä –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥ –æ–ª–¥—Å–æ–Ω–≥“Ø–π. 1-4 —Ö“Ø—Ä—Ç—ç–ª—Ö —Ç–æ–æ –∞—à–∏–≥–ª–∞–Ω–∞ —É—É." "Red"
        return
    }
}

# Phase —Ç—É—Å–≥–∞–π–ª—Å–∞–Ω –≥–æ—Ä–∏–º
if ($Phase -gt 0) {
    $phaseKey = switch ($Phase) {
        1 { @("Phase1_Infrastructure", "Phase1_DomainModel", "Phase1_DataAccess") }
        2 { @("Phase2_Services", "Phase2_Controllers", "Phase2_DTOs") }
        3 { @("Phase3_FrontendSetup", "Phase3_Components", "Phase3_Pages", "Phase3_Services") }
        4 { @("Phase4_Testing", "Phase4_DevOps") }
        default { $null }
    }
    
    if ($phaseKey) {
        Write-ColoredText "üéØ PHASE $Phase –®–ê–õ–ì–ê–õ–¢" "Blue"
        Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"
        
        $phaseStats = Get-PhaseStatistics
        
        foreach ($key in $phaseKey) {
            if ($expectedFiles.ContainsKey($key)) {
                $stats = $phaseStats[$key]
                $phaseName = $key -replace "Phase\d+_", ""
                
                Show-ProgressBar $stats.Existing $stats.Total "Phase $Phase - $phaseName"
                
                if ($stats.Percentage -eq 100) {
                    Write-ColoredText "   ‚úÖ –ë“Æ–†–≠–ù –î–£–£–°–°–ê–ù" "Green"
                } elseif ($stats.Percentage -ge 50) {
                    Write-ColoredText "   üü° –•–≠–°–≠–ì–ß–õ–≠–ù –î–£–£–°–°–ê–ù ($($stats.Percentage)%)" "Yellow"
                } else {
                    Write-ColoredText "   üî¥ –≠–•–õ–≠–≠–ì“Æ–ô —ç—Å–≤—ç–ª –¶”®”®–ù ($($stats.Percentage)%)" "Red"
                }
                Write-ColoredText ""
            }
        }
        
        Write-ColoredText "üîÑ –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —à–∞–ª–≥–∞—Ö—ã–Ω —Ç—É–ª–¥: .\progress-tracker.ps1" "Gray"
        return
    } else {
        Write-ColoredText "‚ùå Phase $Phase –æ–ª–¥—Å–æ–Ω–≥“Ø–π. 1-4 —Ö“Ø—Ä—Ç—ç–ª—Ö —Ç–æ–æ –∞—à–∏–≥–ª–∞–Ω–∞ —É—É." "Red"
        return
    }
}

# –°—Ç—Ä—É–∫—Ç—É—Ä—ã–Ω –ª–æ–≥ —Ñ–∞–π–ª—É—É–¥ —ç—Ö–ª“Ø“Ø–ª—ç—Ö
if ($ShowStructure) {
    Initialize-StructureLogs
}

Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Cyan"
Write-ColoredText "üè¶ LOS –¢”®–°–õ–ò–ô–ù –î–≠–õ–ì–≠–†–≠–ù–ì“Æ–ô –ü–†–û–ì–†–ï–°–° –®–ê–õ–ì–ê–ì–ß v5.0" "Yellow"
Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Cyan"
Write-ColoredText "üìÖ –û–≥–Ω–æ–æ: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" "White"
Write-ColoredText "üìÇ –ê–∂–∏–ª–ª–∞–∂ –±—É–π –¥–∏—Ä–µ–∫—Ç–æ—Ä: $(Get-Location)" "White"
Write-ColoredText "üîß Enhanced LOS Progress Tracker - –ë“Ø—Ä—ç–Ω –Ω—ç–≥—Ç–≥—ç—Å—ç–Ω —Ö—É–≤–∏–ª–±–∞—Ä" "White"
Write-ColoredText "‚ö° Docker, CI/CD, Migration —Ñ–∞–π–ª—É—É–¥—ã–Ω –¥—ç–º–∂–ª—ç–≥—Ç—ç–π" "White"
Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Cyan"
Write-ColoredText ""

# –ó”©–≤—Ö”©–Ω –¥—É—Ç—É—É —Ñ–∞–π–ª—É—É–¥ —Ö–∞—Ä—É—É–ª–∞—Ö
if ($ShowMissingOnly) {
    $phaseStats = Get-PhaseStatistics
    Show-MissingFiles $phaseStats $true
    Show-PerformanceInfo
    return
}

# –ó”©–≤—Ö”©–Ω –±–∞–π–≥–∞–∞ —Ñ–∞–π–ª—É—É–¥ —Ö–∞—Ä—É—É–ª–∞—Ö
if ($ShowExistingOnly) {
    $phaseStats = Get-PhaseStatistics
    Show-ExistingFiles $phaseStats $true
    Show-PerformanceInfo
    return
}

# Migration —Ñ–∞–π–ª—É—É–¥ —Ö–∞—Ä—É—É–ª–∞—Ö
if ($ShowMigrations) {
    Show-MigrationFiles
    Show-DockerFiles
    Show-CICDFiles
    Show-PerformanceInfo
    return
}

# Quick check –≥–æ—Ä–∏–º
if ($QuickCheck) {
    Show-QuickProgress
    Show-PerformanceInfo
    Write-ColoredText "`nüîÑ –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π: .\progress-tracker.ps1" "Gray"
    return
}

# Phase —Ç—É—Ç–º—ã–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö
$phaseStats = Get-PhaseStatistics

# –ù–∏–π—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
$totalPercentage = if ($global:TotalFilesExpected -gt 0) { 
    [math]::Round(($global:TotalFilesFound / $global:TotalFilesExpected) * 100, 1) 
} else { 0 }

# Phase –ø—Ä–æ–≥—Ä–µ—Å—Å —Ö–∞—Ä—É—É–ª–∞—Ö
Show-PhaseProgress $phaseStats

Write-ColoredText "üìà –ù–ò–ô–¢ –¢”®–°–õ–ò–ô–ù –ü–†–û–ì–†–ï–°–°" "Blue"
Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"
Show-ProgressBar $global:TotalFilesFound $global:TotalFilesExpected "–ù–∏–π—Ç —Ñ–∞–π–ª—É—É–¥"
Write-ColoredText "   üìÅ –ë–∞–π–≥–∞–∞ —Ñ–∞–π–ª—É—É–¥: $global:TotalFilesFound / $global:TotalFilesExpected" "White"
Write-ColoredText "   üìä –ì“Ø–π—Ü—ç—Ç–≥—ç–ª: $totalPercentage%" "White"
Write-ColoredText ""

# –§–∞–π–ª—É—É–¥—ã–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª
if ($ShowAllFiles) {
    Show-ExistingFiles $phaseStats $true
    Show-MissingFiles $phaseStats $true
} else {
    Show-ExistingFiles $phaseStats $false
    Show-MissingFiles $phaseStats $false
}

# Docker —Ñ–∞–π–ª—É—É–¥ —à–∞–ª–≥–∞—Ö
Show-DockerFiles

# Migration —Ñ–∞–π–ª—É—É–¥ —à–∞–ª–≥–∞—Ö 
Show-MigrationFiles

# CI/CD —Ñ–∞–π–ª—É—É–¥ —à–∞–ª–≥–∞—Ö
Show-CICDFiles

# Dependency —à–∞–ª–≥–∞–ª—Ç
if ($CheckDependencies) {
    Show-DependencyCheck
}

# –°–∏—Å—Ç–µ–º–∏–π–Ω —Å—Ç–∞—Ç—É—Å
Show-SystemStatus

# Git —Å—Ç–∞—Ç—É—Å
Show-GitStatus

# API Testing (TestMode-–¥)
if ($TestMode) {
    $backendHealth = Test-HttpEndpoint "http://localhost:8080/los/actuator/health" 3
    if ($backendHealth.Success) {
        Test-BackendAPIs
    } else {
        Write-ColoredText "‚ö†Ô∏è Backend –∞–∂–∏–ª–ª–∞—Ö–≥“Ø–π –±–∞–π–≥–∞–∞ —Ç—É–ª API —Ç–µ—Å—Ç —Ö–∏–π—Ö –±–æ–ª–æ–º–∂–≥“Ø–π" "Yellow"
        Write-ColoredText ""
    }
}

# –•”©–≥–∂“Ø“Ø–ª—ç–ª—Ç–∏–π–Ω –∑”©–≤–ª”©–º–∂
Show-DevelopmentRecommendations $phaseStats $totalPercentage

# Export —Ö–∏–π—Ö (—Ö—ç—Ä—ç–≤ parameter ”©–≥—Å”©–Ω –±–æ–ª)
if ($ExportFormat -ne "console") {
    Export-ProgressReport $ExportFormat $phaseStats $totalPercentage
}

# Performance –º—ç–¥—ç—ç–ª—ç–ª
Show-PerformanceInfo

# ================================================================
# FINAL OUTPUT AND INSTRUCTIONS
# ================================================================

# –ù—ç–≤—Ç—Ä—ç—Ö –∑–∞–∞–≤–∞—Ä
Write-ColoredText "üîë –°–ò–°–¢–ï–ú–î –ù–≠–í–¢–†–≠–• –ó–ê–ê–í–ê–†" "Green"
Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Green"
Write-ColoredText "   üë§ –ê–¥–º–∏–Ω —ç—Ä—Ö:           admin / admin123" "White"
Write-ColoredText "   üë§ –ó—ç—ç–ª–∏–π–Ω –∞–∂–∏–ª—Ç–∞–Ω:     loan_officer / loan123" "White"
Write-ColoredText "   üë§ –ú–µ–Ω–µ–∂–µ—Ä:             manager / manager123" "White"
Write-ColoredText "   üåê Backend URL:         http://localhost:8080/los" "White"
Write-ColoredText "   üåê Frontend URL:        http://localhost:3001" "White"
Write-ColoredText "   üåê API Docs:            http://localhost:8080/los/swagger-ui.html" "White"
Write-ColoredText "   üóÑÔ∏è H2 Console:          http://localhost:8080/los/h2-console" "White"
Write-ColoredText "   üìã H2 JDBC URL:         jdbc:h2:mem:testdb" "White"
Write-ColoredText "   üìã H2 Username:         sa" "White"
Write-ColoredText "   üìã H2 Password:         (—Ö–æ–æ—Å–æ–Ω)" "White"
Write-ColoredText ""

# –•—ç—Ä—ç–≥—Ç—ç–π –∫–æ–º–∞–Ω–¥—É—É–¥
Write-ColoredText "üõ†Ô∏è –•–≠–†–≠–ì–¢–≠–ô –ö–û–ú–ê–ù–î–£–£–î" "Blue"
Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"
Write-ColoredText "   Backend —ç—Ö–ª“Ø“Ø–ª—ç—Ö:       cd backend && .\mvnw.cmd spring-boot:run" "White"
Write-ColoredText "   Frontend —ç—Ö–ª“Ø“Ø–ª—ç—Ö:      cd frontend && npm install && npm run dev" "White"
Write-ColoredText "   Backend —Ç–µ—Å—Ç:           cd backend && .\mvnw.cmd test" "White"
Write-ColoredText "   Frontend —Ç–µ—Å—Ç:          cd frontend && npm test" "White"
Write-ColoredText "   Docker build:           docker-compose up -d" "White"
Write-ColoredText "   Docker production:      docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d" "White"
Write-ColoredText "   Git commit:             git add . && git commit -m 'Progress update'" "White"
Write-ColoredText ""

# –¢”©–≥—Å–≥”©–ª
Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Cyan"
Write-ColoredText "üîÑ –®–ê–õ–ì–ê–õ–¢–´–ù –ö–û–ú–ê–ù–î–£–£–î:" "Blue"
Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"
Write-ColoredText "üöÄ –î–∞—Ö–∏–Ω —à–∞–ª–≥–∞—Ö:               .\progress-tracker.ps1" "Gray"
Write-ColoredText "üìñ –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —Ö–∞—Ä–∞—Ö:          .\progress-tracker.ps1 -Detailed" "Gray"
Write-ColoredText "üå≥ –§–∞–π–ª—ã–Ω —Å—Ç—Ä—É–∫—Ç—É—Ä:            .\progress-tracker.ps1 -ShowStructure" "Yellow"
Write-ColoredText "‚ö° –•—É—Ä–¥–∞–Ω —à–∞–ª–≥–∞–ª—Ç:             .\progress-tracker.ps1 -QuickCheck" "Green"
Write-ColoredText "üß™ API —Ç–µ—Å—Ç —Ö–∏–π—Ö:              .\progress-tracker.ps1 -TestMode" "Cyan"
Write-ColoredText "üîß –î—É—Ç—É—É —Ñ–∞–π–ª “Ø“Ø—Å–≥—ç—Ö:          .\progress-tracker.ps1 -CreateMissing" "Magenta"
Write-ColoredText "üóÉÔ∏è Migration —à–∞–ª–≥–∞—Ö:           .\progress-tracker.ps1 -ShowMigrations" "Blue"
Write-ColoredText "üì¶ Dependency —à–∞–ª–≥–∞—Ö:          .\progress-tracker.ps1 -CheckDependencies" "Blue"
Write-ColoredText "‚úÖ –ê–≥—É—É–ª–≥–∞ —à–∞–ª–≥–∞—Ö:             .\progress-tracker.ps1 -ValidateContent" "Blue"
Write-ColoredText ""
Write-ColoredText "üìã –§–ê–ô–õ–´–ù –î–≠–õ–ì–≠–†–≠–ù–ì“Æ–ô –ú–≠–î–≠–≠–õ–≠–õ:" "Blue"
Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"
Write-ColoredText "‚úÖ –ó”©–≤—Ö”©–Ω –±–∞–π–≥–∞–∞ —Ñ–∞–π–ª—É—É–¥:         .\progress-tracker.ps1 -ShowExistingOnly" "Green"
Write-ColoredText "‚ùå –ó”©–≤—Ö”©–Ω –¥—É—Ç—É—É —Ñ–∞–π–ª—É—É–¥:          .\progress-tracker.ps1 -ShowMissingOnly" "Red"
Write-ColoredText "üìã –ë“Ø—Ö —Ñ–∞–π–ª—ã–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π:        .\progress-tracker.ps1 -ShowAllFiles" "Yellow"
Write-ColoredText "üìç –§–∞–π–ª—ã–Ω –±–∞–π—Ä—à–∏–ª —Ö–∞—Ä—É—É–ª–∞—Ö:      .\progress-tracker.ps1 -ShowFilePaths" "White"
Write-ColoredText "üìù –§–∞–π–ª—ã–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª:  .\progress-tracker.ps1 -ShowFileDetails" "White"
Write-ColoredText "üîç –ë“Ø—Ö –º—ç–¥—ç—ç–ª—ç–ª –Ω—ç–≥—ç–Ω –∑—ç—Ä—ç–≥:     .\progress-tracker.ps1 -ShowAllFiles -ShowFileDetails -ShowFilePaths" "Cyan"
Write-ColoredText "üõ†Ô∏è –î–µ–±–∞–≥ –º—ç–¥—ç—ç–ª—ç–ª:               .\progress-tracker.ps1 -DebugMode" "Gray"
Write-ColoredText ""
Write-ColoredText "üéØ PHASE –¢–£–¢–ú–´–ù –®–ê–õ–ì–ê–õ–¢:" "Blue"
Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"
Write-ColoredText "üìù Phase 1 —à–∞–ª–≥–∞—Ö:             .\progress-tracker.ps1 -Phase 1" "Gray"
Write-ColoredText "üìù Phase 2 —à–∞–ª–≥–∞—Ö:             .\progress-tracker.ps1 -Phase 2" "Gray"
Write-ColoredText "üìù Phase 3 —à–∞–ª–≥–∞—Ö:             .\progress-tracker.ps1 -Phase 3" "Gray"
Write-ColoredText "üìù Phase 4 —à–∞–ª–≥–∞—Ö:             .\progress-tracker.ps1 -Phase 4" "Gray"
Write-ColoredText ""
Write-ColoredText "üìÖ –î–û–õ–û–û –•–û–ù–û–ì –¢–£–¢–ú–´–ù –®–ê–õ–ì–ê–õ–¢:" "Blue"
Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"
Write-ColoredText "üìù 1-—Ä –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥ —à–∞–ª–≥–∞—Ö:     .\progress-tracker.ps1 -Week 1" "Gray"
Write-ColoredText "üìù 2-—Ä –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥ —à–∞–ª–≥–∞—Ö:     .\progress-tracker.ps1 -Week 2" "Gray"
Write-ColoredText "üìù 3-—Ä –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥ —à–∞–ª–≥–∞—Ö:     .\progress-tracker.ps1 -Week 3" "Gray"
Write-ColoredText "üìù 4-—Ä –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥ —à–∞–ª–≥–∞—Ö:     .\progress-tracker.ps1 -Week 4" "Gray"
Write-ColoredText ""
Write-ColoredText "üìä EXPORT –•–ò–ô–•:" "Blue"
Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Blue"
Write-ColoredText "üìä JSON export:                .\progress-tracker.ps1 -ExportFormat json" "White"
Write-ColoredText "üìä CSV export:                 .\progress-tracker.ps1 -ExportFormat csv" "White"
Write-ColoredText "üìä HTML report:                .\progress-tracker.ps1 -ExportFormat html" "White"
Write-ColoredText ""

Write-ColoredText "üéâ LOS —Ç”©—Å–ª–∏–π–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –ø—Ä–æ–≥—Ä–µ—Å—Å —à–∞–ª–≥–∞–ª—Ç –¥—É—É—Å—Å–∞–Ω! üí™" "Green"
Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Cyan"

# Backend/Frontend —Å—Ç–∞—Ç—É—Å
$backendIcon = if ((Test-HttpEndpoint "http://localhost:8080/los/actuator/health" 2).Success) { "‚úÖ" } else { "‚ùå" }
$frontendIcon = if ((Test-HttpEndpoint "http://localhost:3001" 2).Success) { "‚úÖ" } else { "‚ùå" }

Write-ColoredText "üìä –û–î–û–û–ì–ò–ô–ù –°–¢–ê–¢–£–°:" "White"
Write-ColoredText "   üìÅ –ë–∞–π–≥–∞–∞ —Ñ–∞–π–ª—É—É–¥:      $global:TotalFilesFound / $global:TotalFilesExpected" "White"
Write-ColoredText "   üìà –ì“Ø–π—Ü—ç—Ç–≥—ç–ª:          $totalPercentage%" "White"
Write-ColoredText "   üèóÔ∏è  Backend —Å—Ç–∞—Ç—É—Å:     $backendIcon $(if($backendIcon -eq '‚úÖ'){'–ê–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞'}else{'–ê–∂–∏–ª–ª–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞'})" "White"
Write-ColoredText "   üé® Frontend —Å—Ç–∞—Ç—É—Å:    $frontendIcon $(if($frontendIcon -eq '‚úÖ'){'–ê–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞'}else{'–ê–∂–∏–ª–ª–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞'})" "White"

# –§–∞–π–ª—ã–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ with icons
$javaFiles = Count-FilesInDirectory "backend/src" "*.java"
$tsxFiles = Count-FilesInDirectory "frontend/src" "*.tsx"
$dockerFiles = @("docker-compose.yml", "Dockerfile.backend", "Dockerfile.frontend") | ForEach-Object { if (Find-ProjectFile $_) { 1 } else { 0 } } | Measure-Object -Sum | Select-Object -ExpandProperty Sum

Write-ColoredText "   ‚òï Java —Ñ–∞–π–ª:          $javaFiles" "White"
Write-ColoredText "   ‚öõÔ∏è  React —Ñ–∞–π–ª:         $tsxFiles" "White"
Write-ColoredText "   üê≥ Docker —Ñ–∞–π–ª:        $dockerFiles" "White"

Write-ColoredText ""

# –ü—Ä–æ–≥—Ä–µ—Å—Å—Ç “Ø–Ω–¥—ç—Å–ª—ç–Ω –¥–∞—Ä–∞–∞–≥–∏–π–Ω –∞–ª—Ö–∞–º –∑”©–≤–ª”©—Ö
if ($totalPercentage -lt 25) {
    Write-ColoredText "üí° –î–ê–†–ê–ê–ì–ò–ô–ù –ê–õ–•–ê–ú: Backend entity-“Ø“Ø–¥ –±–æ–ª–æ–Ω —Å—É—É—Ä—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –¥—É—É—Å–≥–∞—Ö" "Yellow"
    Write-ColoredText "   üìã –•–∏–π—Ö —ë—Å—Ç–æ–π:" "Gray"
    Write-ColoredText "   ‚Ä¢ Entity –∫–ª–∞—Å—Å—É—É–¥ “Ø“Ø—Å–≥—ç—Ö (Customer, LoanApplication, Document)" "Gray"
    Write-ColoredText "   ‚Ä¢ Repository –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å“Ø“Ø–¥ –±–∏—á–∏—Ö" "Gray"
    Write-ColoredText "   ‚Ä¢ Database schema —Å–∞–π–∂—Ä—É—É–ª–∞—Ö" "Gray"
    Write-ColoredText "   ‚Ä¢ Docker —Ñ–∞–π–ª—É—É–¥ “Ø“Ø—Å–≥—ç—Ö" "Gray"
} elseif ($totalPercentage -lt 50) {
    Write-ColoredText "üí° –î–ê–†–ê–ê–ì–ò–ô–ù –ê–õ–•–ê–ú: Service –∫–ª–∞—Å—Å—É—É–¥ –±–æ–ª–æ–Ω REST API –Ω—ç–º—ç—Ö" "Yellow"
    Write-ColoredText "   üìã –•–∏–π—Ö —ë—Å—Ç–æ–π:" "Gray"
    Write-ColoredText "   ‚Ä¢ Service implementation –∫–ª–∞—Å—Å—É—É–¥ –±–∏—á–∏—Ö" "Gray"
    Write-ColoredText "   ‚Ä¢ REST Controller-“Ø“Ø–¥ “Ø“Ø—Å–≥—ç—Ö" "Gray"
    Write-ColoredText "   ‚Ä¢ Security —Ç–æ—Ö–∏—Ä–≥–æ–æ —Ö–∏–π—Ö" "Gray"
    Write-ColoredText "   ‚Ä¢ Database migration —Ñ–∞–π–ª—É—É–¥ –Ω—ç–º—ç—Ö" "Gray"
} elseif ($totalPercentage -lt 75) {
    Write-ColoredText "üí° –î–ê–†–ê–ê–ì–ò–ô–ù –ê–õ–•–ê–ú: Frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É—É–¥ –±–æ–ª–æ–Ω API —Ö–æ–ª–±–æ–ª—Ç —Ö–∏–π—Ö" "Yellow"
    Write-ColoredText "   üìã –•–∏–π—Ö —ë—Å—Ç–æ–π:" "Gray"
    Write-ColoredText "   ‚Ä¢ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É—É–¥ “Ø“Ø—Å–≥—ç—Ö" "Gray"
    Write-ColoredText "   ‚Ä¢ API service –∫–ª–∞—Å—Å—É—É–¥ –±–∏—á–∏—Ö" "Gray"
    Write-ColoredText "   ‚Ä¢ User interface —Å–∞–π–∂—Ä—É—É–ª–∞—Ö" "Gray"
    Write-ColoredText "   ‚Ä¢ CI/CD pipeline —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö" "Gray"
} else {
    Write-ColoredText "üí° –î–ê–†–ê–ê–ì–ò–ô–ù –ê–õ–•–ê–ú: Testing, documentation –±–æ–ª–æ–Ω deployment –±—ç–ª—Ç–≥—ç—Ö" "Yellow"
    Write-ColoredText "   üìã –•–∏–π—Ö —ë—Å—Ç–æ–π:" "Gray"
    Write-ColoredText "   ‚Ä¢ Unit –±–æ–ª–æ–Ω Integration —Ç–µ—Å—Ç“Ø“Ø–¥ –±–∏—á–∏—Ö" "Gray"
    Write-ColoredText "   ‚Ä¢ API documentation “Ø“Ø—Å–≥—ç—Ö" "Gray"
    Write-ColoredText "   ‚Ä¢ Production deployment —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö" "Gray"
}

Write-ColoredText ""

# –õ–æ–≥ —Ñ–∞–π–ª—É—É–¥—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª
if ($LogFile -and (Test-Path $LogFile)) {
    Write-ColoredText "üìã –õ–æ–≥ —Ñ–∞–π–ª “Ø“Ø—Å–≥—ç–≥–¥—Å—ç–Ω: $LogFile" "Gray"
}

if ($BackendLogFile -and (Test-Path $BackendLogFile)) {
    Write-ColoredText "üèóÔ∏è Backend –ª–æ–≥ —Ñ–∞–π–ª: $BackendLogFile" "Gray"
}

if ($FrontendLogFile -and (Test-Path $FrontendLogFile)) {
    Write-ColoredText "üé® Frontend –ª–æ–≥ —Ñ–∞–π–ª: $FrontendLogFile" "Gray"
}

Write-ColoredText ""
Write-ColoredText "üìû –¢–£–°–õ–ê–ú–ñ –ê–í–ê–•:" "Green"
Write-ColoredText "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Green"
Write-ColoredText "üìß Email: los-dev-team@company.com" "White"
Write-ColoredText "üí¨ Teams: LOS Development Channel" "White"
Write-ColoredText "üìñ Wiki: https://company.sharepoint.com/los-project" "White"
Write-ColoredText "üêõ Issues: https://github.com/company/los/issues" "White"

Write-ColoredText ""
Write-ColoredText "üéâ LOS —Ç”©—Å–ª–∏–π–Ω –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö”©–≥–∂“Ø“Ø–ª—ç–ª—Ç —Ö“Ø–ª—ç—ç–∂ –±–∞–π–Ω–∞! üí™" "Green"
Write-ColoredText "üîß Enhanced Progress Tracker v5.0 - Docker, CI/CD, Migration –¥—ç–º–∂–ª—ç–≥—Ç—ç–π" "Green"
Write-ColoredText ""

# –ê–≤—Ç–æ–º–∞—Ç –¥—É—É—Å–≥–∞—Ö–≥“Ø–π - PowerShell ISE/VS Code-–¥ –∞–∂–∏–ª–ª–∞—Ö –±–æ–ª–æ–º–∂
if ($Host.Name -eq "ConsoleHost" -and !$QuickCheck -and !$ShowMissingOnly -and !$ShowExistingOnly -and !$ShowMigrations) {
    Write-ColoredText "–î—É—Ä—ã–Ω —Ç–æ–≤—á –¥–∞—Ä–∂ –≥–∞—Ä–Ω–∞ —É—É..." "Gray"
    $null = Read-Host
}