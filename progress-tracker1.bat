# ================================================================
# üè¶ LOS –¢”©—Å–ª–∏–π–Ω ”®–¥”©—Ä –¢—É—Ç–º—ã–Ω –ü—Ä–æ–≥—Ä–µ—Å—Å –®–∞–ª–≥–∞–ª—Ç - PowerShell —Ö—É–≤–∏–ª–±–∞—Ä
# LOS-Progress-Tracker.ps1
# ================================================================

param(
    [Parameter(Mandatory=$false)]
    [switch]$Detailed = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$TestMode = $false,
    
    [Parameter(Mandatory=$false)]
    [string]$LogFile = ""
)

# UTF-8 –¥—ç–º–∂–ª—ç–≥
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# ”®–Ω–≥”©—Ç—ç–π –≥–∞—Ä–∞–ª—Ç
function Write-ColoredText {
    param($Text, $Color = "White")
    Write-Host $Text -ForegroundColor $Color
}

# HTTP —Ö“Ø—Å—ç–ª—Ç —à–∞–ª–≥–∞—Ö —Ñ—É–Ω–∫—Ü
function Test-HttpEndpoint {
    param($Url, $Timeout = 5)
    try {
        $response = Invoke-WebRequest -Uri $Url -Method GET -TimeoutSec $Timeout -UseBasicParsing
        return @{
            Success = $true
            StatusCode = $response.StatusCode
            ResponseTime = $response.Headers["X-Response-Time"]
        }
    } catch {
        return @{
            Success = $false
            StatusCode = $_.Exception.Response.StatusCode.value__
            Error = $_.Exception.Message
        }
    }
}

# –õ–æ–≥ —Ñ–∞–π–ª–¥ –±–∏—á–∏—Ö —Ñ—É–Ω–∫—Ü
function Write-Log {
    param($Message)
    if ($LogFile) {
        Add-Content -Path $LogFile -Value "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss'): $Message"
    }
}

Clear-Host

Write-ColoredText "==================================================================" "Cyan"
Write-ColoredText "üè¶ LOS –¢”©—Å–ª–∏–π–Ω ”®–¥”©—Ä –¢—É—Ç–º—ã–Ω –ü—Ä–æ–≥—Ä–µ—Å—Å –®–∞–ª–≥–∞–ª—Ç - PowerShell Edition" "Yellow"
Write-ColoredText "==================================================================" "Cyan"
Write-ColoredText "üìÖ –û–≥–Ω–æ–æ: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" "White"
Write-ColoredText ""

Write-Log "Progress tracking started"

# 1. Backend —Å—Ç–∞—Ç—É—Å —à–∞–ª–≥–∞—Ö
Write-ColoredText "üîß Backend –°—Ç–∞—Ç—É—Å –®–∞–ª–≥–∞—Ö..." "Blue"

$backendHealth = Test-HttpEndpoint "http://localhost:8080/los/actuator/health"
if ($backendHealth.Success) {
    Write-ColoredText "‚úÖ Backend –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞ (Port 8080)" "Green"
    Write-Log "Backend is running"
    
    Write-ColoredText "üîç API Endpoints —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞..." "Blue"
    
    # Customer API
    $customerApi = Test-HttpEndpoint "http://localhost:8080/los/api/v1/customers"
    if ($customerApi.Success) {
        Write-ColoredText "  ‚úÖ Customer API: –ê–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞ ($($customerApi.StatusCode))" "Green"
    } elseif ($customerApi.StatusCode -eq 401) {
        Write-ColoredText "  ‚ö†Ô∏è  Customer API: Authentication —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π (401)" "Yellow"
    } else {
        Write-ColoredText "  ‚ùå Customer API: –ê–ª–¥–∞–∞ ($($customerApi.StatusCode))" "Red"
    }
    
    # Loan API
    $loanApi = Test-HttpEndpoint "http://localhost:8080/los/api/v1/loan-applications"
    if ($loanApi.Success) {
        Write-ColoredText "  ‚úÖ Loan Application API: –ê–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞ ($($loanApi.StatusCode))" "Green"
    } elseif ($loanApi.StatusCode -eq 401) {
        Write-ColoredText "  ‚ö†Ô∏è  Loan Application API: Authentication —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π (401)" "Yellow"
    } else {
        Write-ColoredText "  ‚ùå Loan Application API: –ê–ª–¥–∞–∞ ($($loanApi.StatusCode))" "Red"
    }
    
    # H2 Console
    $h2Console = Test-HttpEndpoint "http://localhost:8080/los/h2-console"
    if ($h2Console.Success) {
        Write-ColoredText "  ‚úÖ H2 Database Console: –ê–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞" "Green"
    } else {
        Write-ColoredText "  ‚ùå H2 Database Console: –•–æ–ª–±–æ–≥–¥–æ—Ö–≥“Ø–π –±–∞–π–Ω–∞" "Red"
    }
    
} else {
    Write-ColoredText "‚ùå Backend –∞–∂–∏–ª–ª–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞ (Port 8080)" "Red"
    Write-Log "Backend is not running"
}

Write-ColoredText ""

# 2. Frontend —Å—Ç–∞—Ç—É—Å —à–∞–ª–≥–∞—Ö
Write-ColoredText "üé® Frontend –°—Ç–∞—Ç—É—Å –®–∞–ª–≥–∞—Ö..." "Blue"

$frontendHealth = Test-HttpEndpoint "http://localhost:3001"
if ($frontendHealth.Success) {
    Write-ColoredText "‚úÖ Frontend –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞ (Port 3001)" "Green"
    Write-Log "Frontend is running"
} else {
    Write-ColoredText "‚ùå Frontend –∞–∂–∏–ª–ª–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞ (Port 3001)" "Red"
    Write-Log "Frontend is not running"
}

Write-ColoredText ""

# 3. Database –±–∞–π–¥–∞–ª —à–∞–ª–≥–∞—Ö
Write-ColoredText "üóÑÔ∏è Database –°—Ç–∞—Ç—É—Å –®–∞–ª–≥–∞—Ö..." "Blue"

# H2 —ç—Å–≤—ç–ª PostgreSQL —à–∞–ª–≥–∞—Ö
if (Test-Path "backend/src/main/resources/application.yml") {
    $appConfig = Get-Content "backend/src/main/resources/application.yml" -Raw
    if ($appConfig -match "h2") {
        Write-ColoredText "‚úÖ H2 Database —Ç–æ—Ö–∏—Ä—É—É–ª—Å–∞–Ω (In-memory)" "Green"
        Write-Log "H2 Database configured"
    } elseif ($appConfig -match "postgresql") {
        Write-ColoredText "‚úÖ PostgreSQL Database —Ç–æ—Ö–∏—Ä—É—É–ª—Å–∞–Ω" "Green"
        Write-Log "PostgreSQL Database configured"
    }
} else {
    Write-ColoredText "‚ö†Ô∏è  Database —Ç–æ—Ö–∏—Ä–≥–æ–æ –æ–ª–¥—Å–æ–Ω–≥“Ø–π" "Yellow"
}

# data.sql —Ñ–∞–π–ª —à–∞–ª–≥–∞—Ö
if (Test-Path "backend/src/main/resources/data.sql") {
    Write-ColoredText "‚úÖ –ê–Ω—Ö–Ω—ã ”©–≥”©–≥–¥–ª–∏–π–Ω —Ñ–∞–π–ª –±–∞–π–Ω–∞ (data.sql)" "Green"
} else {
    Write-ColoredText "‚ùå –ê–Ω—Ö–Ω—ã ”©–≥”©–≥–¥–ª–∏–π–Ω —Ñ–∞–π–ª –∞–ª–≥–∞ (data.sql)" "Red"
}

Write-ColoredText ""

# 4. –§–∞–π–ª—É—É–¥—ã–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å —à–∞–ª–≥–∞—Ö
Write-ColoredText "üìÅ –§–∞–π–ª—É—É–¥—ã–Ω –ü—Ä–æ–≥—Ä–µ—Å—Å –®–∞–ª–≥–∞—Ö..." "Blue"

# Java —Ñ–∞–π–ª—É—É–¥
$javaFiles = (Get-ChildItem -Path . -Recurse -Filter "*.java" -ErrorAction SilentlyContinue | Measure-Object).Count
Write-ColoredText "  ‚òï Java —Ñ–∞–π–ª—É—É–¥—ã–Ω —Ç–æ–æ: $javaFiles" "White"

# TypeScript/React —Ñ–∞–π–ª—É—É–¥
$tsxFiles = (Get-ChildItem -Path . -Recurse -Filter "*.tsx" -ErrorAction SilentlyContinue | Measure-Object).Count
$tsFiles = (Get-ChildItem -Path . -Recurse -Filter "*.ts" -ErrorAction SilentlyContinue | Measure-Object).Count
Write-ColoredText "  ‚öõÔ∏è  React —Ñ–∞–π–ª—É—É–¥—ã–Ω —Ç–æ–æ: $tsxFiles (.tsx)" "White"
Write-ColoredText "  üìò TypeScript —Ñ–∞–π–ª—É—É–¥—ã–Ω —Ç–æ–æ: $tsFiles (.ts)" "White"

# CSS —Ñ–∞–π–ª—É—É–¥
$cssFiles = (Get-ChildItem -Path . -Recurse -Filter "*.css" -ErrorAction SilentlyContinue | Measure-Object).Count
Write-ColoredText "  üé® CSS —Ñ–∞–π–ª—É—É–¥—ã–Ω —Ç–æ–æ: $cssFiles" "White"

# SQL —Ñ–∞–π–ª—É—É–¥
$sqlFiles = (Get-ChildItem -Path . -Recurse -Filter "*.sql" -ErrorAction SilentlyContinue | Measure-Object).Count
Write-ColoredText "  üóÑÔ∏è SQL —Ñ–∞–π–ª—É—É–¥—ã–Ω —Ç–æ–æ: $sqlFiles" "White"

# Configuration —Ñ–∞–π–ª—É—É–¥
$configFiles = (Get-ChildItem -Path . -Recurse -Include "*.yml", "*.yaml", "*.json", "*.properties" -ErrorAction SilentlyContinue | Measure-Object).Count
Write-ColoredText "  ‚öôÔ∏è  Configuration —Ñ–∞–π–ª—É—É–¥—ã–Ω —Ç–æ–æ: $configFiles" "White"

Write-Log "Files: Java=$javaFiles, React=$tsxFiles, TypeScript=$tsFiles, CSS=$cssFiles, SQL=$sqlFiles"

Write-ColoredText ""

# 5. Git —Å—Ç–∞—Ç—É—Å —à–∞–ª–≥–∞—Ö  
Write-ColoredText "üìù Git –°—Ç–∞—Ç—É—Å –®–∞–ª–≥–∞—Ö..." "Blue"

if (Test-Path ".git") {
    try {
        $branch = git rev-parse --abbrev-ref HEAD 2>$null
        Write-ColoredText "  üåø Branch: $branch" "White"
        
        $commits = git rev-list --count HEAD 2>$null
        Write-ColoredText "  üì¶ –ù–∏–π—Ç commit-—É—É–¥: $commits" "White"
        
        $uncommitted = (git status --porcelain 2>$null | Measure-Object).Count
        if ($uncommitted -eq 0) {
            Write-ColoredText "  ‚úÖ Commit —Ö–∏–π–≥–¥—ç—ç–≥“Ø–π ”©”©—Ä—á–ª”©–ª—Ç –±–∞–π—Ö–≥“Ø–π" "Green"
        } else {
            Write-ColoredText "  ‚ö†Ô∏è  Commit —Ö–∏–π–≥–¥—ç—ç–≥“Ø–π ”©”©—Ä—á–ª”©–ª—Ç: $uncommitted —Ñ–∞–π–ª" "Yellow"
        }
        
        $lastCommit = git log -1 --pretty=format:"%h %s (%cr)" 2>$null
        Write-ColoredText "  üïê –°“Ø“Ø–ª–∏–π–Ω commit: $lastCommit" "White"
        
        Write-Log "Git: Branch=$branch, Commits=$commits, Uncommitted=$uncommitted"
    } catch {
        Write-ColoredText "  ‚ö†Ô∏è  Git command –∞–ª–¥–∞–∞: $($_.Exception.Message)" "Yellow"
    }
} else {
    Write-ColoredText "  ‚ùå Git repository –±–∏—à" "Red"
}

Write-ColoredText ""

# 6. Testing —Å—Ç–∞—Ç—É—Å —à–∞–ª–≥–∞—Ö
Write-ColoredText "üß™ Testing –°—Ç–∞—Ç—É—Å –®–∞–ª–≥–∞—Ö..." "Blue"

# Backend test —Ñ–∞–π–ª—É—É–¥
$testFiles = (Get-ChildItem -Path . -Recurse -Filter "*Test.java" -ErrorAction SilentlyContinue | Measure-Object).Count
Write-ColoredText "  ‚òï Java Test —Ñ–∞–π–ª—É—É–¥—ã–Ω —Ç–æ–æ: $testFiles" "White"

# Frontend test —Ñ–∞–π–ª—É—É–¥  
$frontendTestFiles = (Get-ChildItem -Path . -Recurse -Include "*.test.*", "*.spec.*" -ErrorAction SilentlyContinue | Measure-Object).Count
Write-ColoredText "  ‚öõÔ∏è  Frontend Test —Ñ–∞–π–ª—É—É–¥—ã–Ω —Ç–æ–æ: $frontendTestFiles" "White"

# Maven test –∞–∂–∏–ª–ª—É—É–ª–∞—Ö (Test mode-–¥)
if ($TestMode -and (Test-Path "mvnw.cmd")) {
    Write-ColoredText "  üî® Backend test –∞–∂–∏–ª–ª—É—É–ª–∂ –±–∞–π–Ω–∞..." "Blue"
    try {
        $testResult = & .\mvnw.cmd test -q 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-ColoredText "  ‚úÖ Backend —Ç–µ—Å—Ç“Ø“Ø–¥ –∞–º–∂–∏–ª—Ç—Ç–∞–π" "Green"
        } else {
            Write-ColoredText "  ‚ùå Backend —Ç–µ—Å—Ç“Ø“Ø–¥ –∞–ª–¥–∞–∞—Ç–∞–π" "Red"
        }
    } catch {
        Write-ColoredText "  ‚ö†Ô∏è  Test –∞–∂–∏–ª–ª—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞" "Yellow"
    }
}

Write-ColoredText ""

# 7. Performance —à–∞–ª–≥–∞—Ö
Write-ColoredText "üöÄ Performance –®–∞–ª–≥–∞—Ö..." "Blue"

if ($backendHealth.Success) {
    Write-ColoredText "  ‚è±Ô∏è  Backend response: –•–∞—Ä–∏—É ”©–≥—á –±–∞–π–Ω–∞" "Green"
} else {
    Write-ColoredText "  ‚ùå Backend response: –•–∞—Ä–∏—É ”©–≥”©—Ö–≥“Ø–π –±–∞–π–Ω–∞" "Red"
}

if ($frontendHealth.Success) {
    Write-ColoredText "  ‚è±Ô∏è  Frontend load: –ê—á–∞–∞–ª–ª–∞–≥–¥–∞–∂ –±–∞–π–Ω–∞" "Green" 
} else {
    Write-ColoredText "  ‚ùå Frontend load: –ê—á–∞–∞–ª–ª–∞–≥–¥–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞" "Red"
}

Write-ColoredText ""

# 8. –î–∞—Ä–∞–∞–≥–∏–π–Ω –∞–ª—Ö–º—É—É–¥—ã–≥ –∑”©–≤–ª”©—Ö
Write-ColoredText "üìã –î–∞—Ä–∞–∞–≥–∏–π–Ω –ê–ª—Ö–º—É—É–¥:" "Blue"

$recommendations = @()

if ($javaFiles -lt 20) {
    $recommendations += "üìù Backend-–¥ –∏–ª“Ø“Ø –æ–ª–æ–Ω entity, service, controller –Ω—ç–º—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π"
}

if ($tsxFiles -lt 15) {
    $recommendations += "üé® Frontend-–¥ –∏–ª“Ø“Ø –æ–ª–æ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω—ç–º—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π"
}

if ($testFiles -lt 5) {
    $recommendations += "üß™ –ò–ª“Ø“Ø –æ–ª–æ–Ω backend —Ç–µ—Å—Ç –±–∏—á–∏—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π"
}

if ($sqlFiles -lt 2) {
    $recommendations += "üóÑÔ∏è Database schema –±–æ–ª–æ–Ω –∞–Ω—Ö–Ω—ã ”©–≥”©–≥–¥”©–ª –Ω—ç–º—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π"
}

if (!$backendHealth.Success -or !$frontendHealth.Success) {
    $recommendations += "üö® Server-“Ø“Ø–¥–∏–π–≥ –¥–∞—Ö–∏–Ω –∞—Å–∞—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π"
}

if (!(Test-Path "backend/src/main/resources/data.sql")) {
    $recommendations += "üë§ Admin —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω ”©–≥”©–≥–¥”©–ª –Ω—ç–º—ç—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π (data.sql)"
}

if ($recommendations.Count -eq 0) {
    Write-ColoredText "  üéâ –ë“Ø—Ö –∑“Ø–π–ª —Å–∞–π–Ω –±–∞–π–Ω–∞! –î–∞—Ä–∞–∞–≥–∏–π–Ω feature —Ä—É—É —à–∏–ª–∂–∏–∂ –±–æ–ª–Ω–æ." "Green"
} else {
    foreach ($rec in $recommendations) {
        Write-ColoredText "  $rec" "Yellow"
    }
}

Write-ColoredText ""

# 9. –•—ç—Ä—Ö—ç–Ω –∞–∂–∏–ª–ª—É—É–ª–∞—Ö –∑–∞–∞–≤–∞—Ä
Write-ColoredText "üîë –ù—ç–≤—Ç—Ä—ç—Ö –∑–∞–∞–≤–∞—Ä:" "Green"
Write-ColoredText "  üë§ –ê–¥–º–∏–Ω —ç—Ä—Ö: admin / admin123" "White"
Write-ColoredText "  üë§ –ó—ç—ç–ª–∏–π–Ω –∞–∂–∏–ª—Ç–∞–Ω: loan_officer / loan123" "White"  
Write-ColoredText "  üë§ –ú–µ–Ω–µ–∂–µ—Ä: manager / manager123" "White"
Write-ColoredText "  üåê Backend: http://localhost:8080/los" "White"
Write-ColoredText "  üåê Frontend: http://localhost:3001" "White"
Write-ColoredText "  üóÑÔ∏è H2 Console: http://localhost:8080/los/h2-console" "White"

Write-ColoredText ""

# 10. –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
Write-ColoredText "üõ†Ô∏è –•—ç—Ä—ç–≥—Ç—ç–π –∫–æ–º–∞–Ω–¥—É—É–¥:" "Blue"
Write-ColoredText "  Backend —ç—Ö–ª“Ø“Ø–ª—ç—Ö: cd backend && .\mvnw.cmd spring-boot:run" "White"
Write-ColoredText "  Frontend —ç—Ö–ª“Ø“Ø–ª—ç—Ö: cd frontend && npm run dev" "White"
Write-ColoredText "  –î–∞—Ä–∞–∞–≥–∏–π–Ω ”©–¥—Ä–∏–π–Ω —Ñ–∞–π–ª—É—É–¥: .\Next-5-Days-Development.ps1 -Day 1" "White"
Write-ColoredText "  –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —à–∞–ª–≥–∞–ª—Ç: .\LOS-Progress-Tracker.ps1 -Detailed" "White"

Write-ColoredText ""
Write-ColoredText "==================================================================" "Cyan"
Write-ColoredText "‚ú® –ü—Ä–æ–≥—Ä–µ—Å—Å —à–∞–ª–≥–∞–ª—Ç –¥—É—É—Å—Å–∞–Ω!" "Green"
Write-ColoredText "üìÑ –û–¥–æ–æ–≥–∏–π–Ω —Å—Ç–∞—Ç—É—Å:" "White"
Write-ColoredText "   - Java —Ñ–∞–π–ª: $javaFiles" "White"
Write-ColoredText "   - React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: $tsxFiles" "White"
Write-ColoredText "   - –¢–µ—Å—Ç“Ø“Ø–¥: $testFiles" "White"
Write-ColoredText "   - SQL —Ñ–∞–π–ª: $sqlFiles" "White"
Write-ColoredText ""
Write-ColoredText "üí° –î–∞—Ä–∞–∞–≥–∏–π–Ω –∞–ª—Ö–∞–º: Authentication –∑–∞—Å–∞–∞–¥, Dashboard —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –∞–∂–∏–ª–ª—É—É–ª–∞—Ö" "Yellow"
Write-ColoredText "==================================================================" "Cyan"

Write-Log "Progress tracking completed"

# Log —Ñ–∞–π–ª –º—ç–¥—ç—ç–ª—ç–ª
if ($LogFile) {
    Write-ColoredText "üìã –õ–æ–≥ —Ñ–∞–π–ª: $LogFile" "Gray"
}
pause