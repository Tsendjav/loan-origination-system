version: '3.8'

# Production environment configuration
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: los-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-losdb_prod}
      POSTGRES_USER: ${POSTGRES_USER:-losuser_prod}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/postgres/init-prod:/docker-entrypoint-initdb.d
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - los-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-losuser_prod} -d ${POSTGRES_DB:-losdb_prod}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis (Production with persistence)
  redis:
    image: redis:7-alpine
    container_name: los-redis-prod
    restart: always
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - los-prod-network
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Backend API (Production)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      args:
        ENVIRONMENT: production
    image: los-backend:prod
    container_name: los-backend-prod
    restart: always
    ports:
      - "8080:8080"
    environment:
      # Spring profiles
      SPRING_PROFILES_ACTIVE: prod,postgres
      
      # Database configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-losdb_prod}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-losuser_prod}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: 20
      SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE: 5
      SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: 20000
      SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT: 300000
      SPRING_DATASOURCE_HIKARI_MAX_LIFETIME: 1200000
      
      # JPA configuration
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: false
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_HIBERNATE_NAMING_PHYSICAL_STRATEGY: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      
      # Redis configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      SPRING_REDIS_TIMEOUT: 2000ms
      SPRING_REDIS_LETTUCE_POOL_MAX_ACTIVE: 8
      SPRING_REDIS_LETTUCE_POOL_MAX_IDLE: 8
      SPRING_REDIS_LETTUCE_POOL_MIN_IDLE: 0
      
      # Server configuration
      SERVER_PORT: 8080
      SERVER_SERVLET_CONTEXT_PATH: /los
      SERVER_COMPRESSION_ENABLED: true
      SERVER_HTTP2_ENABLED: true
      
      # Logging
      LOGGING_LEVEL_ROOT: WARN
      LOGGING_LEVEL_MN_TSENDJAV_LOS: INFO
      LOGGING_LEVEL_SPRINGFRAMEWORK_SECURITY: INFO
      LOGGING_FILE_NAME: /app/logs/los-backend-prod.log
      LOGGING_LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE: 100MB
      LOGGING_LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP: 1GB
      LOGGING_LOGBACK_ROLLINGPOLICY_MAX_HISTORY: 30
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION:-604800}
      
      # CORS (production domains)
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-https://los.example.com,https://www.los.example.com}
      CORS_ALLOWED_METHODS: GET,POST,PUT,DELETE,OPTIONS,PATCH
      CORS_ALLOWED_HEADERS: "*"
      CORS_ALLOW_CREDENTIALS: true
      
      # File upload
      SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE: 50MB
      SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE: 100MB
      FILE_UPLOAD_PATH: /app/uploads
      
      # Actuator (monitoring)
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when_authorized
      MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: true
      
      # JVM settings for production
      JAVA_OPTS: "-Xmx1024m -Xms512m -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
      
      # Application specific
      APP_NAME: "Loan Origination System"
      APP_VERSION: "1.0.0"
      APP_ENVIRONMENT: production
      
    volumes:
      - backend_prod_logs:/app/logs
      - backend_prod_uploads:/app/uploads
      - ./docker/backend/application-prod.yml:/app/config/application-prod.yml:ro
    networks:
      - los-prod-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/los/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s

  # Frontend Application (Production)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-https://api.los.example.com/los/api/v1}
        REACT_APP_ENV: production
        REACT_APP_VERSION: "1.0.0"
    image: los-frontend:prod
    container_name: los-frontend-prod
    restart: always
    ports:
      - "3001:3001"
    environment:
      NGINX_HOST: localhost
      NGINX_PORT: 3001
    volumes:
      - frontend_prod_logs:/var/log/nginx
      - ./docker/nginx/frontend-prod.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - los-prod-network
    depends_on:
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Load Balancer / Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: los-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    environment:
      NGINX_HOST: ${NGINX_HOST:-los.example.com}
      NGINX_PORT: 80
    volumes:
      - ./docker/nginx/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d/prod:/etc/nginx/conf.d:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_prod_logs:/var/log/nginx
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    networks:
      - los-prod-network
    depends_on:
      - backend
      - frontend
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SSL Certificate management
  certbot:
    image: certbot/certbot
    container_name: los-certbot-prod
    volumes:
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - los-prod-network

  # Monitoring - Prometheus (Production)
  prometheus:
    image: prom/prometheus:latest
    container_name: los-prometheus-prod
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_prod_data:/prometheus
    networks:
      - los-prod-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Monitoring - Grafana (Production)
  grafana:
    image: grafana/grafana:latest
    container_name: los-grafana-prod
    restart: always
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_ALLOW_EMBEDDING: false
      GF_SECURITY_COOKIE_SECURE: true
      GF_SECURITY_COOKIE_SAMESITE: strict
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-https://grafana.los.example.com}
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./docker/grafana/provisioning-prod:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - los-prod-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Log aggregation - Loki
  loki:
    image: grafana/loki:latest
    container_name: los-loki-prod
    restart: always
    ports:
      - "3100:3100"
    volumes:
      - ./docker/loki/loki-prod.yml:/etc/loki/local-config.yaml:ro
      - loki_prod_data:/loki
    networks:
      - los-prod-network
    command: -config.file=/etc/loki/local-config.yaml

# Networks
networks:
  los-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Volumes (Production with backup strategy)
volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/los/data/postgres
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/los/data/redis
  backend_prod_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/los/logs/backend
  backend_prod_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/los/uploads
  frontend_prod_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/los/logs/frontend
  nginx_prod_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/los/logs/nginx
  prometheus_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/los/data/prometheus
  grafana_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/los/data/grafana
  loki_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/los/data/loki
  certbot_data:
    driver: local
  certbot_www:
    driver: local