// frontend/src/pages/LoginPage.tsx - –ó–ê–°–í–ê–†–õ–ê–°–ê–ù
import React, { useState, useEffect } from 'react';
import authService, { TEST_USERS } from '../services/authService';
import './LoginPage.css';

interface LoginFormData {
  username: string;
  password: string;
}

interface ConnectionStatus {
  success: boolean;
  message: string;
  endpoint?: string;
}

const LoginPage: React.FC = () => {
  const [formData, setFormData] = useState<LoginFormData>({
    username: '',
    password: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus | null>(null);

  // Backend —Ö–æ–ª–±–æ–ª—Ç —à–∞–ª–≥–∞—Ö
  useEffect(() => {
    const checkConnection = async () => {
      console.log('üîç Checking backend connection...');
      const isConnected = await authService.testConnection();
      console.log('üîó Connection status:', isConnected);
      setConnectionStatus(isConnected);
    };

    checkConnection();
  }, []);

  // Form input ”©”©—Ä—á–ª”©—Ö
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));

    // –ê–ª–¥–∞–∞ —Ü—ç–≤—ç—Ä–ª—ç—Ö
    if (error) {
      setError(null);
    }
  };

  // –ù—ç–≤—Ç—Ä—ç—Ö “Ø–π–ª–¥—ç–ª
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.username || !formData.password) {
      setError('–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä –±–æ–ª–æ–Ω –Ω—É—É—Ü “Ø–≥—ç—ç –æ—Ä—É—É–ª–Ω–∞ —É—É');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      console.log('üöÄ Starting login process...');
      const response = await authService.login(formData);

      if (response.success) {
        console.log('‚úÖ Login successful, redirecting...');
        // –ê–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–≤—Ç—ç—Ä—Å—ç–Ω - dashboard –ª—É—É —à–∏–ª–∂–∏—Ö
        window.location.href = '/dashboard';
      } else {
        setError(response.message || '–ù—ç–≤—Ç—Ä—ç—Ö –∞–º–∂–∏–ª—Ç–≥“Ø–π');
      }
    } catch (error: any) {
      console.error('‚ùå Login error:', error);
      setError(error.message || '–°–µ—Ä–≤–µ—Ä—Ç —Ö–æ–ª–±–æ–≥–¥–æ—Ö –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞');
    } finally {
      setLoading(false);
    }
  };

  // –¢–µ—Å—Ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á—ç—ç—Ä –Ω—ç–≤—Ç—Ä—ç—Ö
  const handleTestLogin = async (testUser: typeof TEST_USERS[0]) => {
    console.log('üß™ Test login with:', testUser.username);

    setFormData({
      username: testUser.username,
      password: testUser.password
    });

    setLoading(true);
    setError(null);

    try {
      const response = await authService.login({
        username: testUser.username,
        password: testUser.password
      });

      if (response.success) {
        console.log('‚úÖ Test login successful');
        window.location.href = '/dashboard';
      } else {
        setError(response.message || '–¢–µ—Å—Ç –Ω—ç–≤—Ç—Ä—ç–ª—Ç –∞–º–∂–∏–ª—Ç–≥“Ø–π');
      }
    } catch (error: any) {
      console.error('‚ùå Test login failed:', error);
      setError(error.message || '–¢–µ—Å—Ç –Ω—ç–≤—Ç—Ä—ç–ª—Ç—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="login-container">
      <div className="login-box">
        <div className="login-header">
          <h1>üè¶ LOS –°–∏—Å—Ç–µ–º</h1>
          <h2>–ù—ç–≤—Ç—Ä—ç—Ö</h2>
        </div>

        {/* Backend —Ö–æ–ª–±–æ–ª—Ç—ã–Ω —Å—Ç–∞—Ç—É—Å */}
        <div className={`connection-status ${connectionStatus?.success ? 'connected' : 'disconnected'}`}>
          {connectionStatus === null ? (
            <span>üîÑ –•–æ–ª–±–æ–ª—Ç —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...</span>
          ) : connectionStatus.success ? (
            <span>‚úÖ Backend —Ö–æ–ª–±–æ–≥–¥—Å–æ–Ω</span>
          ) : (
            <span>‚ùå Backend —Ö–æ–ª–±–æ–≥–¥–æ–æ–≥“Ø–π (http://localhost:8080)</span>
          )}
        </div>

        {/* Login —Ñ–æ—Ä–º */}
        <form onSubmit={handleSubmit} className="login-form">
          {error && (
            <div className="error-message">
              <span className="error-icon">‚ùå</span>
              {error}
            </div>
          )}

          <div className="form-group">
            <label htmlFor="username">–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä:</label>
            <input
              type="text"
              id="username"
              name="username"
              value={formData.username}
              onChange={handleInputChange}
              placeholder="admin"
              disabled={loading}
              autoComplete="username"
            />
          </div>

          <div className="form-group">
            <label htmlFor="password">–ù—É—É—Ü “Ø–≥:</label>
            <input
              type="password"
              id="password"
              name="password"
              value={formData.password}
              onChange={handleInputChange}
              placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              disabled={loading}
              autoComplete="current-password"
            />
          </div>

          <button 
            type="submit" 
            className="login-button"
            disabled={loading || !connectionStatus?.success}
          >
            {loading ? 'üîÑ –ù—ç–≤—Ç—Ä—ç–∂ –±–∞–π–Ω–∞...' : 'üîê –ù—ç–≤—Ç—Ä—ç—Ö'}
          </button>
        </form>

        {/* –¢–µ—Å—Ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥–∏–π–Ω –∂–∞–≥—Å–∞–∞–ª—Ç */}
        <div className="test-users">
          <h3>–¢–µ—Å—Ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥:</h3>
          <div className="test-user-buttons">
            {TEST_USERS.map((user: any) => (
              <button
                key={user.username}
                onClick={() => handleTestLogin(user)}
                className="test-user-button"
                disabled={loading || !connectionStatus?.success}
                title={`${user.username} / ${user.password}`}
              >
                üë§ {user.username} ({user.role})
              </button>
            ))}
          </div>
          <p className="test-info">
            üí° –î—ç—ç—Ä—Ö —Ç–æ–≤—á–Ω—É—É–¥—ã–≥ –¥–∞—Ä–∂ —à—É—É–¥ –Ω—ç–≤—Ç—Ä—ç—Ö –±–æ–ª–æ–º–∂—Ç–æ–π
          </p>
        </div>

        {/* –°–∏—Å—Ç–µ–º–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª */}
        <div className="system-info">
          <h4>üìã –°–∏—Å—Ç–µ–º–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª:</h4>
          <ul>
            <li>üåê Backend: http://localhost:8080/los</li>
            <li>üé® Frontend: http://localhost:3001</li>
            <li>üìä API Docs: http://localhost:8080/los/swagger-ui.html</li>
            <li>üóÑÔ∏è H2 Database: http://localhost:8080/los/h2-console</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;