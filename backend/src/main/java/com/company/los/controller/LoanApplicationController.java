package com.company.los.controller;

import com.company.los.dto.LoanApplicationDto;
import com.company.los.dto.CreateLoanRequestDto;
import com.company.los.enums.LoanStatus;
import com.company.los.service.LoanApplicationService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
//import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.*;
import java.math.BigDecimal;

/**
 * –ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç–∏–π–Ω REST API Controller - –°–∞–π–∂—Ä—É—É–ª—Å–∞–Ω —Ö—É–≤–∏–ª–±–∞—Ä
 * Loan Application REST API Controller - Enhanced Version
 * 
 * –ë–∞–π—Ä—à–∏–ª: backend/src/main/java/com/company/los/controller/LoanApplicationController.java
 */
@Slf4j
@RestController
@RequestMapping("/api/v1/loan-applications")
@CrossOrigin(origins = {"http://localhost:3001", "http://localhost:3000", "http://127.0.0.1:3001", "http://127.0.0.1:3000"})
@RequiredArgsConstructor
@Tag(name = "Loan Application Management", description = "–ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç–∏–π–Ω —É–¥–∏—Ä–¥–ª–∞–≥—ã–Ω API")
public class LoanApplicationController {

    private final LoanApplicationService loanApplicationService;

    /**
     * –ë“Ø—Ö –∑—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç–∏–π–Ω –∂–∞–≥—Å–∞–∞–ª—Ç
     * GET /api/v1/loan-applications
     */
    @GetMapping
    @Operation(summary = "–ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç“Ø“Ø–¥", description = "–ë“Ø—Ö –∑—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç–∏–π–Ω –∂–∞–≥—Å–∞–∞–ª—Ç –∞–≤–∞—Ö")
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "–ê–º–∂–∏–ª—Ç—Ç–∞–π"),
        @ApiResponse(responseCode = "500", description = "–°–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞")
    })
    //@PreAuthorize("hasAuthority('loan:view')")
    public ResponseEntity<ResponseWrapper<Page<LoanApplicationDto>>> getAllLoanApplications(
            @RequestParam(defaultValue = "0") @Parameter(description = "–•—É—É–¥–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä") int page,
            @RequestParam(defaultValue = "20") @Parameter(description = "–•—É—É–¥—Å–∞–Ω –¥–∞—Ö—å —ç–ª–µ–º–µ–Ω—Ç–∏–π–Ω —Ç–æ–æ") int size,
            @RequestParam(required = false) @Parameter(description = "–°—Ç–∞—Ç—É—Å —à“Ø“Ø–ª—Ç“Ø“Ø—Ä") String status,
            @RequestParam(required = false) @Parameter(description = "–•–∞—Ä–∏–ª—Ü–∞–≥—á–∏–π–Ω ID") UUID customerId) {
        
        log.debug("üí∞ Getting loan applications - page: {}, size: {}, status: {}, customerId: {}", 
                page, size, status, customerId);
        
        try {
            Pageable pageable = PageRequest.of(page, size);
            Page<LoanApplicationDto> applications;
            
            if (customerId != null) {
                applications = loanApplicationService.getLoanApplicationsByCustomer(customerId, pageable);
            } else if (status != null && !status.trim().isEmpty()) {
                // String-—ç—ç—Å LoanStatus enum —Ä—É—É —Ö”©—Ä–≤“Ø“Ø–ª—ç—Ö
                LoanStatus loanStatus = LoanStatus.valueOf(status.toUpperCase());
                applications = loanApplicationService.getLoanApplicationsByStatus(loanStatus, pageable);
            } else {
                applications = loanApplicationService.getAllLoanApplications(pageable);
            }
            
            log.info("‚úÖ Successfully retrieved {} loan applications", applications.getTotalElements());
            return ResponseEntity.ok(ResponseWrapper.success(applications));
            
        } catch (IllegalArgumentException e) {
            log.error("‚ùå Invalid status parameter: {}", status);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(ResponseWrapper.error("–ë—É—Ä—É—É —Å—Ç–∞—Ç—É—Å: " + status));
        } catch (Exception e) {
            log.error("‚ùå Error getting loan applications: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(ResponseWrapper.error("–ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: " + e.getMessage()));
        }
    }

    /**
     * –¢–æ–¥–æ—Ä—Ö–æ–π –∑—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç –∞–≤–∞—Ö
     * GET /api/v1/loan-applications/{id}
     */
    @GetMapping("/{id}")
    @Operation(summary = "–ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª", description = "ID-–≥–∞–∞—Ä –∑—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç–∏–π–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö")
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "–ê–º–∂–∏–ª—Ç—Ç–∞–π"),
        @ApiResponse(responseCode = "404", description = "–ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
    })
    //@PreAuthorize("hasAuthority('loan:view')")
    public ResponseEntity<ResponseWrapper<LoanApplicationDto>> getLoanApplication(
            @PathVariable @Parameter(description = "–ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç–∏–π–Ω ID") UUID id) {
        
        log.debug("üîç Getting loan application: {}", id);
        
        try {
            LoanApplicationDto application = loanApplicationService.getLoanApplicationById(id);
            log.info("‚úÖ Successfully retrieved loan application: {}", id);
            return ResponseEntity.ok(ResponseWrapper.success(application));
            
        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è Loan application not found: {}", id);
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                .body(ResponseWrapper.error("–ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π"));
        } catch (Exception e) {
            log.error("‚ùå Error getting loan application {}: {}", id, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(ResponseWrapper.error("–°–∏—Å—Ç–µ–º–∏–π–Ω –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞"));
        }
    }

    /**
     * –®–∏–Ω—ç –∑—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç “Ø“Ø—Å–≥—ç—Ö
     * POST /api/v1/loan-applications
     */
    @PostMapping
    @Operation(summary = "–®–∏–Ω—ç –∑—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç", description = "–®–∏–Ω—ç –∑—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç “Ø“Ø—Å–≥—ç—Ö")
    @ApiResponses({
        @ApiResponse(responseCode = "201", description = "–ê–º–∂–∏–ª—Ç—Ç–∞–π “Ø“Ø—Å–≥—ç–≥–¥—Å—ç–Ω"),
        @ApiResponse(responseCode = "400", description = "–ë—É—Ä—É—É –º—ç–¥—ç—ç–ª—ç–ª"),
        @ApiResponse(responseCode = "404", description = "–•–∞—Ä–∏–ª—Ü–∞–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π")
    })
    //@PreAuthorize("hasAuthority('loan:create')")
    public ResponseEntity<ResponseWrapper<LoanApplicationDto>> createLoanApplication(
            @Valid @RequestBody CreateLoanRequestDto loanRequest) {
        
        log.info("‚ûï Creating new loan application for customer: {}", loanRequest.getCustomerId());
        
        try {
            LoanApplicationDto createdApplication = loanApplicationService.createLoanApplication(loanRequest);
            log.info("‚úÖ Loan application created successfully: {}", createdApplication.getId());
            
            return ResponseEntity.status(HttpStatus.CREATED)
                .body(ResponseWrapper.success(createdApplication, "–ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç –∞–º–∂–∏–ª—Ç—Ç–∞–π “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç"));
                
        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è Business validation error: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(ResponseWrapper.error(e.getMessage()));
        } catch (Exception e) {
            log.error("‚ùå Error creating loan application: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(ResponseWrapper.error("–ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞"));
        }
    }

    /**
     * –ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç–∏–π–Ω —Å—Ç–∞—Ç—É—Å —à–∏–Ω—ç—á–ª—ç—Ö
     * PUT /api/v1/loan-applications/{id}/status
     */
    @PutMapping("/{id}/status")
    @Operation(summary = "–°—Ç–∞—Ç—É—Å —à–∏–Ω—ç—á–ª—ç—Ö", description = "–ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç–∏–π–Ω —Å—Ç–∞—Ç—É—Å —à–∏–Ω—ç—á–ª—ç—Ö")
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "–ê–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–ª—ç–≥–¥—Å—ç–Ω"),
        @ApiResponse(responseCode = "404", description = "–ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π"),
        @ApiResponse(responseCode = "400", description = "–ë—É—Ä—É—É —Å—Ç–∞—Ç—É—Å")
    })
    //@PreAuthorize("hasAuthority('loan:update')")
    public ResponseEntity<ResponseWrapper<LoanApplicationDto>> updateStatus(
            @PathVariable @Parameter(description = "–ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç–∏–π–Ω ID") UUID id,
            @RequestParam @Parameter(description = "–®–∏–Ω—ç —Å—Ç–∞—Ç—É—Å") String status,
            @RequestParam(required = false) @Parameter(description = "–¢–∞–π–ª–±–∞—Ä") String comment) {
        
        log.info("üìä Updating loan application status: {} -> {}", id, status);
        
        try {
            // String-—ç—ç—Å LoanStatus enum —Ä—É—É —Ö”©—Ä–≤“Ø“Ø–ª—ç—Ö
            LoanStatus loanStatus = LoanStatus.valueOf(status.toUpperCase());
            LoanApplicationDto updatedApplication = loanApplicationService.updateLoanApplicationStatus(id, loanStatus);
            log.info("‚úÖ Loan application status updated: {}", id);
            
            return ResponseEntity.ok(ResponseWrapper.success(updatedApplication, "–°—Ç–∞—Ç—É—Å –∞–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç"));
            
        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è Loan application not found or invalid status: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(ResponseWrapper.error(e.getMessage()));
        } catch (Exception e) {
            log.error("‚ùå Error updating loan application status {}: {}", id, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(ResponseWrapper.error("–°—Ç–∞—Ç—É—Å —à–∏–Ω—ç—á–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞"));
        }
    }

    /**
     * –ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç –∑”©–≤—à”©”©—Ä”©—Ö
     * PUT /api/v1/loan-applications/{id}/approve
     */
    @PutMapping("/{id}/approve")
    @Operation(summary = "–ó—ç—ç–ª –∑”©–≤—à”©”©—Ä”©—Ö", description = "–ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ –∑”©–≤—à”©”©—Ä”©—Ö")
    //@PreAuthorize("hasAuthority('loan:approve')")
    public ResponseEntity<ResponseWrapper<LoanApplicationDto>> approveLoan(
            @PathVariable UUID id,
            @RequestParam(required = false) String comment,
            @RequestParam(required = false) Double approvedAmount) {
        
        log.info("‚úÖ Approving loan application: {}", id);
        
        try {
            // BigDecimal —Ä—É—É —Ö”©—Ä–≤“Ø“Ø–ª—ç—Ö, —Ö—ç—Ä—ç–≤ approvedAmount null –±–æ–ª –∞–Ω—Ö–Ω—ã –¥“Ø–Ω–≥ –∞—à–∏–≥–ª–∞–Ω–∞
            BigDecimal amount = approvedAmount != null ? BigDecimal.valueOf(approvedAmount) : null;
            LoanApplicationDto approvedApplication = loanApplicationService.approveLoanApplication(
                id, amount, null, null, comment != null ? comment : "–ó—ç—ç–ª –∑”©–≤—à”©”©—Ä”©–≥–¥–ª”©”©");
            log.info("‚úÖ Loan application approved: {}", id);
            
            return ResponseEntity.ok(ResponseWrapper.success(approvedApplication, "–ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç –∑”©–≤—à”©”©—Ä”©–≥–¥–ª”©”©"));
            
        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è Cannot approve loan application: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(ResponseWrapper.error(e.getMessage()));
        } catch (Exception e) {
            log.error("‚ùå Error approving loan application {}: {}", id, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(ResponseWrapper.error("–ó—ç—ç–ª –∑”©–≤—à”©”©—Ä”©—Ö”©–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞"));
        }
    }

    /**
     * –ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç —Ç–∞—Ç–≥–∞–ª–∑–∞—Ö
     * PUT /api/v1/loan-applications/{id}/reject
     */
    @PutMapping("/{id}/reject")
    @Operation(summary = "–ó—ç—ç–ª —Ç–∞—Ç–≥–∞–ª–∑–∞—Ö", description = "–ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç–∏–π–≥ —Ç–∞—Ç–≥–∞–ª–∑–∞—Ö")
    //@PreAuthorize("hasAuthority('loan:approve')")
    public ResponseEntity<ResponseWrapper<LoanApplicationDto>> rejectLoan(
            @PathVariable UUID id,
            @RequestParam String reason) {
        
        log.info("‚ùå Rejecting loan application: {}", id);
        
        try {
            LoanApplicationDto rejectedApplication = loanApplicationService.rejectLoanApplication(id, reason);
            log.info("‚ùå Loan application rejected: {}", id);
            
            return ResponseEntity.ok(ResponseWrapper.success(rejectedApplication, "–ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç —Ç–∞—Ç–≥–∞–ª–∑–∞–≥–¥–ª–∞–∞"));
            
        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è Cannot reject loan application: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(ResponseWrapper.error(e.getMessage()));
        } catch (Exception e) {
            log.error("‚ùå Error rejecting loan application {}: {}", id, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(ResponseWrapper.error("–ó—ç—ç–ª —Ç–∞—Ç–≥–∞–ª–∑–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞"));
        }
    }

    /**
     * –•–∞—Ä–∏–ª—Ü–∞–≥—á–∏–π–Ω –∑—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç“Ø“Ø–¥
     * GET /api/v1/loan-applications/customer/{customerId}
     */
    @GetMapping("/customer/{customerId}")
    @Operation(summary = "–•–∞—Ä–∏–ª—Ü–∞–≥—á–∏–π–Ω –∑—ç—ç–ª“Ø“Ø–¥", description = "–¢–æ–¥–æ—Ä—Ö–æ–π —Ö–∞—Ä–∏–ª—Ü–∞–≥—á–∏–π–Ω –±“Ø—Ö –∑—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç")
    //@PreAuthorize("hasAuthority('loan:view')")
    public ResponseEntity<ResponseWrapper<Page<LoanApplicationDto>>> getLoanApplicationsByCustomer(
            @PathVariable @Parameter(description = "–•–∞—Ä–∏–ª—Ü–∞–≥—á–∏–π–Ω ID") UUID customerId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size) {
        
        log.debug("üìã Getting loan applications for customer: {}", customerId);
        
        try {
            Pageable pageable = PageRequest.of(page, size);
            Page<LoanApplicationDto> applications = loanApplicationService.getLoanApplicationsByCustomer(customerId, pageable);
            
            return ResponseEntity.ok(ResponseWrapper.success(applications));
        } catch (Exception e) {
            log.error("‚ùå Error getting loan applications for customer {}: {}", customerId, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(ResponseWrapper.error("–•–∞—Ä–∏–ª—Ü–∞–≥—á–∏–π–Ω –∑—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞"));
        }
    }

    /**
     * –ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç–∏–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
     * GET /api/v1/loan-applications/statistics
     */
    @GetMapping("/statistics")
    @Operation(summary = "–ó—ç—ç–ª–∏–π–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫", description = "–ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç–∏–π–Ω –µ—Ä”©–Ω—Ö–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫")
    //@PreAuthorize("hasAuthority('loan:view')")
    public ResponseEntity<ResponseWrapper<Map<String, Object>>> getStatistics() {
        log.debug("üìä Getting loan application statistics");
        
        try {
            Map<String, Object> statistics = loanApplicationService.getLoanApplicationStatistics();
            return ResponseEntity.ok(ResponseWrapper.success(statistics));
        } catch (Exception e) {
            log.error("‚ùå Error getting loan statistics: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(ResponseWrapper.error("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫ –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞"));
        }
    }

    /**
     * –ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç —Ö–∞–π—Ö
     * GET /api/v1/loan-applications/search
     */
    @GetMapping("/search")
    @Operation(summary = "–ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç —Ö–∞–π—Ö", description = "”®–≥”©–≥–¥—Å”©–Ω —Ö–∞–π–ª—Ç—ã–Ω “Ø–≥—ç—ç—Ä –∑—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç —Ö–∞–π—Ö")
    //@PreAuthorize("hasAuthority('loan:view')")
    public ResponseEntity<ResponseWrapper<Page<LoanApplicationDto>>> searchLoanApplications(
            @RequestParam(required = false) String q,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size) {
        
        log.debug("üîç Searching loan applications with query: {}", q);
        
        try {
            Pageable pageable = PageRequest.of(page, size);
            Page<LoanApplicationDto> applications;
            
            if (q == null || q.trim().isEmpty()) {
                applications = loanApplicationService.getAllLoanApplications(pageable);
            } else {
                applications = loanApplicationService.searchLoanApplications(q.trim(), pageable);
            }
            
            return ResponseEntity.ok(ResponseWrapper.success(applications));
        } catch (Exception e) {
            log.error("‚ùå Error searching loan applications: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(ResponseWrapper.error("–ó—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç —Ö–∞–π—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞"));
        }
    }

    /**
     * –ó—ç—ç–ª–∏–π–Ω –¥“Ø–Ω —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö
     * POST /api/v1/loan-applications/calculate
     */
    @PostMapping("/calculate")
    @Operation(summary = "–ó—ç—ç–ª–∏–π–Ω —Ç–æ–æ—Ü–æ–æ", description = "–ó—ç—ç–ª–∏–π–Ω —Å–∞—Ä—ã–Ω —Ç”©–ª–±”©—Ä –±–æ–ª–æ–Ω –Ω–∏–π—Ç –¥“Ø–Ω —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö")
    public ResponseEntity<ResponseWrapper<Map<String, Object>>> calculateLoan(
            @RequestParam @Parameter(description = "–ó—ç—ç–ª–∏–π–Ω –¥“Ø–Ω") Double amount,
            @RequestParam @Parameter(description = "–•—É–≥–∞—Ü–∞–∞ (—Å–∞—Ä)") Integer termInMonths,
            @RequestParam(required = false, defaultValue = "12.0") @Parameter(description = "–•“Ø“Ø–≥–∏–π–Ω —Ö—É–≤—å") Double interestRate) {
        
        log.debug("üßÆ Calculating loan: amount={}, term={}, rate={}", amount, termInMonths, interestRate);
        
        try {
            // BigDecimal —Ä—É—É —Ö”©—Ä–≤“Ø“Ø–ª—ç—Ö
            BigDecimal principal = BigDecimal.valueOf(amount);
            BigDecimal rate = BigDecimal.valueOf(interestRate / 100); // –•—É–≤–∏–∞—Å decimal —Ä—É—É
            
            // –¢–æ–æ—Ü–æ–æ–ª–æ–ª —Ö–∏–π—Ö
            BigDecimal monthlyPayment = loanApplicationService.calculateMonthlyPayment(principal, termInMonths, rate);
            BigDecimal totalPayment = loanApplicationService.calculateTotalPayment(principal, termInMonths, rate);
            BigDecimal totalInterest = loanApplicationService.calculateTotalInterest(principal, termInMonths, rate);
            
            // –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–π–Ω —Ö“Ø—Å–Ω—ç–≥—Ç “Ø“Ø—Å–≥—ç—Ö
            List<Map<String, Object>> schedule = loanApplicationService.generateAmortizationSchedule(principal, termInMonths, rate);
            
            // “Æ—Ä –¥“Ø–Ω–≥ Map-–¥ —Ö—É–≤–∞–∞–ª—Ü–∞—Ö
            Map<String, Object> calculation = new HashMap<>();
            calculation.put("principal", amount);
            calculation.put("termInMonths", termInMonths);
            calculation.put("interestRate", interestRate);
            calculation.put("monthlyPayment", monthlyPayment);
            calculation.put("totalPayment", totalPayment);
            calculation.put("totalInterest", totalInterest);
            calculation.put("amortizationSchedule", schedule);
            
            return ResponseEntity.ok(ResponseWrapper.success(calculation));
        } catch (Exception e) {
            log.error("‚ùå Error calculating loan: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(ResponseWrapper.error("–ó—ç—ç–ª–∏–π–Ω —Ç–æ–æ—Ü–æ–æ —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞"));
        }
    }

    /**
     * API —Ö–∞—Ä–∏—É wrapper –∫–ª–∞—Å—Å
     * Swagger-–∏–π–Ω ApiResponse-—Ç–∞–π –∑”©—Ä—á–ª”©”©—Å –∑–∞–π–ª—Å—Ö–∏–π—Ö–∏–π–Ω —Ç—É–ª–¥ ResponseWrapper –≥—ç–∂ –Ω—ç—Ä–ª—ç–≤
     */
    public static class ResponseWrapper<T> {
        private boolean success;
        private T data;
        private String message;
        private String error;
        private Map<String, Object> meta;
        private long timestamp;

        public ResponseWrapper() {
            this.timestamp = System.currentTimeMillis();
        }

        public ResponseWrapper(boolean success, T data, String message) {
            this();
            this.success = success;
            this.data = data;
            this.message = message;
        }

        public static <T> ResponseWrapper<T> success(T data) {
            return new ResponseWrapper<>(true, data, null);
        }

        public static <T> ResponseWrapper<T> success(T data, String message) {
            return new ResponseWrapper<>(true, data, message);
        }

        public static <T> ResponseWrapper<T> error(String error) {
            ResponseWrapper<T> response = new ResponseWrapper<>();
            response.success = false;
            response.error = error;
            return response;
        }

        public static <T> ResponseWrapper<T> error(String error, Map<String, Object> meta) {
            ResponseWrapper<T> response = error(error);
            response.meta = meta;
            return response;
        }

        // Getters and setters
        public boolean isSuccess() { return success; }
        public void setSuccess(boolean success) { this.success = success; }

        public T getData() { return data; }
        public void setData(T data) { this.data = data; }

        public String getMessage() { return message; }
        public void setMessage(String message) { this.message = message; }

        public String getError() { return error; }
        public void setError(String error) { this.error = error; }

        public Map<String, Object> getMeta() { return meta; }
        public void setMeta(Map<String, Object> meta) { this.meta = meta; }

        public long getTimestamp() { return timestamp; }
        public void setTimestamp(long timestamp) { this.timestamp = timestamp; }
    }
}