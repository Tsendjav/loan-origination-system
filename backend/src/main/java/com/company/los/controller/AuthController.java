package com.company.los.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

/**
 * ‚≠ê AUTH CONTROLLER - API AUTHENTICATION ‚≠ê
 * - /api/v1/auth/login endpoint
 * - /api/v1/auth/logout endpoint
 * - /api/v1/auth/me endpoint
 * - CORS —Ç–æ—Ö–∏—Ä–≥–æ–æ—Ç–æ–π
 * - SecurityConfig-—Ç–∞–π —É—è–ª–¥–∞–∞—Ç–∞–π
 */
@RestController
@RequestMapping("/api/v1/auth")
@CrossOrigin(origins = {"http://localhost:3001", "http://localhost:3000"})
public class AuthController {

    @Autowired
    private PasswordEncoder passwordEncoder;

    /**
     * API Login endpoint
     * POST /api/v1/auth/login
     */
    @PostMapping("/login")
    public ResponseEntity<Map<String, Object>> login(@RequestBody Map<String, String> credentials) {
        String username = credentials.get("username");
        String password = credentials.get("password");
        
        System.out.println("üîê API Login attempt: " + username);
        
        // –•”©–≥–∂“Ø“Ø–ª—ç–ª—Ç–∏–π–Ω –∑–æ—Ä–∏—É–ª–∞–ª—Ç–∞–∞—Ä —ç–Ω–≥–∏–π–Ω —à–∞–ª–≥–∞–ª—Ç
        // –ü—Ä–æ–¥–∞–∫—à–Ω –¥—ç—ç—Ä UserDetailsService –∞—à–∏–≥–ª–∞—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π
        // isValidUser —Ñ—É–Ω–∫—Ü—ç–¥ LoginRequest –æ–±—ä–µ–∫—Ç –¥–∞–º–∂—É—É–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ —Ç“Ø—Ä –∑—É—É—Ä—ã–Ω LoginRequest “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞.
        // –•—ç—Ä—ç–≤ —Ç–∞ LoginRequest –∫–ª–∞—Å—Å—ã–≥ “Ø“Ø—Å–≥—ç—ç–≥“Ø–π –±–æ–ª —ç–Ω—ç —Ö—ç—Å–≥–∏–π–≥ ”©”©—Ä—á–ª”©—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π.
        LoginRequest loginRequest = new LoginRequest(username, password); // LoginRequest –∫–ª–∞—Å—Å –±–∞–π—Ö–≥“Ø–π –±–æ–ª “Ø“Ø—Å–≥—ç—Ö —ç—Å–≤—ç–ª —à—É—É–¥ username, password –¥–∞–º–∂—É—É–ª–∞—Ö
        if (isValidUser(loginRequest)) { // isValidUser —Ñ—É–Ω–∫—Ü—ç–¥ LoginRequest –æ–±—ä–µ–∫—Ç –¥–∞–º–∂—É—É–ª–∂ –±–∞–π–Ω–∞
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("token", "dummy-jwt-token-" + System.currentTimeMillis());
            response.put("user", createUserInfo(username));
            
            System.out.println("‚úÖ API Login successful: " + username);
            return ResponseEntity.ok(response);
        } else {
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "–ù—ç–≤—Ç—Ä—ç—Ö –Ω—ç—Ä —ç—Å–≤—ç–ª –Ω—É—É—Ü “Ø–≥ –±—É—Ä—É—É");
            
            System.out.println("‚ùå API Login failed: " + username);
            return ResponseEntity.status(401).body(errorResponse);
        }
    }

    /**
     * API Logout endpoint
     * POST /api/v1/auth/logout
     */
    @PostMapping("/logout")
    public ResponseEntity<Map<String, Object>> logout() {
        System.out.println("üö™ API Logout");
        
        Map<String, Object> response = new HashMap<>();
        response.put("success", true);
        response.put("message", "–ê–º–∂–∏–ª—Ç—Ç–∞–π –≥–∞—Ä–ª–∞–∞");
        return ResponseEntity.ok(response);
    }

    /**
     * Current user –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
     * GET /api/v1/auth/me
     */
    @GetMapping("/me")
    public ResponseEntity<Map<String, Object>> getCurrentUser() {
        // –ü—Ä–æ–¥–∞–∫—à–Ω –¥—ç—ç—Ä JWT token-–æ–æ—Å user –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π
        // –û–¥–æ–æ —Ö”©–≥–∂“Ø“Ø–ª—ç–ª—Ç–∏–π–Ω –∑–æ—Ä–∏—É–ª–∞–ª—Ç–∞–∞—Ä default user –±—É—Ü–∞–∞–Ω–∞
        Map<String, Object> user = createUserInfo("admin");
        return ResponseEntity.ok(user);
    }

    /**
     * User —à–∞–ª–≥–∞—Ö - —Ö”©–≥–∂“Ø“Ø–ª—ç–ª—Ç–∏–π–Ω –∑–æ—Ä–∏—É–ª–∞–ª—Ç
     * –ü—Ä–æ–¥–∞–∫—à–Ω –¥—ç—ç—Ä UserDetailsService –∞—à–∏–≥–ª–∞–Ω–∞
     */
    private boolean isValidUser(LoginRequest request) { // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–π–≥ LoginRequest –±–æ–ª–≥–æ–Ω ”©”©—Ä—á–∏–ª—Å”©–Ω
        // NULL CHECK –Ω—ç–º—ç—Ö
        if (request == null || request.getUsername() == null || request.getPassword() == null) {
            return false;
        }
        
        // data.sql —Ñ–∞–π–ª—Ç–∞–π —Ç–æ—Ö–∏—Ä—Å–æ–Ω credentials
        Map<String, String> defaultUsers = Map.of( // validUsers-–∏–π–≥ defaultUsers –±–æ–ª–≥–æ–Ω ”©”©—Ä—á–∏–ª—Å”©–Ω
            "admin", "admin123",
            "loan_officer", "loan123", 
            "manager", "manager123"
        );
        
        return defaultUsers.containsKey(request.getUsername()) && 
               defaultUsers.get(request.getUsername()).equals(request.getPassword());
    }

    /**
     * User –º—ç–¥—ç—ç–ª—ç–ª “Ø“Ø—Å–≥—ç—Ö
     */
    private Map<String, Object> createUserInfo(String username) {
        Map<String, Object> user = new HashMap<>();
        
        switch (username) {
            case "admin":
                user.put("id", "1");
                user.put("username", "admin");
                user.put("role", "SUPER_ADMIN");
                user.put("name", "–ê–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á");
                break;
            case "loan_officer":
                user.put("id", "2");
                user.put("username", "loan_officer");
                user.put("role", "LOAN_OFFICER");
                user.put("name", "–ó—ç—ç–ª–∏–π–Ω –∞–∂–∏–ª—Ç–∞–Ω");
                break;
            case "manager":
                user.put("id", "3");
                user.put("username", "manager");
                user.put("role", "MANAGER");
                user.put("name", "–ú–µ–Ω–µ–∂–µ—Ä");
                break;
            default:
                user.put("id", "1");
                user.put("username", "admin");
                user.put("role", "SUPER_ADMIN");
                user.put("name", "–ê–¥–º–∏–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á");
        }
        
        return user;
    }

    // LoginRequest –∫–ª–∞—Å—Å—ã–≥ –Ω—ç–º—Å—ç–Ω, —Ö—ç—Ä—ç–≤ —Ç–∞–Ω–¥ –∏–π–º –∫–ª–∞—Å—Å –±–∞–π—Ö–≥“Ø–π –±–æ–ª
    // —ç—Å–≤—ç–ª —Ç–∞–Ω—ã —Ç”©—Å”©–ª–¥ ”©”©—Ä –≥–∞–∑–∞—Ä —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ–≥–¥—Å–æ–Ω –±–æ–ª “Ø“Ø–Ω–∏–π–≥ —Ö–∞—Å–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π.
    public static class LoginRequest {
        private String username;
        private String password;

        public LoginRequest(String username, String password) {
            this.username = username;
            this.password = password;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }
    }
}
