package com.company.los.controller;

import com.company.los.dto.AuthResponseDto;
import com.company.los.dto.LoginRequestDto;
import com.company.los.entity.User;
import com.company.los.service.AuthService;
import com.company.los.util.LogUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

/**
 * ‚≠ê –≠–¶–°–ò–ô–ù –°–ê–ô–ñ–†–£–£–õ–°–ê–ù Authentication Controller ‚≠ê
 * 
 * –°–ê–ô–ñ–†–£–£–õ–ê–õ–¢–£–£–î:
 * ‚úÖ JSON deserialization –∑–∞—Å–≤–∞—Ä–ª–∞—Å–∞–Ω (@RequestBody –Ω—ç–º—ç–≥–¥—Å—ç–Ω)
 * ‚úÖ Null check —Å–∞–π–∂—Ä—É—É–ª—Å–∞–Ω  
 * ‚úÖ Validation messages —Ç–æ–¥–æ—Ä—Ö–æ–π –±–æ–ª–≥–æ—Å–æ–Ω
 * ‚úÖ Character encoding –∞–ª–¥–∞–∞ –∑–∞—Å–≤–∞—Ä–ª–∞—Å–∞–Ω
 * ‚úÖ –õ–æ–≥–ª–∞–ª—Ç —Å–∞–π–∂—Ä—É—É–ª—Å–∞–Ω (emoji –±–æ–ª–æ–Ω LogUtil)
 * ‚úÖ IP address tracking –Ω—ç–º—ç–≥–¥—Å—ç–Ω
 * ‚úÖ Error handling —Å–∞–π–∂—Ä—É—É–ª—Å–∞–Ω
 * ‚úÖ –ë“Ø—Ö endpoint-—É—É–¥—ã–≥ —Ö–∞–¥–≥–∞–ª—Å–∞–Ω
 *
 * @author LOS Development Team  
 * @version 5.0 - FINAL IMPROVED VERSION
 * @since 2025-08-06
 */
@RestController
@RequestMapping("/api/v1/auth")
@RequiredArgsConstructor
@Tag(name = "Authentication", description = "–ù—ç–≤—Ç—Ä—ç–ª—Ç–∏–π–Ω API")
@CrossOrigin(origins = {"http://localhost:3001", "http://localhost:3000", "http://127.0.0.1:3001", "http://127.0.0.1:3000"})
public class AuthController {

    private static final Logger log = LoggerFactory.getLogger(AuthController.class);
    private final AuthService authService;

    /**
     * ‚≠ê –≠–¶–°–ò–ô–ù –°–ê–ô–ñ–†–£–£–õ–°–ê–ù LOGIN METHOD ‚≠ê
     * JSON deserialization, validation –±–æ–ª–æ–Ω error handling —Å–∞–π–∂—Ä—É—É–ª—Å–∞–Ω
     */
    @PostMapping(value = "/login", produces = "application/json;charset=UTF-8")
    @Operation(summary = "–°–∏—Å—Ç–µ–º–¥ –Ω—ç–≤—Ç—Ä—ç—Ö", description = "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä –±–æ–ª–æ–Ω –Ω—É—É—Ü “Ø–≥—ç—ç—Ä –Ω—ç–≤—Ç—Ä—ç—Ö")
    public ResponseEntity<Map<String, Object>> login(
            @Valid @RequestBody LoginRequestDto loginRequest, // ‚≠ê @RequestBody –ù–≠–ú–≠–ì–î–°–≠–ù! ‚≠ê
            HttpServletRequest request) {
        
        try {
            // ‚≠ê IMPROVED NULL CHECK ‚≠ê
            if (loginRequest == null) {
                log.error("‚ùå LoginRequestDto null –±–∞–π–Ω–∞ - JSON deserialization –∞–ª–¥–∞–∞");
                return createErrorResponse("Login –º—ç–¥—ç—ç–ª—ç–ª —Ö“Ø–ª—ç—ç–Ω –∞–≤—á —á–∞–¥—Å–∞–Ω–≥“Ø–π", HttpStatus.BAD_REQUEST);
            }

            // ‚≠ê DEBUG –ú–≠–î–≠–≠–õ–≠–õ ‚≠ê
            log.info("üîê Login —Ö“Ø—Å—ç–ª—Ç —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞ - Raw data debug:");
            log.info("   Username: [{}]", loginRequest.getUsername() != null ? LogUtil.maskSensitiveData(loginRequest.getUsername()) : "NULL");
            log.info("   Password: [{}]", loginRequest.getPassword() != null ? "PROVIDED" : "NULL");
            
            // ‚≠ê USERNAME VALIDATION –°–ê–ô–ñ–†–£–£–õ–°–ê–ù ‚≠ê
            if (loginRequest.getUsername() == null) {
                log.warn("‚ö†Ô∏è Username field –Ω—å null –±–∞–π–Ω–∞");
                return createValidationErrorResponse("username", "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä –∑–∞–∞–≤–∞–ª –æ—Ä—É—É–ª–Ω–∞ —É—É");
            }
            
            if (loginRequest.getUsername().trim().isEmpty()) {
                log.warn("‚ö†Ô∏è Username —Ö–æ–æ—Å–æ–Ω string –±–∞–π–Ω–∞");
                return createValidationErrorResponse("username", "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä —Ö–æ–æ—Å–æ–Ω –±–∞–π–∂ –±–æ–ª–æ—Ö–≥“Ø–π");
            }

            // ‚≠ê PASSWORD VALIDATION –°–ê–ô–ñ–†–£–£–õ–°–ê–ù ‚≠ê  
            if (loginRequest.getPassword() == null) {
                log.warn("‚ö†Ô∏è Password field –Ω—å null –±–∞–π–Ω–∞");
                return createValidationErrorResponse("password", "–ù—É—É—Ü “Ø–≥ –∑–∞–∞–≤–∞–ª –æ—Ä—É—É–ª–Ω–∞ —É—É");
            }
            
            if (loginRequest.getPassword().trim().isEmpty()) {
                log.warn("‚ö†Ô∏è Password —Ö–æ–æ—Å–æ–Ω string –±–∞–π–Ω–∞");
                return createValidationErrorResponse("password", "–ù—É—É—Ü “Ø–≥ —Ö–æ–æ—Å–æ–Ω –±–∞–π–∂ –±–æ–ª–æ—Ö–≥“Ø–π");
            }

            // ‚≠ê INPUT SANITIZATION ‚≠ê
            loginRequest.sanitizeInputs();
            loginRequest.normalizeUsername();
            loginRequest.ensureTimestamp();
            loginRequest.ensurePlatform();

            // ‚≠ê VALIDATION ‚≠ê
            String validationError = LoginRequestDto.Validator.validateLoginRequest(loginRequest);
            if (validationError != null) {
                log.warn("‚ö†Ô∏è Validation –∞–ª–¥–∞–∞: {} - {}", LogUtil.maskSensitiveData(loginRequest.getUsername()), validationError);
                return createErrorResponse(validationError, HttpStatus.BAD_REQUEST);
            }

            // ‚≠ê ADDITIONAL VALIDATION CHECK ‚≠ê
            if (!loginRequest.isValid()) {
                String customError = loginRequest.getValidationError();
                log.warn("‚ö†Ô∏è Custom validation –∞–ª–¥–∞–∞: {} - {}", LogUtil.maskSensitiveData(loginRequest.getUsername()), customError);
                return createErrorResponse(customError != null ? customError : "–ù—ç–≤—Ç—Ä—ç—Ö –º—ç–¥—ç—ç–ª—ç–ª –±—É—Ä—É—É –±–∞–π–Ω–∞", HttpStatus.BAD_REQUEST);
            }

            // ‚≠ê IP ADDRESS –ú–≠–î–≠–≠–õ–≠–õ –ù–≠–ú–≠–• ‚≠ê
            String clientIp = getClientIpAddress(request);
            loginRequest.setIpAddress(clientIp);
            loginRequest.setUserAgent(request.getHeader("User-Agent"));

            log.info("‚úÖ Validation –∞–º–∂–∏–ª—Ç—Ç–∞–π: {} –æ—Ä–æ–ª–¥–æ–∂ –±–∞–π–Ω–∞", LogUtil.maskSensitiveData(loginRequest.getUsername()));
            
            // ‚≠ê AUTHENTICATION SERVICE-–≠–≠–† –ù–≠–í–¢–†–≠–• ‚≠ê
            AuthResponseDto response = authService.login(loginRequest);
            
            if (response == null) {
                log.error("‚ùå AuthService null response –±—É—Ü–∞–∞–ª–∞–∞");
                return createErrorResponse("–ù—ç–≤—Ç—Ä—ç—Ö “Ø–π–ª–¥—ç–ª–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞", HttpStatus.INTERNAL_SERVER_ERROR);
            }
            
            if (response.isSuccess()) {
                log.info("‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–≤—Ç—ç—Ä–ª—ç–≤: {}", LogUtil.maskSensitiveData(loginRequest.getUsername()));
                
                // ‚≠ê SUCCESS RESPONSE UTF-8 –¢–≠–ú–î–≠–ì–õ–≠–õ ‚≠ê
                Map<String, Object> successResponse = new HashMap<>();
                successResponse.put("success", true);
                successResponse.put("message", "–ê–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–≤—Ç—ç—Ä–ª—ç—ç");
                successResponse.put("token", response.getToken());
                successResponse.put("refreshToken", response.getRefreshToken());
                successResponse.put("tokenType", response.getTokenType());
                successResponse.put("expiresIn", response.getExpiresIn());
                
                // User –º—ç–¥—ç—ç–ª—ç–ª
                Map<String, Object> userInfo = new HashMap<>();
                userInfo.put("id", response.getUserId());
                userInfo.put("username", response.getUsername());
                userInfo.put("email", response.getEmail());
                userInfo.put("fullName", response.getFullName());
                userInfo.put("roles", response.getRoles());
                successResponse.put("user", userInfo);
                
                successResponse.put("timestamp", System.currentTimeMillis());
                
                return ResponseEntity.ok()
                        .header("Content-Type", "application/json;charset=UTF-8")
                        .body(successResponse);
            } else {
                log.warn("‚ö†Ô∏è –ù—ç–≤—Ç—Ä—ç—Ö –∞–º–∂–∏–ª—Ç–≥“Ø–π: {} - {}", 
                    LogUtil.maskSensitiveData(loginRequest.getUsername()), response.getMessage());
                
                return createErrorResponse(
                    response.getMessage() != null ? response.getMessage() : "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä —ç—Å–≤—ç–ª –Ω—É—É—Ü “Ø–≥ –±—É—Ä—É—É –±–∞–π–Ω–∞", 
                    HttpStatus.UNAUTHORIZED
                );
            }
            
        } catch (IllegalArgumentException e) {
            log.warn("‚ö†Ô∏è Login –ø–∞—Ä–∞–º–µ—Ç—Ä –∞–ª–¥–∞–∞: {} - {}", 
                loginRequest != null ? LogUtil.maskSensitiveData(loginRequest.getUsername()) : "null", e.getMessage());
            return createErrorResponse(e.getMessage(), HttpStatus.BAD_REQUEST);
            
        } catch (Exception e) {
            log.error("‚ùå Login —Å–∏—Å—Ç–µ–º–∏–π–Ω –∞–ª–¥–∞–∞: {} - {}", 
                loginRequest != null ? LogUtil.maskSensitiveData(loginRequest.getUsername()) : "null", e.getMessage(), e);
            
            return createErrorResponse("–ù—ç–≤—Ç—Ä—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * ‚≠ê –°–ê–ô–ñ–†–£–£–õ–°–ê–ù: –•—ç—Ä—ç–≥–ª—ç–≥—á –≥–∞—Ä–∞—Ö ‚≠ê
     */
    @PostMapping(value = "/logout", produces = "application/json;charset=UTF-8")
    @Operation(summary = "–°–∏—Å—Ç–µ–º—ç—ç—Å –≥–∞—Ä–∞—Ö")
    public ResponseEntity<Map<String, Object>> logout(HttpServletRequest request) {
        try {
            log.info("üö™ Logout —Ö“Ø—Å—ç–ª—Ç —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞");
            
            String authHeader = request.getHeader("Authorization");
            if (authHeader != null && authHeader.startsWith("Bearer ")) {
                String jwtToken = authHeader.substring(7);
                boolean success = authService.logoutUser(jwtToken);
                
                if (success) {
                    log.info("‚úÖ –•—ç—Ä—ç–≥–ª—ç–≥—á –∞–º–∂–∏–ª—Ç—Ç–∞–π –≥–∞—Ä–ª–∞–∞");
                } else {
                    log.warn("‚ö†Ô∏è Logout –∞–º–∂–∏–ª—Ç–≥“Ø–π –±–æ–ª–ª–æ–æ");
                }
            }
            
            return createSuccessResponse("–ê–º–∂–∏–ª—Ç—Ç–∞–π –≥–∞—Ä–ª–∞–∞");
            
        } catch (Exception e) {
            log.error("‚ùå Logout –∞–ª–¥–∞–∞: {}", e.getMessage());
            return createErrorResponse("–°–∏—Å—Ç–µ–º—ç—ç—Å –≥–∞—Ä–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * ‚≠ê –°–ê–ô–ñ–†–£–£–õ–°–ê–ù: –û–¥–æ–æ–≥–∏–π–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö ‚≠ê
     */
    @GetMapping(value = "/me", produces = "application/json;charset=UTF-8")
    @Operation(summary = "–û–¥–æ–æ–≥–∏–π–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª")
    public ResponseEntity<Map<String, Object>> getCurrentUser(HttpServletRequest request) {
        try {
            String authHeader = request.getHeader("Authorization");
            if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                return createErrorResponse("Token –±–∞–π—Ö–≥“Ø–π", HttpStatus.UNAUTHORIZED);
            }

            String jwtToken = authHeader.substring(7);
            
            if (!authService.validateJwtToken(jwtToken)) {
                return createErrorResponse("Token —Ö“Ø—á–∏–Ω–≥“Ø–π –±–∞–π–Ω–∞", HttpStatus.UNAUTHORIZED);
            }
            
            Optional<User> userOpt = authService.getCurrentUser(jwtToken);
            
            if (userOpt.isPresent()) {
                User user = userOpt.get();
                Map<String, Object> userInfo = new HashMap<>();
                userInfo.put("success", true);
                userInfo.put("id", user.getId());
                userInfo.put("username", user.getUsername());
                userInfo.put("email", user.getEmail());
                userInfo.put("fullName", user.getFirstName() + " " + user.getLastName());
                userInfo.put("roles", user.getRoles());
                userInfo.put("isActive", user.getIsActive());
                userInfo.put("lastLoginAt", user.getLastLoginAt());
                userInfo.put("timestamp", System.currentTimeMillis());
                
                return ResponseEntity.ok()
                        .header("Content-Type", "application/json;charset=UTF-8")
                        .body(userInfo);
            } else {
                return createErrorResponse("–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π —ç—Å–≤—ç–ª token —Ö“Ø—á–∏–Ω–≥“Ø–π", HttpStatus.UNAUTHORIZED);
            }
            
        } catch (Exception e) {
            log.error("‚ùå –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö –∞–ª–¥–∞–∞: {}", e.getMessage());
            return createErrorResponse("–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π", HttpStatus.UNAUTHORIZED);
        }
    }

    /**
     * ‚≠ê –°–ê–ô–ñ–†–£–£–õ–°–ê–ù: Token —Å—ç—Ä–≥—ç—ç—Ö ‚≠ê
     */
    @PostMapping(value = "/refresh", produces = "application/json;charset=UTF-8")
    @Operation(summary = "Token —Å—ç—Ä–≥—ç—ç—Ö", description = "Refresh token –∞—à–∏–≥–ª–∞–Ω —à–∏–Ω—ç access token –∞–≤–∞—Ö")
    public ResponseEntity<Map<String, Object>> refreshToken(@RequestBody(required = false) Map<String, String> request) {
        try {
            if (request == null) {
                return createErrorResponse("Refresh token —Ö“Ø—Å—ç–ª—Ç –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞", HttpStatus.BAD_REQUEST);
            }
            
            String refreshToken = request.get("refreshToken");
            if (refreshToken == null || refreshToken.trim().isEmpty()) {
                return createErrorResponse("Refresh token —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π", HttpStatus.BAD_REQUEST);
            }

            AuthResponseDto response = authService.refreshToken(refreshToken);

            if (response != null && response.isSuccess()) {
                log.info("‚úÖ Token –∞–º–∂–∏–ª—Ç—Ç–∞–π —Å—ç—Ä–≥—ç—ç–≥–¥–ª—ç–≤");
                
                Map<String, Object> successResponse = new HashMap<>();
                successResponse.put("success", true);
                successResponse.put("token", response.getToken());
                successResponse.put("refreshToken", response.getRefreshToken());
                successResponse.put("tokenType", response.getTokenType());
                successResponse.put("expiresIn", response.getExpiresIn());
                successResponse.put("timestamp", System.currentTimeMillis());
                
                return ResponseEntity.ok()
                        .header("Content-Type", "application/json;charset=UTF-8")
                        .body(successResponse);
            } else {
                log.warn("‚ö†Ô∏è Token —Å—ç—Ä–≥—ç—ç—Ö –∞–º–∂–∏–ª—Ç–≥“Ø–π: {}", response != null ? response.getMessage() : "–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π –∞–ª–¥–∞–∞");
                return createErrorResponse("Token —Å—ç—Ä–≥—ç—ç—Ö –∞–º–∂–∏–ª—Ç–≥“Ø–π", HttpStatus.UNAUTHORIZED);
            }
        } catch (Exception e) {
            log.error("‚ùå Refresh token –∞–ª–¥–∞–∞: {}", e.getMessage());
            return createErrorResponse("Token —Å—ç—Ä–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞", HttpStatus.UNAUTHORIZED);
        }
    }

    /**
     * ‚≠ê –°–ê–ô–ñ–†–£–£–õ–°–ê–ù: Token –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö ‚≠ê
     */
    @GetMapping(value = "/validate", produces = "application/json;charset=UTF-8")
    @Operation(summary = "Token –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö", description = "Access token-–∏–π–≥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö")
    public ResponseEntity<Map<String, Object>> validateToken(HttpServletRequest request) {
        try {
            Map<String, Object> response = new HashMap<>();
            String authHeader = request.getHeader("Authorization");
            
            if (authHeader == null) {
                response.put("valid", false);
                response.put("message", "Token –±–∞–π—Ö–≥“Ø–π");
                response.put("success", true);
                response.put("timestamp", System.currentTimeMillis());
                return ResponseEntity.ok()
                        .header("Content-Type", "application/json;charset=UTF-8")
                        .body(response);
            }
            
            String jwtToken = authHeader.startsWith("Bearer ") ? authHeader.substring(7) : authHeader;
            boolean isValid = authService.validateJwtToken(jwtToken);
            
            response.put("valid", isValid);
            response.put("timestamp", System.currentTimeMillis());
            response.put("success", true);
            
            if (isValid) {
                response.put("message", "Token —Ö“Ø—á–∏–Ω—Ç—ç–π");
                String username = authService.getUsernameFromJwtToken(jwtToken);
                if (username != null) {
                    response.put("username", LogUtil.maskSensitiveData(username));
                }
            } else {
                response.put("message", "Token —Ö“Ø—á–∏–Ω–≥“Ø–π");
            }
            
            return ResponseEntity.ok()
                    .header("Content-Type", "application/json;charset=UTF-8")
                    .body(response);
        } catch (Exception e) {
            log.error("‚ùå Token –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö –∞–ª–¥–∞–∞: {}", e.getMessage());
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("valid", false);
            errorResponse.put("message", "Token —à–∞–ª–≥–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞");
            errorResponse.put("timestamp", System.currentTimeMillis());
            errorResponse.put("success", false);
            return ResponseEntity.ok()
                    .header("Content-Type", "application/json;charset=UTF-8")
                    .body(errorResponse);
        }
    }

    /**
     * ‚≠ê –°–ê–ô–ñ–†–£–£–õ–°–ê–ù: –ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö ‚≠ê
     */
    @PostMapping(value = "/change-password", produces = "application/json;charset=UTF-8")
    @Operation(summary = "–ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö", description = "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö")
    public ResponseEntity<Map<String, Object>> changePassword(
            HttpServletRequest request,
            @RequestBody(required = false) Map<String, String> passwordRequest) {
        try {
            String authHeader = request.getHeader("Authorization");
            if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                return createErrorResponse("Token —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π", HttpStatus.UNAUTHORIZED);
            }

            if (passwordRequest == null) {
                return createErrorResponse("–ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö –º—ç–¥—ç—ç–ª—ç–ª –±–∞–π—Ö–≥“Ø–π", HttpStatus.BAD_REQUEST);
            }

            String jwtToken = authHeader.substring(7);
            Optional<User> userOpt = authService.getCurrentUser(jwtToken);
            
            if (!userOpt.isPresent()) {
                return createErrorResponse("–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π", HttpStatus.UNAUTHORIZED);
            }

            String currentPassword = passwordRequest.get("currentPassword");
            String newPassword = passwordRequest.get("newPassword");

            if (currentPassword == null || newPassword == null) {
                return createErrorResponse("–û–¥–æ–æ–≥–∏–π–Ω –±–æ–ª–æ–Ω —à–∏–Ω—ç –Ω—É—É—Ü “Ø–≥ —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π", HttpStatus.BAD_REQUEST);
            }

            User user = userOpt.get();
            boolean success = authService.changePassword(user.getId(), currentPassword, newPassword);

            if (success) {
                log.info("‚úÖ –ù—É—É—Ü “Ø–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —Å–æ–ª–∏–≥–¥–ª–æ–æ: {}", LogUtil.maskSensitiveData(user.getUsername()));
                return createSuccessResponse("–ù—É—É—Ü “Ø–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —Å–æ–ª–∏–≥–¥–ª–æ–æ");
            } else {
                return createErrorResponse("–ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö –∞–º–∂–∏–ª—Ç–≥“Ø–π", HttpStatus.BAD_REQUEST);
            }

        } catch (Exception e) {
            log.error("‚ùå –ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö –∞–ª–¥–∞–∞: {}", e.getMessage());
            return createErrorResponse("–ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * ‚≠ê –¢–ï–°–¢ ENDPOINTS ‚≠ê
     */
    @GetMapping(value = "/test", produces = "application/json;charset=UTF-8")
    @Operation(summary = "Authentication —Ç–µ—Å—Ç")
    public ResponseEntity<Map<String, Object>> test() {
        Map<String, Object> response = new HashMap<>();
        response.put("status", "OK");
        response.put("message", "Authentication Controller –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞");
        response.put("timestamp", System.currentTimeMillis());
        response.put("success", true);
        response.put("charset", "UTF-8");
        response.put("version", "5.0");
        response.put("availableEndpoints", new String[]{
            "POST /api/v1/auth/login",
            "POST /api/v1/auth/logout", 
            "GET /api/v1/auth/me",
            "POST /api/v1/auth/refresh",
            "GET /api/v1/auth/validate",
            "POST /api/v1/auth/change-password",
            "GET /api/v1/auth/test",
            "GET /api/v1/auth/health",
            "GET /api/v1/auth/test-users",
            "POST /api/v1/auth/test-validation",
            "POST /api/v1/auth/debug-json"
        });
        
        return ResponseEntity.ok()
                .header("Content-Type", "application/json;charset=UTF-8")
                .body(response);
    }

    @GetMapping(value = "/health", produces = "application/json;charset=UTF-8")
    @Operation(summary = "Authentication service health check")
    public ResponseEntity<Map<String, Object>> healthCheck() {
        try {
            Map<String, Object> health = new HashMap<>();
            health.put("status", "UP");
            health.put("service", "AuthController");
            health.put("timestamp", System.currentTimeMillis());
            health.put("version", "5.0");
            health.put("success", true);
            health.put("charset", "UTF-8");
            
            try {
                Map<String, Object> serviceHealth = authService.checkAuthServiceHealth();
                health.putAll(serviceHealth);
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Auth service health check failed: {}", e.getMessage());
                health.put("serviceStatus", "DEGRADED");
                health.put("serviceMessage", e.getMessage());
            }
            
            return ResponseEntity.ok()
                    .header("Content-Type", "application/json;charset=UTF-8")
                    .body(health);
        } catch (Exception e) {
            log.error("‚ùå Health check –∞–ª–¥–∞–∞: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE)
                    .header("Content-Type", "application/json;charset=UTF-8")
                    .body(Map.of(
                        "status", "DOWN", 
                        "error", "Authentication service —É–Ω—Ç–∞—Ä—Å–∞–Ω –±–∞–π–Ω–∞", 
                        "success", false,
                        "timestamp", System.currentTimeMillis()
                    ));
        }
    }

    @GetMapping(value = "/test-users", produces = "application/json;charset=UTF-8")
    @Operation(summary = "Test users –∂–∞–≥—Å–∞–∞–ª—Ç", description = "Development mode-–Ω —Ç—É–ª–¥")
    public ResponseEntity<Map<String, Object>> getTestUsers() {
        Map<String, Object> response = new HashMap<>();
        response.put("testUsers", new Object[]{
            Map.of("username", "admin", "password", "admin123", "role", "SUPER_ADMIN", "name", "–°–∏—Å—Ç–µ–º–∏–π–Ω –∞–¥–º–∏–Ω"),
            Map.of("username", "manager", "password", "manager123", "role", "MANAGER", "name", "–°–∞–ª–±–∞—Ä—ã–Ω –º–µ–Ω–µ–∂–µ—Ä"),
            Map.of("username", "loan_officer", "password", "loan123", "role", "LOAN_OFFICER", "name", "–ó—ç—ç–ª–∏–π–Ω –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω"),
            Map.of("username", "reviewer", "password", "admin123", "role", "DOCUMENT_REVIEWER", "name", "–ë–∞—Ä–∏–º—Ç —Ö—è–Ω–∞–≥—á"),
            Map.of("username", "customer_service", "password", "admin123", "role", "CUSTOMER_SERVICE", "name", "–•–∞—Ä–∏–ª—Ü–∞–≥—á–∏–π–Ω “Ø–π–ª—á–∏–ª–≥—ç—ç")
        });
        response.put("note", "‚ö†Ô∏è –≠–¥–≥—ç—ç—Ä –Ω—å development mode-–Ω test users. Production-–¥ —Ö–∞—Å–∞—Ö —ë—Å—Ç–æ–π.");
        response.put("success", true);
        response.put("timestamp", System.currentTimeMillis());
        response.put("charset", "UTF-8");
        
        return ResponseEntity.ok()
                .header("Content-Type", "application/json;charset=UTF-8")
                .body(response);
    }

    /**
     * ‚≠ê JSON FORMAT DEBUG ENDPOINT ‚≠ê
     * Frontend-—Å –∏–ª–≥—ç—ç—Å—ç–Ω JSON format —à–∞–ª–≥–∞—Ö–∞–¥ –∑–æ—Ä–∏—É–ª—Å–∞–Ω
     */
    @PostMapping(value = "/debug-json", produces = "application/json;charset=UTF-8")
    @Operation(summary = "JSON format debug", description = "Frontend-—Å –∏–ª–≥—ç—ç—Å—ç–Ω JSON format —à–∞–ª–≥–∞—Ö")
    public ResponseEntity<Map<String, Object>> debugJson(@RequestBody(required = false) Object rawRequest, HttpServletRequest request) {
        Map<String, Object> response = new HashMap<>();
        
        try {
            log.info("üîç Debug JSON —Ö“Ø—Å—ç–ª—Ç —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞");
            
            // Raw request –º—ç–¥—ç—ç–ª—ç–ª
            response.put("success", true);
            response.put("message", "JSON format —à–∞–ª–≥–∞–≥–¥–ª–∞–∞");
            response.put("receivedData", rawRequest);
            response.put("dataType", rawRequest != null ? rawRequest.getClass().getSimpleName() : "null");
            response.put("timestamp", System.currentTimeMillis());
            
            // Request headers
            Map<String, String> headers = new HashMap<>();
            headers.put("Content-Type", request.getContentType());
            headers.put("Content-Length", request.getHeader("Content-Length"));
            response.put("headers", headers);
            
            // –•—ç—Ä—ç–≤ Map –±–æ–ª —É—Ç–≥—É—É–¥—ã–≥ —à–∞–ª–≥–∞—Ö
            if (rawRequest instanceof Map) {
                Map<?, ?> mapData = (Map<?, ?>) rawRequest;
                Map<String, Object> fieldAnalysis = new HashMap<>();
                
                for (Map.Entry<?, ?> entry : mapData.entrySet()) {
                    String key = String.valueOf(entry.getKey());
                    Object value = entry.getValue();
                    
                    Map<String, Object> fieldInfo = new HashMap<>();
                    fieldInfo.put("value", value);
                    fieldInfo.put("type", value != null ? value.getClass().getSimpleName() : "null");
                    fieldInfo.put("isEmpty", value == null || (value instanceof String && ((String) value).trim().isEmpty()));
                    
                    fieldAnalysis.put(key, fieldInfo);
                }
                
                response.put("fieldAnalysis", fieldAnalysis);
            }
            
            return ResponseEntity.ok()
                    .header("Content-Type", "application/json;charset=UTF-8")
                    .body(response);
            
        } catch (Exception e) {
            log.error("‚ùå JSON debug –∞–ª–¥–∞–∞: {}", e.getMessage());
            response.put("success", false);
            response.put("error", "JSON debug —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞");
            response.put("exception", e.getMessage());
            return ResponseEntity.ok()
                    .header("Content-Type", "application/json;charset=UTF-8")
                    .body(response);
        }
    }

    /**
     * ‚≠ê LOGIN FORM VALIDATION –¢–ï–°–¢ ENDPOINT ‚≠ê
     */
    @PostMapping(value = "/test-validation", produces = "application/json;charset=UTF-8")
    @Operation(summary = "Login form validation —Ç–µ—Å—Ç", description = "Frontend validation —Ç–µ—Å—Ç —Ö–∏–π—Ö")
    public ResponseEntity<Map<String, Object>> testValidation(@RequestBody(required = false) LoginRequestDto loginRequest) {
        Map<String, Object> response = new HashMap<>();
        
        try {
            if (loginRequest == null) {
                response.put("valid", false);
                response.put("error", "Login –º—ç–¥—ç—ç–ª—ç–ª –∏–ª–≥—ç—ç–≥–¥—ç—ç–≥“Ø–π –±–∞–π–Ω–∞");
                response.put("success", true);
                return ResponseEntity.ok()
                        .header("Content-Type", "application/json;charset=UTF-8")
                        .body(response);
            }

            // Input sanitization
            loginRequest.sanitizeInputs();
            loginRequest.normalizeUsername();

            // Validation check
            String validationError = LoginRequestDto.Validator.validateLoginRequest(loginRequest);
            
            if (validationError != null) {
                response.put("valid", false);
                response.put("error", validationError);
                response.put("field", getErrorField(validationError));
            } else {
                response.put("valid", true);
                response.put("message", "Validation –∞–º–∂–∏–ª—Ç—Ç–∞–π");
                response.put("username", LogUtil.maskSensitiveData(loginRequest.getUsername()));
                response.put("isEmail", loginRequest.isEmail());
            }
            
            response.put("success", true);
            response.put("timestamp", System.currentTimeMillis());
            
            return ResponseEntity.ok()
                    .header("Content-Type", "application/json;charset=UTF-8")
                    .body(response);
            
        } catch (Exception e) {
            log.error("‚ùå Validation —Ç–µ—Å—Ç –∞–ª–¥–∞–∞: {}", e.getMessage());
            response.put("valid", false);
            response.put("error", "Validation —Ç–µ—Å—Ç —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞");
            response.put("success", false);
            return ResponseEntity.ok()
                    .header("Content-Type", "application/json;charset=UTF-8")
                    .body(response);
        }
    }

    // ‚≠ê HELPER METHODS ‚≠ê

    /**
     * –ê–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞—Ä–∏—É “Ø“Ø—Å–≥—ç—Ö
     */
    private ResponseEntity<Map<String, Object>> createSuccessResponse(String message) {
        Map<String, Object> response = new HashMap<>();
        response.put("success", true);
        response.put("message", message);
        response.put("timestamp", System.currentTimeMillis());
        return ResponseEntity.ok()
                .header("Content-Type", "application/json;charset=UTF-8")
                .body(response);
    }

    /**
     * Validation –∞–ª–¥–∞–∞–Ω—ã —Ö–∞—Ä–∏—É “Ø“Ø—Å–≥—ç—Ö - specific field –º—ç–¥—ç—ç–ª—ç–ª—Ç—ç–π
     */
    private ResponseEntity<Map<String, Object>> createValidationErrorResponse(String field, String message) {
        Map<String, Object> error = new HashMap<>();
        error.put("success", false);
        error.put("error", "Validation Failed");
        error.put("message", "–ù—ç–≤—Ç—Ä—ç—Ö –º—ç–¥—ç—ç–ª—ç–ª –±—É—Ä—É—É –±–∞–π–Ω–∞");
        error.put("timestamp", System.currentTimeMillis());
        
        Map<String, Object> details = new HashMap<>();
        details.put(field, message);
        error.put("details", details);
        
        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .header("Content-Type", "application/json;charset=UTF-8")
                .body(error);
    }

    /**
     * –ê–ª–¥–∞–∞–Ω—ã —Ö–∞—Ä–∏—É “Ø“Ø—Å–≥—ç—Ö - UTF-8 character encoding –¥—ç–º–∂—Ç—ç–π
     */
    private ResponseEntity<Map<String, Object>> createErrorResponse(String message, HttpStatus status) {
        Map<String, Object> error = new HashMap<>();
        error.put("success", false);
        error.put("error", message);
        error.put("timestamp", System.currentTimeMillis());
        
        return ResponseEntity.status(status)
                .header("Content-Type", "application/json;charset=UTF-8")
                .body(error);
    }

    /**
     * Client IP address –æ–ª–æ—Ö
     */
    private String getClientIpAddress(HttpServletRequest request) {
        String xForwardedFor = request.getHeader("X-Forwarded-For");
        if (xForwardedFor != null && !xForwardedFor.isEmpty()) {
            return xForwardedFor.split(",")[0].trim();
        }

        String xRealIp = request.getHeader("X-Real-IP");
        if (xRealIp != null && !xRealIp.isEmpty()) {
            return xRealIp;
        }

        return request.getRemoteAddr();
    }

    /**
     * Validation –∞–ª–¥–∞–∞–Ω—ã —Ç–∞–ª–±–∞—Ä—ã–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ—Ö helper –º–µ—Ç–æ–¥
     */
    private String getErrorField(String errorMessage) {
        if (errorMessage.contains("–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä")) {
            return "username";
        } else if (errorMessage.contains("–ù—É—É—Ü “Ø–≥")) {
            return "password";
        }
        return "general";
    }
}