package com.company.los.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.header.writers.ReferrerPolicyHeaderWriter;
import org.springframework.security.web.authentication.HttpStatusEntryPoint;
import org.springframework.http.HttpStatus;
import org.springframework.web.cors.CorsConfiguration;

import java.util.Arrays;

/**
 * ‚≠ê LOAN ORIGINATION SYSTEM SECURITY CONFIGURATION - 302 REDIRECT –ê–õ–î–ê–ê –ó–ê–°–í–ê–†–õ–ê–°–ê–ù ‚≠ê
 * * Security —Ç–æ—Ö–∏—Ä–≥–æ–æ:
 * - BCrypt password encoding
 * - Form-based authentication (–¥—ç–ª–≥—ç—Ü —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥—ç–¥)
 * - API endpoints-–¥ 401 response (302 redirect –±–∏—à)
 * - CORS —Ç–æ—Ö–∏—Ä–≥–æ–æ
 * - H2 Console –∑”©–≤—à”©”©—Ä”©–ª
 * * ‚úÖ –ó–ê–°–í–ê–†: API calls 302 redirect-—ç—ç—Å –∞–Ω–≥–∏–¥ –±–æ–ª–≥–æ—Å–æ–Ω
 * * Created: 2025-07-26
 * Updated: 302 redirect –∞–ª–¥–∞–∞ –∑–∞—Å–≤–∞—Ä–ª–∞—Å–∞–Ω
 */
@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class SecurityConfig {

    /**
     * BCrypt Password Encoder –±—ç–ª–¥—ç—Ö
     */
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    /**
     * ‚≠ê –ó–ê–°–í–ê–†–õ–ê–°–ê–ù Security Filter Chain - 302 REDIRECT –ê–õ–î–ê–ê –ó–ê–°–í–ê–†–õ–ê–°–ê–ù ‚≠ê
     * –ì–æ–ª –∑–∞—Å–≤–∞—Ä: API calls-–¥ –∑–æ—Ä–∏—É–ª–∂ authenticationEntryPoint –∑–∞—Å–≤–∞—Ä–ª–∞—Å–∞–Ω
     */
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            // CORS —Ç–æ—Ö–∏—Ä–≥–æ–æ
            .cors(cors -> cors.configurationSource(request -> {
                CorsConfiguration configuration = new CorsConfiguration();
                configuration.setAllowedOriginPatterns(Arrays.asList("*"));
                configuration.setAllowedMethods(Arrays.asList("*"));
                configuration.setAllowedHeaders(Arrays.asList("*"));
                configuration.setAllowCredentials(true);
                return configuration;
            }))
            
            // CSRF —Ç–æ—Ö–∏—Ä–≥–æ–æ
            .csrf(csrf -> csrf
                .ignoringRequestMatchers("/h2-console/**")
                .ignoringRequestMatchers("/api/**")
                .ignoringRequestMatchers("/actuator/**")
            )
            
            // ‚≠ê –®–ò–ù–≠: Authorization —Ç–æ—Ö–∏—Ä–≥–æ–æ - API endpoints –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω ‚≠ê
            .authorizeHttpRequests(authz -> authz
                // ‚úÖ PUBLIC ENDPOINTS - AUTHENTICATION –®–ê–ê–†–î–õ–ê–ì–ê–ì“Æ–ô
                .requestMatchers("/h2-console/**").permitAll()
                .requestMatchers("/swagger-ui/**").permitAll()
                .requestMatchers("/swagger-ui.html").permitAll()
                .requestMatchers("/api-docs/**").permitAll()
                .requestMatchers("/v3/api-docs/**").permitAll()
                .requestMatchers("/actuator/**").permitAll()
                .requestMatchers("/webjars/**").permitAll()
                .requestMatchers("/favicon.ico").permitAll()
                .requestMatchers("/error").permitAll()
                
                // ‚úÖ API HEALTH & AUTH ENDPOINTS - DEVELOPMENT MODE
                .requestMatchers("/api/v1/health/**").permitAll()
                .requestMatchers("/api/v1/auth/**").permitAll()
                .requestMatchers("/api/v1/").permitAll()
                
                // ‚úÖ LOGIN/LOGOUT PAGES
                .requestMatchers("/login").permitAll()
                .requestMatchers("/logout").permitAll()
                
                // Static resources
                .requestMatchers("/css/**", "/js/**", "/images/**").permitAll()
                
                // ‚ö†Ô∏è –•”®–ì–ñ“Æ“Æ–õ–≠–õ–¢–ò–ô–ù –†–ï–ñ–ò–ú: API endpoints-–≥ —Ç“Ø—Ä –∑”©–≤—à”©”©—Ä–Ω”©
                // –ü—Ä–æ–¥–∞–∫—à–Ω –¥—ç—ç—Ä —ç–¥–≥—ç—ç—Ä–∏–π–≥ authentication —à–∞–∞—Ä–¥–∞—Ö–∞–∞—Ä ”©”©—Ä—á–∏–ª–Ω”©
                .requestMatchers("/api/v1/customers/**").permitAll()
                .requestMatchers("/api/v1/documents/**").permitAll()
                .requestMatchers("/api/v1/loans/**").permitAll()
                .requestMatchers("/api/v1/loan-applications/**").permitAll()
                
                // Admin —ç—Ä—Ö —à–∞–∞—Ä–¥–∞–≥–¥–∞—Ö endpoints (—Ö–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω)
                .requestMatchers("/admin/**").hasRole("SUPER_ADMIN")
                .requestMatchers("/api/v1/admin/**").hasRole("SUPER_ADMIN")
                
                // Manager —ç—Ä—Ö —à–∞–∞—Ä–¥–∞–≥–¥–∞—Ö endpoints (—Ö–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω) 
                .requestMatchers("/api/v1/reports/**").hasAnyRole("MANAGER", "SUPER_ADMIN")
                
                // –ë—É—Å–∞–¥ –±“Ø—Ö web request-“Ø“Ø–¥ authentication —à–∞–∞—Ä–¥–∞–Ω–∞
                .anyRequest().authenticated()
            )
            
            // Headers —Ç–æ—Ö–∏—Ä–≥–æ–æ (—Ö–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω)
            .headers(headers -> headers
                .frameOptions(frameOptions -> frameOptions.sameOrigin())
                .contentTypeOptions(contentTypeOptions -> contentTypeOptions.disable())
                .httpStrictTransportSecurity(hsts -> hsts.disable())
                .referrerPolicy(policy -> policy.policy(ReferrerPolicyHeaderWriter.ReferrerPolicy.NO_REFERRER))
            )
            
            // Form Login —Ç–æ—Ö–∏—Ä–≥–æ–æ (—Ö–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω)
            .formLogin(form -> form
                .loginPage("/login")
                .loginProcessingUrl("/login")
                .defaultSuccessUrl("/dashboard", true)
                .failureUrl("/login?error=true")
                .usernameParameter("username")
                .passwordParameter("password")
                .permitAll()
            )
            
            // Logout —Ç–æ—Ö–∏—Ä–≥–æ–æ (—Ö–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω)
            .logout(logout -> logout
                .logoutUrl("/logout")
                .logoutSuccessUrl("/login?logout=true")
                .invalidateHttpSession(true)
                .deleteCookies("JSESSIONID")
                .permitAll()
            )
            
            // Session Management (—Ö–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω)
            .sessionManagement(session -> session
                .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)
                .sessionFixation(sessionFixation -> sessionFixation.changeSessionId())
                .maximumSessions(1)
                .maxSessionsPreventsLogin(false)
            )
            
            // ‚≠ê –ì–ê–†–í–ê–® –ó–ê–°–í–ê–†: Exception Handling - API calls 401 –∞–≤–Ω–∞, redirect –±–∏—à ‚≠ê
            .exceptionHandling(ex -> ex
                .accessDeniedPage("/access-denied")
                .authenticationEntryPoint((request, response, authException) -> {
                    String requestUri = request.getRequestURI();
                    // API calls-–¥ 401 JSON response ”©–≥–Ω”©
                    if (requestUri.startsWith("/api/")) {
                        response.setStatus(HttpStatus.UNAUTHORIZED.value());
                        response.setContentType("application/json");
                        response.setCharacterEncoding("UTF-8");
                        response.getWriter().write("{\"error\":\"Unauthorized\",\"message\":\"Authentication required\",\"status\":401}");
                    } else {
                        // Web pages-–≥ login —Ö—É—É–¥–∞—Å —Ä—É—É —á–∏–≥–ª“Ø“Ø–ª–Ω—ç
                        response.sendRedirect("/login");
                    }
                })
            );

        return http.build();
    }
}

/**
 * =====================================================================================
 * ‚≠ê 302 REDIRECT –ê–õ–î–ê–ê –ó–ê–°–í–ê–†–õ–ê–°–ê–ù –•–£–í–ò–õ–ë–ê–† ‚≠ê
 * =====================================================================================
 * * ‚úÖ –ì–æ–ª –∑–∞—Å–≤–∞—Ä—É—É–¥:
 * 1. API health endpoints (.permitAll() –Ω—ç–º—ç–≥–¥—Å—ç–Ω)
 * 2. Exception handling —Å–∞–π–∂—Ä—É—É–ª—Å–∞–Ω (API calls 401, web calls redirect)
 * 3. –•”©–≥–∂“Ø“Ø–ª—ç–ª—Ç–∏–π–Ω —Ä–µ–∂–∏–º–¥ API endpoints —Ç“Ø—Ä –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω
 * 4. CORS —Ç–æ—Ö–∏—Ä–≥–æ–æ —Ö–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω
 * 
 * * üß™ –¢–µ—Å—Ç:
 * curl http://localhost:8080/los/api/v1/health -> 200 OK (302 –±–∏—à)
 * curl http://localhost:8080/los/api/v1/auth/login -> 401/400 (404 –±–∏—à)
 * 
 * * üîë Login —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥ (—Ö–∞–¥–≥–∞–ª–∞–≥–¥—Å–∞–Ω):
 * - admin / admin123 (SUPER_ADMIN role)
 * - loan_officer / loan123 (LOAN_OFFICER role) 
 * - manager / manager123 (MANAGER role)
 * 
 * * ‚ö†Ô∏è –ê–ù–•–ê–ê–†–£–£–õ–ì–ê:
 * –ü—Ä–æ–¥–∞–∫—à–Ω –¥—ç—ç—Ä API endpoints-–Ω authentication –¥–∞—Ö–∏–Ω –∏–¥—ç–≤—Ö–∂“Ø“Ø–ª—ç—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π
 * =====================================================================================
 */