package com.company.los.service.impl;

import com.company.los.dto.AuthResponseDto;
import com.company.los.dto.LoginRequestDto;
import com.company.los.dto.UserDto;
import com.company.los.entity.User;
import com.company.los.entity.Role;
import com.company.los.repository.UserRepository;
import com.company.los.security.JwtUtil;
import com.company.los.service.AuthService;
import com.company.los.util.LogUtil;
import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

/**
 * ‚≠ê ENHANCED Authentication Service Implementation ‚≠ê
 * JWT token –∞—à–∏–≥–ª–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞–ª—Ç
 *
 * @author LOS Development Team
 * @version 3.4 - –ë“Æ–†–≠–ù –ó–ê–°–í–ê–†–õ–ê–°–ê–ù - –ö–æ–º–ø–∏–ª—è—Ü–∏ –∞–ª–¥–∞–∞ –∞—Ä–∏–ª–≥–∞–≥–¥—Å–∞–Ω
 * @since 2025-08-04
 */
@Service
@RequiredArgsConstructor
@Transactional
public class AuthServiceImpl implements AuthService {

    private static final Logger log = LoggerFactory.getLogger(AuthServiceImpl.class);

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final AuthenticationManager authenticationManager;
    private final JwtUtil jwtUtil;

    // Token blacklist for invalidating JWTs upon logout.
    // In a production environment, this should be a persistent, distributed cache (e.g., Redis).
    private final Set<String> invalidatedTokens = ConcurrentHashMap.newKeySet();

    // ‚≠ê TEST USERS - Development mode (Production-–¥ —Ö–∞—Å–∞—Ö) ‚≠ê
    private static final Map<String, TestUser> TEST_USERS = new HashMap<>();
    
    static {
        TEST_USERS.put("admin", new TestUser("admin", "admin123", "SUPER_ADMIN", "–°–∏—Å—Ç–µ–º–∏–π–Ω –∞–¥–º–∏–Ω", "admin@los.mn"));
        TEST_USERS.put("manager", new TestUser("manager", "manager123", "MANAGER", "–°–∞–ª–±–∞—Ä—ã–Ω –º–µ–Ω–µ–∂–µ—Ä", "manager@los.mn"));
        TEST_USERS.put("loan_officer", new TestUser("loan_officer", "loan123", "LOAN_OFFICER", "–ó—ç—ç–ª–∏–π–Ω –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω", "loan@los.mn"));
        TEST_USERS.put("reviewer", new TestUser("reviewer", "admin123", "DOCUMENT_REVIEWER", "–ë–∞—Ä–∏–º—Ç —Ö—è–Ω–∞–≥—á", "reviewer@los.mn"));
        TEST_USERS.put("customer_service", new TestUser("customer_service", "admin123", "CUSTOMER_SERVICE", "–•–∞—Ä–∏–ª—Ü–∞–≥—á–∏–π–Ω “Ø–π–ª—á–∏–ª–≥—ç—ç", "service@los.mn"));
    }

    /**
     * –•—ç—Ä—ç–≥–ª—ç–≥—á –Ω—ç–≤—Ç—Ä—ç—Ö (login) “Ø–π–ª–¥—ç–ª
     */
    @Override
    public AuthResponseDto login(LoginRequestDto loginRequest) {
        log.info("üîê Login attempt for user: {}", LogUtil.maskSensitiveData(loginRequest.getUsername()));
        
        try {
            String username = loginRequest.getUsername();
            String password = loginRequest.getPassword();
            
            if (username == null || password == null || username.trim().isEmpty() || password.trim().isEmpty()) {
                log.error("‚ùå Username —ç—Å–≤—ç–ª password —Ö–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞");
                return createFailureResponse("–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä –±–æ–ª–æ–Ω –Ω—É—É—Ü “Ø–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É");
            }

            username = username.trim().toLowerCase();

            // 1Ô∏è‚É£ TEST USERS —à–∞–ª–≥–∞—Ö (Development mode)
            TestUser testUser = TEST_USERS.get(username);
            if (testUser != null && testUser.password.equals(password)) {
                log.info("‚úÖ Test —Ö—ç—Ä—ç–≥–ª—ç–≥—á—ç—ç—Ä –∞–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–≤—Ç—ç—Ä–ª—ç—ç: {}", username);
                return createTestUserResponse(testUser);
            }

            // 2Ô∏è‚É£ DATABASE USERS —à–∞–ª–≥–∞—Ö
            Optional<User> userOptional = userRepository.findByUsername(username); 
            if (userOptional.isPresent()) {
                User user = userOptional.get();
                
                // Check if user is active
                if (!user.getIsActive()) {
                    log.warn("‚ö†Ô∏è –•—ç—Ä—ç–≥–ª—ç–≥—á –∏–¥—ç–≤—Ö–≥“Ø–π –±–∞–π–Ω–∞: {}", username);
                    return createFailureResponse("–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —ç—Ä—Ö —Ö–∞–∞–≥–¥—Å–∞–Ω –±–∞–π–Ω–∞");
                }
                
                // Password —à–∞–ª–≥–∞—Ö
                if (passwordEncoder.matches(password, user.getPasswordHash())) { 
                    
                    log.info("‚úÖ Database —Ö—ç—Ä—ç–≥–ª—ç–≥—á—ç—ç—Ä –∞–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–≤—Ç—ç—Ä–ª—ç—ç: {}", username);
                    
                    // Last login —à–∏–Ω—ç—á–ª—ç—Ö
                    user.setLastLoginAt(LocalDateTime.now());
                    userRepository.save(user);
                    
                    return createDatabaseUserResponse(user);
                }
            }

            // –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä, –Ω—É—É—Ü “Ø–≥ –±—É—Ä—É—É
            log.error("‚ùå –ù—ç–≤—Ç—Ä—ç—Ö –∞–º–∂–∏–ª—Ç–≥“Ø–π: {}", username);
            return createFailureResponse("–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä —ç—Å–≤—ç–ª –Ω—É—É—Ü “Ø–≥ –±—É—Ä—É—É –±–∞–π–Ω–∞");

        } catch (BadCredentialsException e) {
            log.error("–ù—ç–≤—Ç—Ä—ç–ª—Ç –∞–º–∂–∏–ª—Ç–≥“Ø–π. –ë—É—Ä—É—É —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä —ç—Å–≤—ç–ª –Ω—É—É—Ü “Ø–≥: {}", e.getMessage());
            return createFailureResponse("–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä —ç—Å–≤—ç–ª –Ω—É—É—Ü “Ø–≥ –±—É—Ä—É—É –±–∞–π–Ω–∞.");
        } catch (Exception e) {
            log.error("‚ùå –ù—ç–≤—Ç—Ä—ç—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {}", e.getMessage(), e);
            return createFailureResponse("–°–∏—Å—Ç–µ–º–∏–π–Ω –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.");
        }
    }

    /**
     * –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–≥ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö (—Ö—É—É—á–∏–Ω authenticateUser —Ñ—É–Ω–∫—Ü)
     */
    @Override
    public Map<String, Object> authenticateUser(String username, String password) {
        log.info("üîê Authentication —Ö“Ø—Å—ç–ª—Ç (—Ö—É—É—á–∏–Ω —Ñ—É–Ω–∫—Ü): {}", username);
        
        LoginRequestDto loginRequest = new LoginRequestDto();
        loginRequest.setUsername(username);
        loginRequest.setPassword(password);
        
        AuthResponseDto authResponse = login(loginRequest);
        
        Map<String, Object> result = new HashMap<>();
        if (authResponse.isSuccess()) {
            result.put("success", true);
            result.put("token", authResponse.getToken());
            result.put("user", Map.of(
                "id", authResponse.getUserId() != null ? authResponse.getUserId().toString() : generateTestUserId(username).toString(),
                "username", authResponse.getUsername(),
                "role", getRoleString(authResponse.getRoles()), 
                "name", authResponse.getFullName() != null ? authResponse.getFullName() : authResponse.getUsername(),
                "email", authResponse.getEmail() != null ? authResponse.getEmail() : username + "@los.mn"
            ));
            result.put("message", authResponse.getMessage());
        } else {
            result.put("success", false);
            result.put("message", authResponse.getMessage());
        }
        return result;
    }

    /**
     * –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–≥ 2FA-—Ç–∞–π –Ω—ç–≤—Ç—Ä“Ø“Ø–ª—ç—Ö (–æ–¥–æ–æ–≥–æ–æ—Ä —Ö—ç—Ä—ç–≥–∂“Ø“Ø–ª—ç—ç–≥“Ø–π)
     */
    @Override
    public Map<String, Object> authenticateUserWith2FA(String username, String password, String twoFactorCode) {
        // TODO: 2FA implementation
        return authenticateUser(username, password); // –û–¥–æ–æ–≥–æ–æ—Ä 2FA-–≥“Ø–π–≥—ç—ç—Ä –Ω—ç–≤—Ç—Ä“Ø“Ø–ª–∂ –±–∞–π–Ω–∞
    }

    /**
     * JWT access token “Ø“Ø—Å–≥—ç—Ö
     */
    @Override
    public String generateJwtToken(UserDetails userDetails) {
        if (jwtUtil != null && userDetails != null) {
            return jwtUtil.generateAccessToken(userDetails);
        }
        return "LOS_TOKEN_" + userDetails.getUsername() + "_" + System.currentTimeMillis();
    }

    /**
     * JWT token –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª–∞—Ö
     */
    @Override
    public boolean validateJwtToken(String token) {
        // Check if the token is in the blacklist first
        if (invalidatedTokens.contains(token)) {
            log.warn("‚ö†Ô∏è Blacklisted token detected: {}", LogUtil.maskSensitiveData(token));
            return false;
        }
        if (jwtUtil != null) {
            return jwtUtil.isTokenValid(token);
        }
        return token != null && token.startsWith("LOS_TOKEN_");
    }

    /**
     * JWT token-–æ–æ—Å —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä –∞–≤–∞—Ö
     */
    @Override
    public String getUsernameFromJwtToken(String token) { 
        if (jwtUtil != null) {
            try {
                return jwtUtil.extractUsername(token);
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è JWT username –æ–ª–æ—Ö –∞–ª–¥–∞–∞: {}", e.getMessage());
            }
        }
        
        if (token != null && token.startsWith("LOS_TOKEN_")) {
            String[] parts = token.split("_");
            if (parts.length >= 3) {
                return parts[2];
            }
        }
        
        return null;
    }

    /**
     * JWT token-–æ–æ—Å —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
     */
    @Override
    public UserDetails getUserDetailsFromJwtToken(String token) {
        String username = getUsernameFromJwtToken(token);
        if (username != null) {
            return userRepository.findByUsername(username).orElse(null);
        }
        return null;
    }

    /**
     * Token —Å—ç—Ä–≥—ç—ç—Ö (—Ö—É—É—á–∏–Ω token-–æ–æ—Å —à–∏–Ω—ç token “Ø“Ø—Å–≥—ç—Ö)
     */
    @Override
    public String refreshJwtToken(String token) {
        String username = getUsernameFromJwtToken(token); 
        if (username != null) {
            if (jwtUtil != null) {
                // UserDetails-–∏–π–≥ –∞—à–∏–≥–ª–∞–Ω —à–∏–Ω—ç —Ç–æ–∫–µ–Ω “Ø“Ø—Å–≥—ç–Ω—ç
                UserDetails userDetails = userRepository.findByUsername(username).orElse(null);
                if (userDetails != null) {
                    return jwtUtil.generateAccessToken(userDetails);
                }
            }
            return "LOS_TOKEN_" + username + "_" + System.currentTimeMillis();
        }
        return null;
    }

    /**
     * Refresh token –∞—à–∏–≥–ª–∞–Ω —à–∏–Ω—ç access token –∞–≤–∞—Ö
     */
    @Override
    public AuthResponseDto refreshToken(String refreshToken) {
        log.info("üîÑ Refresh token —Ö“Ø—Å—ç–ª—Ç");
        
        try {
            if (jwtUtil != null && !jwtUtil.isRefreshTokenValid(refreshToken)) {
                return createFailureResponse("Refresh token —Ö“Ø—á–∏–Ω–≥“Ø–π –±–∞–π–Ω–∞");
            }

            String username = getUsernameFromJwtToken(refreshToken);
            if (username == null) {
                return createFailureResponse("Token-–∞–∞—Å —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –Ω—ç—Ä –æ–ª–¥—Å–æ–Ω–≥“Ø–π");
            }

            // Test user —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
            TestUser testUser = TEST_USERS.get(username);
            if (testUser != null) {
                return createTestUserResponse(testUser);
            }

            // Database user —à–∞–ª–≥–∞—Ö
            Optional<User> userOptional = userRepository.findByUsername(username);
            if (userOptional.isPresent()) {
                User user = userOptional.get();
                return createDatabaseUserResponse(user);
            }

            return createFailureResponse("–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π");
            
        } catch (Exception e) {
            log.error("‚ùå Token —Å—ç—Ä–≥—ç—ç—Ö –∞–ª–¥–∞–∞: {}", e.getMessage());
            return createFailureResponse("Token —Å—ç—Ä–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞");
        }
    }

    /**
     * –û–¥–æ–æ–≥–∏–π–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–≥ token-–æ–æ—Ä –∞–≤–∞—Ö
     */
    @Override
    public Optional<User> getCurrentUser(String token) {
        if (!validateJwtToken(token)) {
            return Optional.empty();
        }
        
        String username = getUsernameFromJwtToken(token);
        if (username == null) {
            return Optional.empty();
        }
        
        // Database-–∞–∞—Å —Ö–∞–π—Ö
        Optional<User> userOptional = userRepository.findByUsername(username);
        if (userOptional.isPresent()) {
            return userOptional;
        }
        
        // Test user —à–∞–ª–≥–∞—Ö
        TestUser testUser = TEST_USERS.get(username);
        if (testUser != null) {
            return Optional.of(createUserFromTestUser(testUser));
        }
        
        return Optional.empty();
    }

    /**
     * –•—ç—Ä—ç–≥–ª—ç–≥—á –≥–∞—Ä–∞—Ö
     */
    @Override
    public boolean logoutUser(String token) {
        log.info("üö™ Logout —Ö“Ø—Å—ç–ª—Ç");
        
        try {
            // Invalidate the token to prevent its reuse
            if (invalidateToken(token)) {
                String username = getUsernameFromJwtToken(token);
                if (username != null) {
                    log.info("‚úÖ –•—ç—Ä—ç–≥–ª—ç–≥—á –∞–º–∂–∏–ª—Ç—Ç–∞–π –≥–∞—Ä–ª–∞–∞: {}", username);
                    return true;
                }
            }
        } catch (Exception e) {
            log.error("‚ùå Logout –∞–ª–¥–∞–∞: {}", e.getMessage());
        }
        
        return false;
    }

    /**
     * ‚≠ê –ó–ê–°–í–ê–†–õ–ê–°–ê–ù: –ë“Ø—Ö —Ç”©—Ö”©”©—Ä”©–º–∂”©”©—Å –≥–∞—Ä–∞—Ö - forceLogoutUser –±–æ–ª–≥–æ—Å–æ–Ω ‚≠ê
     */
    @Override 
    public boolean forceLogoutUser(UUID userId) {
        log.info("üö™ Force logout user from all devices: {}", userId);
        // TODO: Implement actual force logout logic (e.g., invalidate all sessions/tokens for this user)
        return true; 
    }

    /**
     * Token —Ö“Ø—á–∏–Ω–≥“Ø–π –±–æ–ª–≥–æ—Ö (blacklist-–¥ –Ω—ç–º—ç—Ö)
     */
    @Override 
    public boolean invalidateToken(String token) { 
        if (token == null || token.trim().isEmpty()) {
            return false;
        }
        invalidatedTokens.add(token);
        log.info("üö´ Token invalidated and added to blacklist: {}", LogUtil.maskSensitiveData(token));
        return true; 
    }

    /**
     * –ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö
     */
    @Override
    public boolean changePassword(UUID userId, String currentPassword, String newPassword) {
        try {
            User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π"));

            // Current password —à–∞–ª–≥–∞—Ö
            if (!passwordEncoder.matches(currentPassword, user.getPasswordHash())) { 
                throw new RuntimeException("–û–¥–æ–æ–≥–∏–π–Ω –Ω—É—É—Ü “Ø–≥ –±—É—Ä—É—É –±–∞–π–Ω–∞");
            }

            // New password encode —Ö–∏–π–∂ —Ö–∞–¥–≥–∞–ª–∞—Ö
            user.setPasswordHash(passwordEncoder.encode(newPassword)); 
            user.setPasswordChangedAt(LocalDateTime.now());
            userRepository.save(user);
            
            log.info("‚úÖ –ù—É—É—Ü “Ø–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —Å–æ–ª–∏–≥–¥–ª–æ–æ: {}", user.getUsername());
            return true;
            
        } catch (Exception e) {
            log.error("‚ùå –ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö –∞–ª–¥–∞–∞: {}", e.getMessage());
            return false;
        }
    }

    // ==================== HELPER METHODS ====================

    /**
     * –¢—É—Ä—à–∏–ª—Ç—ã–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ö–∞—Ä–∏—É “Ø“Ø—Å–≥—ç—Ö
     */
    private AuthResponseDto createTestUserResponse(TestUser testUser) {
        // TestUser-—ç—ç—Å UserDetails “Ø“Ø—Å–≥—ç—Ö
        UserDetails userDetails = createUserFromTestUser(testUser);
        String accessToken = jwtUtil.generateAccessToken(userDetails); 
        String refreshToken = jwtUtil.generateRefreshToken(userDetails); 
        
        AuthResponseDto response = new AuthResponseDto();
        response.setSuccess(true);
        response.setToken(accessToken);
        response.setRefreshToken(refreshToken);
        response.setTokenType("Bearer");
        response.setExpiresIn(jwtUtil.getAccessTokenExpiration()); 
        response.setUserId(generateTestUserId(testUser.username));
        response.setUsername(testUser.username);
        response.setEmail(testUser.email);
        response.setFullName(testUser.fullName);
        response.setRoles(createTestUserRoles(testUser.role)); 
        response.setMessage("–ê–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–≤—Ç—ç—Ä–ª—ç—ç");
        
        return response;
    }

    /**
     * ”®–≥”©–≥–¥–ª–∏–π–Ω —Å–∞–Ω–≥–∞–∞—Å –∞–≤—Å–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ö–∞—Ä–∏—É “Ø“Ø—Å–≥—ç—Ö
     */
    private AuthResponseDto createDatabaseUserResponse(User user) {
        String accessToken = jwtUtil.generateAccessToken(user); 
        String refreshToken = jwtUtil.generateRefreshToken(user); 
        
        AuthResponseDto response = new AuthResponseDto();
        response.setSuccess(true);
        response.setToken(accessToken);
        response.setRefreshToken(refreshToken);
        response.setTokenType("Bearer");
        response.setExpiresIn(jwtUtil.getAccessTokenExpiration()); 
        response.setUserId(user.getId());
        response.setUsername(user.getUsername());
        response.setEmail(user.getEmail());
        response.setFullName(user.getFirstName() + " " + user.getLastName());
        // User entity-–∏–π–Ω roles —Ç–∞–ª–±–∞—Ä—ã–≥ Set<Role> –±–æ–ª–≥–æ–∂ ”©”©—Ä—á–∏–ª—Å”©–Ω —Ç—É–ª —à—É—É–¥ –¥–∞–º–∂—É—É–ª–Ω–∞
        response.setRoles(new HashSet<>(user.getRoles())); 
        response.setMessage("–ê–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–≤—Ç—ç—Ä–ª—ç—ç");
        
        return response;
    }

    /**
     * Spring Security-—ç—ç—Ä –±–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ö–∞—Ä–∏—É “Ø“Ø—Å–≥—ç—Ö
     */
    private AuthResponseDto createSpringSecurityResponse(Authentication authentication) {
        UserDetails userDetails = (UserDetails) authentication.getPrincipal();
        String accessToken = jwtUtil.generateAccessToken(userDetails); 
        String refreshToken = jwtUtil.generateRefreshToken(userDetails); 
        
        AuthResponseDto response = new AuthResponseDto();
        response.setSuccess(true);
        response.setToken(accessToken);
        response.setRefreshToken(refreshToken);
        response.setTokenType("Bearer");
        response.setExpiresIn(jwtUtil.getAccessTokenExpiration());
        response.setUsername(userDetails.getUsername());
        response.setEmail(userDetails.getUsername() + "@los.mn"); 
        response.setFullName(userDetails.getUsername()); 
        response.setMessage("–ê–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–≤—Ç—ç—Ä–ª—ç—ç");
        
        return response;
    }

    /**
     * –ê–º–∂–∏–ª—Ç–≥“Ø–π —Ö–∞—Ä–∏—É “Ø“Ø—Å–≥—ç—Ö
     */
    private AuthResponseDto createFailureResponse(String message) {
        AuthResponseDto response = new AuthResponseDto();
        response.setSuccess(false);
        response.setMessage(message);
        return response;
    }

    /**
     * –¢—É—Ä—à–∏–ª—Ç—ã–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –¥“Ø—Ä“Ø“Ø–¥–∏–π–≥ “Ø“Ø—Å–≥—ç—Ö
     */
    private Set<Role> createTestUserRoles(String roleName) {
        Role role = new Role();
        role.setName(roleName);
        // –ë—É—Å–∞–¥ —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π —Ç–∞–ª–±–∞—Ä—É—É–¥—ã–≥ —Ç–æ—Ö–∏—Ä—É—É–ª–∂ –±–æ–ª–Ω–æ
        return Set.of(role); 
    }

    /**
     * –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –¥“Ø—Ä“Ø“Ø–¥–∏–π–≥ String-—ç—ç—Ä –∞–≤–∞—Ö
     * AuthResponseDto-–¥ Set<Role> –±–∞–π–≥–∞–∞ —Ç—É–ª Set<Role> —Ö“Ø–ª—ç—ç–Ω –∞–≤–∞—Ö–∞–∞—Ä ”©”©—Ä—á–∏–ª—Å”©–Ω
     */
    private String getRoleString(Set<Role> roles) { 
        if (roles == null || roles.isEmpty()) {
            return "USER";
        }
        // –≠—Ö–Ω–∏–π –¥“Ø—Ä–∏–π–Ω –Ω—ç—Ä–∏–π–≥ –±—É—Ü–∞–∞–Ω–∞
        return roles.iterator().next().getName(); 
    }

    /**
     * –¢—É—Ä—à–∏–ª—Ç—ã–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω ID “Ø“Ø—Å–≥—ç—Ö
     */
    private UUID generateTestUserId(String username) {
        // Username-–¥ —Ç—É–ª–≥—É—É—Ä–ª–∞–Ω —Ç–æ–≥—Ç–º–æ–ª UUID “Ø“Ø—Å–≥—ç—Ö
        switch (username.toLowerCase()) {
            case "admin":
                return UUID.fromString("33333333-3333-3333-3333-333333333301");
            case "manager":
                return UUID.fromString("33333333-3333-3333-3333-333333333302");
            case "loan_officer":
                return UUID.fromString("33333333-3333-3333-3333-333333333303");
            case "reviewer":
                return UUID.fromString("33333333-3333-3333-3333-333333333304");
            case "customer_service":
                return UUID.fromString("33333333-3333-3333-3333-333333333305");
            default:
                return UUID.randomUUID();
        }
    }

    /**
     * –¢—É—Ä—à–∏–ª—Ç—ã–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª–ª—ç—ç—Å User –æ–±—ä–µ–∫—Ç “Ø“Ø—Å–≥—ç—Ö
     */
    private User createUserFromTestUser(TestUser testUser) {
        User user = new User();
        user.setId(generateTestUserId(testUser.username));
        user.setUsername(testUser.username);
        user.setEmail(testUser.email);
        user.setFirstName(testUser.fullName.split(" ")[0]);
        user.setLastName(testUser.fullName.contains(" ") ? testUser.fullName.split(" ", 2)[1] : "");
        user.setIsActive(true);
        user.setCreatedAt(LocalDateTime.now());
        user.setLastLoginAt(LocalDateTime.now());
        user.setPasswordHash(passwordEncoder.encode(testUser.password)); 
        Role testRole = new Role();
        testRole.setName(testUser.role);
        user.setRoles(Collections.singletonList(testRole)); 
        return user;
    }

    // ==================== TEST USER CLASS ====================
    
    private static class TestUser {
        final String username;
        final String password;
        final String role;
        final String fullName;
        final String email;
        
        TestUser(String username, String password, String role, String fullName, String email) {
            this.username = username;
            this.password = password;
            this.role = role;
            this.fullName = fullName;
            this.email = email;
        }
    }

    // ==================== STUB IMPLEMENTATIONS ====================
    // AuthService interface-–∏–π–Ω –±—É—Å–∞–¥ –º–µ—Ç–æ–¥—É—É–¥—ã–Ω default implementation
    
    @Override public boolean logoutUserFromAllDevices(UUID userId) { return true; }
    // invalidateToken method is implemented above
    @Override public boolean requestPasswordReset(String email) { return true; }
    @Override public boolean resetPassword(String resetToken, String newPassword) { return true; }
    @Override public boolean validatePasswordResetToken(String token) { return true; }
    @Override public String generateTemporaryPassword() { return "temp123"; }
    @Override public UserDto registerUser(UserDto userDto) { return userDto; }
    @Override public boolean activateUser(String activationToken) { return true; }
    @Override public boolean resendActivationCode(String email) { return true; }
    @Override public Map<String, Object> enableTwoFactorAuthentication(UUID userId) { return new HashMap<>(); }
    @Override public boolean disableTwoFactorAuthentication(UUID userId, String currentPassword) { return true; }
    @Override public boolean validateTwoFactorCode(UUID userId, String code) { return true; }
    @Override public String[] generateBackupCodes(UUID userId) { return new String[]{}; }
    @Override public boolean useTwoFactorBackupCode(UUID userId, String backupCode) { return true; }
    @Override public byte[] generateQRCode(UUID userId) { return new byte[]{}; }
    @Override public Map<String, Object> getActiveSessions(UUID userId) { return new HashMap<>(); }
    @Override public boolean terminateSession(UUID userId, String sessionId) { return true; }
    @Override public boolean terminateAllSessions(UUID userId) { return true; }
    @Override public boolean updateSessionActivity(String token) { return true; }
    @Override public boolean lockAccount(UUID userId, String reason, LocalDateTime until) { return true; }
    @Override public boolean unlockAccount(UUID userId) { return true; }
    @Override public boolean suspendAccount(UUID userId, String reason) { return true; }
    @Override public boolean activateAccount(UUID userId) { return true; }
    @Override public void recordFailedLoginAttempt(String username, String ipAddress) {}
    @Override public void recordSuccessfulLogin(String username, String ipAddress) {}
    @Override public boolean isRateLimited(String username, String ipAddress) { return false; }
    @Override public boolean detectSuspiciousLoginActivity(String username, String ipAddress) { return false; }
    @Override public Map<String, Object> validatePasswordStrength(String password) { return new HashMap<>(); }
    @Override public boolean isIpAddressAllowed(String ipAddress) { return true; }
    @Override public boolean isDeviceTrusted(UUID userId, String deviceFingerprint) { return true; }
    @Override public boolean registerTrustedDevice(UUID userId, String deviceFingerprint, String deviceName) { return true; }
    @Override public boolean sendEmailVerification(UUID userId) { return true; }
    @Override public boolean verifyEmail(String verificationToken) { return true; }
    @Override public boolean sendPhoneVerification(UUID userId) { return true; }
    @Override public boolean verifyPhone(UUID userId, String verificationCode) { return true; }
    @Override public boolean sendSecurityAlert(UUID userId, String alertType, String details) { return true; }
    @Override public boolean sendPasswordChangeNotification(UUID userId) { return true; }
    @Override public boolean sendNewDeviceLoginNotification(UUID userId, String deviceInfo) { return true; }
    @Override public boolean sendSuspiciousActivityNotification(UUID userId, String activityDetails) { return true; }
    @Override public Map<String, Object> getLoginHistory(UUID userId, int days) { return new HashMap<>(); }
    @Override public Map<String, Object> getSecurityLog(UUID userId, int days) { return new HashMap<>(); }
    @Override public Map<String, Object> getFailedLoginAttempts(String username, int hours) { return new HashMap<>(); }
    @Override public Map<String, Object> getActiveTokens(UUID userId) { return new HashMap<>(); }
    @Override public Map<String, Object> getTokenInfo(String token) { return new HashMap<>(); }
    @Override public String extendTokenExpiry(String token) { return token; }
    @Override public int cleanupExpiredTokens() { return 0; }
    @Override public String generateApiKey(UUID userId, String description, LocalDateTime expiresAt) { return "api-key"; }
    @Override public boolean validateApiKey(String apiKey) { return true; }
    @Override public boolean revokeApiKey(String apiKey) { return true; }
    @Override public Map<String, Object> getUserApiKeys(UUID userId) { return new HashMap<>(); }
    @Override public int getActiveUserCount() { return 1; } 
    @Override public Map<String, Object> getOnlineUsers() { return new HashMap<>(); }
    @Override public Map<String, Object> getSecurityStatistics() { return new HashMap<>(); }
    @Override public Map<String, Object> generateLoginAuditReport(LocalDateTime startDate, LocalDateTime endDate) { return new HashMap<>(); }
    @Override public Map<String, Object> generateSecurityActivityReport(UUID userId, LocalDateTime startDate, LocalDateTime endDate) { return new HashMap<>(); }
    @Override public Map<String, Object> analyzeLoginPatterns(UUID userId) { return new HashMap<>(); }
    @Override public Map<String, Object> getSecurityPolicy() { return new HashMap<>(); }
    @Override public boolean updateSecurityPolicy(Map<String, Object> policy) { return true; }
    @Override public Map<String, Object> getJwtConfiguration() { return new HashMap<>(); }
    @Override public Map<String, Object> checkAuthServiceHealth() { return new HashMap<>(); }
    @Override public Map<String, Object> performSecurityHealthCheck() { return new HashMap<>(); }
}